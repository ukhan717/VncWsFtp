<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Segger.UsbBulk.Wrapper</name>
    </assembly>
    <members>
        <member name="F:Segger.Version.DLL_VERSION">
            <summary>
            Import of the Version
            Define DLL_VERSION
            </summary>
        </member>
        <member name="F:Segger.Version.DLL_VERSION_NUMERIC">
            <summary>
            Import of the Version
            Define DLL_VERSION_NUMERIC
            </summary>
        </member>
        <member name="F:Segger.Version.DLL_VERSION_STRING">
            <summary>
            Import of the Version
            Define DLL_VERSION_STRING
            </summary>
        </member>
        <member name="F:Segger.Version.DLL_ASSEMBLY_VERSION_STRING">
            <summary>
            Import of the Version
            Define DLL_ASSEMBLY_VERSION_STRING
            </summary>
        </member>
        <member name="T:Segger.UsbBulkDeviceEvent">
            <summary>
            Specifies constants defining which event has occurred.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDeviceEvent.Added">
            <summary>
            A new USBBULK device has been added to the HOST.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDeviceEvent.Removed">
            <summary>
            A USBBULK device has been removed from the HOST.
            </summary>
        </member>
        <member name="T:Segger.UsbBulkMode">
            <summary>
            Specifies constants defining the read/write modes.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkMode.USBBULK_MODE_BIT_DEFAULT">
            <summary>
            Read/write methods return until all data have read or written.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkMode.USBBULK_MODE_BIT_ALLOW_SHORT_READ">
            <summary>
            Allows to return from a read method, if less than requested has been read.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkMode.USBBULK_MODE_BIT_ALLOW_SHORT_WRITE">
            <summary>
            Allows to return from a write method, if less than requested has been written.
            </summary>
        </member>
        <member name="T:Segger.SeggerException">
            <summary>
            A simple exception class used in this namespace.
            </summary>
        </member>
        <member name="M:Segger.SeggerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Segger.SeggerException class with serialized data.
            </summary>
            <param name="serializationInfo">The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="streamContext">The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Segger.SeggerException.#ctor">
            <summary>
            Initializes a new instance of the Segger.SeggerException class.
            </summary>
        </member>
        <member name="M:Segger.SeggerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Segger.SeggerException class with a specified error message.
            </summary>
            <param name="errorMessage">The message that describes the error.</param>
        </member>
        <member name="M:Segger.SeggerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Segger.SeggerException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="errorMessage">The error message that explains the reason for the exception.</param>
            <param name="baseException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Segger.UsbBulkNotificationFunc">
            <summary>
            Callback type, which is used with <see cref="M:Segger.NativeMethods.Init(Segger.UsbBulkNotificationFunc,System.IntPtr)"/>.
            </summary>
            <param name="context">Pointer or reference to a internal member which may be used when calling this callback.
                                   Can be <value>IntPrt.Zero</value>
            </param>
            <param name="deviceIndex">Index of the device. This can be either retrieved by the
                                   callback registered with <see cref="M:Segger.NativeMethods.Init(Segger.UsbBulkNotificationFunc,System.IntPtr)"/>
                                   or by using the DeviceMask when using the method GetNumAvailableDevices().
                                   Each bit in the device mask represents a device.
            </param>
            <param name="eventOccurred">Specifies which event has occurred.
            </param>
        </member>
        <member name="T:Segger.UsbBulkDeviceEventArgs">
            <summary>
            Used to pass arguments to a user callback to inform about an event.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDeviceEventArgs.#ctor(System.Int32,Segger.UsbBulkDeviceEvent)">
             <summary>
            
             </summary>
             <param name="deviceIndex">Holds the device index of the device for which the event occurred.</param>
             <param name="eventOccurred">Can be either UsbBulkDeviceEvent. </param>
             <returns></returns>
        </member>
        <member name="P:Segger.UsbBulkDeviceEventArgs.DeviceIndex">
            <summary>
            Saves the device index, for which the event occurred.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDeviceEventArgs.EventOccurred">
            <summary>
            Holds which event occurred.
            </summary>
        </member>
        <member name="T:Segger.UsbBulkDevInfo">
            <summary>
            Structure that is used in order to get information of a USB BULK device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevInfo.VendorId">
            <summary>
            Vendor id of the device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevInfo.ProductId">
            <summary>
            Product id of the device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevInfo.acSN">
            <summary>
            Serial number of the device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevInfo.acDevName">
            <summary>
            Device path of the device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevInfo.InterfaceNo">
            <summary>
            Number of the interface within the USB device.
            </summary>
        </member>
        <member name="T:Segger.UsbBulkSetupRequest">
            <summary>
            Structure that is used to send a setup request to the bulk device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkSetupRequest.bRequestType">
            <summary>
            This is the Setup's Request type.
             bRequestType is defined as follows:
            <list type="table">
              <listheader>
                <term>Bit Position</term>
                <term>Description</term>
                <term>Allowed Value</term>
              </listheader>
              <item>
                <term>0..4</term>
                <term>Recipient</term>
                <term> 
                  <para>0 -> Device</para>
                  <para>1 -> Interface</para>
                  <para>2 -> Endpoint</para>
                  <para>3 -> Other</para>
                  <para>4..31 Reserved</para>
                </term>
              </item>
              <item>
                <term>5..6</term>
                <term>Type</term>
                <term> 
                  <para>0 -> Standard</para>
                  <para>1 -> Class</para>
                  <para>2 -> Vendor</para>
                  <para>3 -> Reserved</para>
                </term>
              </item>
              <item>
                <term>7</term>
                <term>Data Transfer Direction</term>
                <term> 
                  <para>0 - Host-to-Device</para>
                  <para>1 -> Device-to-Host</para>
                </term>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Segger.UsbBulkSetupRequest.bRequest">
            <summary>
            Specifies a specific request that shall be handled by the device. There are some specific request defined
            in the USB 2.0 specification <see href="http://www.usb.org" />. Do not use those unless you are aware what you are doing!!!
            </summary>
        </member>
        <member name="F:Segger.UsbBulkSetupRequest.wValue">
            <summary>
            Send a specific parameter with the request.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkSetupRequest.wIndex">
            <summary>
            This is the second parameter which is user-defined. In many cases wIndex is used to specify a the interface number to which you would like to talk.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkSetupRequest.wLength">
            <summary>
            This parameter specifies the size of the data length. It specifies the length of the data transferred during
            the second phase of the control transfer. The direction of data transfer (host-to-device or device-to-host)
            is indicated by the Direction bit of the bRequestType field. If this parameter is zero, there is no data transfer phase and thus buffer can be empty.
            </summary>
        </member>
        <member name="M:Segger.NativeMethods.Close(System.Int32)">
            <summary>
            Closes the handle to the device which was opened with Open()
            </summary>
            <param name="hDevice">Handle to the device</param>
            <returns>void</returns>
        </member>
        <member name="M:Segger.NativeMethods.Open(System.UInt32)">
            <summary>
            Opens a handle to a connected device.
            </summary>
            <param name="DevIndex">Index of the device. This can be either retrieved by the
                                   callback registered with RegisterNotification()
                                   or by using the DeviceMask when using the method GetNumAvailableDevices().
                                   Each bit in the device mask represents a device.
            </param>
            <returns>Handle to a valid device, otherwise the handle is 0.</returns>
        </member>
        <member name="M:Segger.NativeMethods.Read(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from device from specified device.
            </summary>
            <param name="hDevice">Handle to the device.</param>
            <param name="pBuffer">array of a byte buffer.</param>
            <param name="numBytes">size of the array.</param>
            <param name="timeOut">timeout given in ms.</param>
            <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.Read(System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads data from device from specified device.
            </summary>
            <param name="hDevice">Handle to the device.</param>
            <param name="pBuffer">POinter to a buffer.</param>
            <param name="numBytes">Size of the buffer.</param>
            <param name="timeOut">timeout given in ms.</param>
            <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.Write(System.Int32,System.Byte[],System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pBuffer"></param>
             <param name="numBytes"></param>
             <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.Write(System.Int32,System.IntPtr,System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pBuffer"></param>
             <param name="numBytes"></param>
             <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.WriteTimed(System.Int32,System.Byte[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pBuffer"></param>
             <param name="numBytes"></param>
             <param name="timeOut"></param>
             <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.WriteTimed(System.Int32,System.IntPtr,System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pBuffer"></param>
             <param name="numBytes"></param>
             <param name="timeOut"></param>
             <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.WriteRead(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pWrBuffer"></param>
             <param name="wrNumBytes"></param>
             <param name="pRdBuffer"></param>
             <param name="rdNumBytes"></param>
             <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.WriteRead(System.Int32,System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pWrBuffer"></param>
             <param name="wrNumBytes"></param>
             <param name="pRdBuffer"></param>
             <param name="rdNumBytes"></param>
             <returns></returns>
        </member>
        <member name="M:Segger.NativeMethods.GetConfigDescriptor(System.Int32,System.Byte[],System.Int32)">
             <summary>
            
             </summary>
             <param name="hDevice"></param>
             <param name="pBuffer"></param>
             <param name="size"></param>
             <returns></returns>
        </member>
        <member name="T:Segger.UsbBulkDevice">
            <summary>
            Main class of the Segger namespace for handling emUSB-Device BULK device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevice.MaxNumDevices">
            <summary>
            Show how many device are allowed.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice._OnDevNotification(System.IntPtr,System.UInt32,Segger.UsbBulkDeviceEvent)">
            <summary>
            Callback function in order to be informed when a device is added or removed.
            </summary>
            <param name="context">Is a null pointer, since it is not necessary.</param>
            <param name="deviceIndex">The index of the device that is added or removed.</param>
            <param name="eventOccurred">Gives the event whether the device is removed or added.</param>
            <see cref="T:Segger.UsbBulkNotificationFunc"/>
        </member>
        <member name="M:Segger.UsbBulkDevice.#cctor">
            <summary>
            Static constructor which will be called whenever a new instance of the USBBULK_DEVICE class is created
            or any static member functions or properties are referenced.
            This makes sure that the USBBULK interface is initialized.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.GetSerialNo(System.Int32)">
            <summary>
            Static function that gathers the serial number of a specific device given by the Id of the device.
            </summary>
            <param name="id">Id of the device</param>
            <returns>The serial number of the given device otherwise ""</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.IsDeviceIdPresent(System.Int32)">
            <summary>
            Static function that gathers the serial number of a specific device given by the Id of the device.
            </summary>
            <param name="id">Id of the device</param>
            <returns>returns true whether the specific device is available</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.SetUsbId(System.Int32,System.Int32)">
            <summary>
            This function shall not be used any more. The function is obsolete and will throw an exception.
            In order to add/set the desired vendorId/producId pair please use the <see cref="M:Segger.UsbBulkDevice.AddAllowedDeviceItem(System.Int32,System.Int32)"/>
            method.
            <seealso cref="M:Segger.UsbBulkDevice.AddAllowedDeviceItem(System.Int32,System.Int32)"/>
            </summary>
            <param name="vendorId">Vendor id that shall be used.</param>
            <param name="productId">Product id that shall be used.</param>
        </member>
        <member name="M:Segger.UsbBulkDevice.AddAllowedDeviceItem(System.Int32,System.Int32)">
             <summary>
             Sets the vendor and product id for which the USB bulk class shall be used.
             This will also close all handle to any opened device. So therefore this function
             has to be called first before any device is opened.
             </summary>
             <param name="vendorId">Vendor id that shall be added.</param>
             <param name="productId">Product id that shall be added.</param>
             <example>
             This example shows how to use this method
             <code lang="c#">
               _func(void) {
                 int i;
                 UsbBulkDevice.AddAllowedDeviceItem(0x8765, 0x1121);
                 while (UsbBulkDevice.DeviceCount == 0) {
                   System.Threading.Thread.Sleep(100);
                 }
                 for (i = 0; i &lt; UsbBulkDevice.DeviceCount; i++) {
                   if (UsbBulkDevice.IsDeviceIdPresent(i)) {
                     Console.Write("Found the following device {0}: {1}\n", i, UsbBulkDevice.GetSerialNo(i));
                   }
                 }
                 Console.WriteLine("Found {0:D} devices", UsbBulkDevice.DeviceCount);
               }
             </code>
             <code lang="vb">
               Sub _func()
                 Dim i as Integer
            
                 Segger.UsbBulkDevice.AddAllowedDeviceItem(&amp;H1366, &amp;H101)
                 While Segger.UsbBulkDevice.DeviceCount = 0
                   System.Threading.Thread.Sleep(100)
                 End While
                 For i = 0 To Segger.UsbBulkDevice.DeviceCount
                   If Segger.UsbBulkDevice.IsDeviceIdPresent(i) Then
                     Console.Write("Found the following device {0} {1}\n", i, Segger.UsbBulkDevice.GetSerialNo(i))
                   End If
                 Next
                 Console.WriteLine("Found {0:D} devices", Segger.UsbBulkDevice.DeviceCount)
               End Sub
             </code>
             </example>
        </member>
        <member name="M:Segger.UsbBulkDevice.RemoveAllowedDeviceItem(System.Int32,System.Int32)">
            <summary>
              Removes a vendorId/productId pair from the list.
              It also makes sure that the device are marked as removed.
              Close method needs to be called in order to remove the instance.
            </summary>
            <param name="vendorId">Vendor id that shall be removed.</param>
            <param name="productId">Product id that shall be removed.</param>
        </member>
        <member name="M:Segger.UsbBulkDevice.GetAvailableDeviceList">
            <summary>
            Looks for device that are actually present and returns a list with the devices ids.
            </summary>
            <returns>A list of available items</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.GetDevInfo(System.Int32)">
            <summary>
             Returns the device information about a device given by the index.
            </summary>
            <exception cref="T:Segger.SeggerException">  Thrown when a invalid index is specified. </exception>
            <param name="index">  Device index to get the device info. </param>
            <returns> Device info structure containing the device information. </returns>
        </member>
        <member name="F:Segger.UsbBulkDevice.hDevice">
            <summary>
            Holds the handle of the opened device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevice.SerialNo">
            <summary>
            Stores the serial number of the opened device.
            </summary>
        </member>
        <member name="F:Segger.UsbBulkDevice.Initialized">
            <summary>
            Check whether the internal properties have already been initialized.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.Dispose(System.Boolean)">
            <summary>
            Dispose(bool Disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.Finalize">
            <summary>
            Public destructor that makes sure that the handle to the opened device is closed.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.#ctor">
            <summary>
            Public constructor for create an new instance to a USBBULK device.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.#ctor(System.Int32)">
            <summary>
            Public constructor for create a new instance to a USBBULK device.
            This constructor will also open the device.
            </summary>
            <param name="id">Id that shall be opened</param>
        </member>
        <member name="M:Segger.UsbBulkDevice.ToString">
            <summary>
            Used to return the serial number of the opened device
            </summary>
            <returns>Returns the serial number of the opened device</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.ResetPipe">
            <summary>
            Resets the read and write pipe of the opened device.
            </summary>
            <returns>When the operation was successful the return value is non-zero.</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.ResetDevice">
            <summary>
            Issues a USB reset which will force a re-enumeration of the device.
            </summary>
            <returns>When the operation was successful the return value is non-zero.</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.FlushRx">
            <summary>
            Flushes any read data in the usb bulk module and in the usb bulk driver.
            </summary>
            <returns>When the operation was successful the return value is non-zero.</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.CancelRead">
            <summary>
            Cancels a read operation
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.ReadWrite(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Sends a read/write request to the device
            </summary>
            <param name="writeData">Pointer to the buffer that holds the data to write</param>
            <param name="bytesToWrite">Number of byte to write</param>
            <param name="readData">Pointer to the buffer that should hold the data to read</param>
            <param name="bytesToRead">Number of bytes to be read</param>
            <returns>The number of byte that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.ReadWrite(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Sends a read/write request to the device, data shall be read/written in byte arrays
            </summary>
            <param name="writeData">Reference to a byte array containing the data to write</param>
            <param name="bytesToWrite">Number of bytes that shall be written from the byte array</param>
            <param name="readData">Reference to a byte array in order to store the data into it</param>
            <param name="bytesToRead">Number of bytes that shall be read into the byte array</param>
            <returns>The number of byte that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.ReadWrite(System.Byte[],System.Byte[])">
            <summary>
            Sends a read/write request to the device, data shall be read/written in byte arrays
            </summary>
            <param name="writeData">Reference to a byte array containing the data to write</param>
            <param name="readData">Reference to a byte array in order to store the data into it></param>
            <returns>The number of byte that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.WriteRead(System.IntPtr,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Sends a read/write request to the device
            </summary>
            <param name="writeData">Pointer to the buffer that holds the data to write</param>
            <param name="bytesToWrite">Number of byte to write</param>
            <param name="readData">Pointer to the buffer that should hold the data to read</param>
            <param name="bytesToRead">Number of bytes to be read</param>
            <returns>The number of byte that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.WriteRead(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Sends a read/write request to the device, data shall be read/written in byte arrays
            </summary>
            <param name="writeData">Reference to a byte array containing the data to write</param>
            <param name="bytesToWrite">Number of bytes that shall be written from the byte array</param>
            <param name="readData">Reference to a byte array in order to store the data into it</param>
            <param name="bytesToRead">Number of bytes that shall be read into the byte array</param>
            <returns>The number of byte that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.WriteRead(System.Byte[],System.Byte[])">
            <summary>
            Sends a read/write request to the device, data shall be read/written in byte arrays
            </summary>
            <param name="writeData">Reference to a byte array containing the data to write</param>
            <param name="readData">Reference to a byte array in order to store the data into it></param>
            <returns>The number of byte that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.Dispose">
            <summary>
            Implement IDisposable.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.Open(System.Int32)">
            <summary>
            Opens the device given by the Id.
            </summary>
            <param name="id">Id of the device to open</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when an invalid id is specified.</exception>
        </member>
        <member name="M:Segger.UsbBulkDevice.Open">
            <summary>
            Opens the device given by the Id.
            </summary>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device when the device could not be opened, or neither the 
                                                     config descriptor nor the serial number could not be retrieved.</exception>
        </member>
        <member name="M:Segger.UsbBulkDevice.Close">
            <summary>
            Close the device.
            </summary>
        </member>
        <member name="M:Segger.UsbBulkDevice.Read(System.Byte[],System.Int32)">
            <summary>
            Reads data from the opened device
            </summary>
            <param name="data">Reference to a byte array in order to store the data into it.</param>
            <param name="bytesToRead">Number of bytes that shall be read into the byte array</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.Read(System.Byte[])">
            <summary>
            Reads data from the opened device
            </summary>
            <param name="data">Reference to a byte array in order to store the data into it.</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.ReadTimed(System.Byte[],System.Int32)">
            <summary>
            Reads data from the opened device
            </summary>
            <param name="data">Reference to a byte array in order to store the data into it.</param>
            <param name="timeOut">Specifies a time-out given in milliseconds</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been read</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.Read(System.IntPtr,System.Int32)">
            <summary>
            Reads data to the opened device.
            </summary>
            <param name="data">Pointer to a buffer that shall hold the data to read.</param>
            <param name="bytesToRead">Number of bytes that shall be read into the buffer</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.ReadTimed(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads data to the opened device.
            </summary>
            <param name="data">Pointer to a buffer that shall hold the data to read.</param>
            <param name="bytesToRead">Number of bytes that shall be read into the buffer</param>
            <param name="timeOut">Specifies a time-out given in milliseconds</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.Write(System.Byte[])">
            <summary>
            Writes data to the opened device.
            </summary>
            <param name="data">Reference to a byte array containing the data to write.</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.Write(System.Byte[],System.Int32)">
            <summary>
            Writes data to the opened device.
            </summary>
            <param name="data">Reference to a byte array containing the data to write.</param>
            <param name="bytesToWrite">Number of bytes that shall be written from the byte array</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.Write(System.IntPtr,System.Int32)">
            <summary>
            Writes data to the opened device.
            </summary>
            <param name="data">Pointer to a buffer that contains the data to write.</param>
            <param name="bytesToWrite">Number of bytes that shall be written from the buffer</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.WriteTimed(System.Byte[],System.Int32)">
            <summary>
            Writes data to the opened device.
            </summary>
            <param name="data">Reference to a byte array containing the data to write.</param>
            <param name="timeOut">Specifies a time-out given in milliseconds</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.WriteTimed(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the opened device.
            </summary>
            <param name="data">Reference to a byte array containing the data to write.</param>
            <param name="bytesToWrite">Number of bytes that shall be written from the byte array</param>
            <param name="timeOut">Specifies a time-out given in milliseconds</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.WriteTimed(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Writes data to the opened device.
            </summary>
            <param name="data">Pointer to a buffer that contains the data to write.</param>
            <param name="bytesToWrite">Number of bytes that shall be written from the buffer</param>
            <param name="timeOut">Specifies a time-out given in milliseconds</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>Number of bytes that have been written</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.SendSetupReq(Segger.UsbBulkSetupRequest@,System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            Sends a setup request to the device.
            </summary>
            <param name="setupRequest">Reference to a Setup request</param>
            <param name="buffer">Handle to memory, can also be IntPtr.Zero</param>
            <param name="bufferSize">A reference with the size of the buffer, on return the parameter contains the number of bytes transferred. Please make sure that buffer and bufferSize is at least as large as wLength.</param>
            <param name="timeOut">Timeout given in ms.</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>0 if the setup request was successful. Otherwise the return value is negative</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.SendSetupReq(Segger.UsbBulkSetupRequest@,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            Sends a setup request to the device.
            </summary>
            <param name="setupRequest">Reference to a Setup request</param>
            <param name="buffer">Byte array to store/retrieved data to/from device.</param>
            <param name="bufferSize">Reference with the size of the buffer, on return the parameter contains the number of bytes transferred. Please make sure that buffer and bufferSize is at least as large as wLength.</param>
            <param name="timeOut">Timeout given in ms.</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>0 if the setup request was successful. Otherwise the return value is negative</returns>
        </member>
        <member name="M:Segger.UsbBulkDevice.SendSetupReq(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Sends a setup request to the device.
            </summary>
            <param name="bRequestType"><see cref="F:Segger.UsbBulkSetupRequest.bRequestType">Setup's Request type</see>. <seealso cref="F:Segger.UsbBulkSetupRequest.bRequestType"/></param>
            <param name="bRequest"><see cref="F:Segger.UsbBulkSetupRequest.bRequest">Setup's Request</see>.<seealso cref="F:Segger.UsbBulkSetupRequest.bRequest"/></param>
            <param name="wValue"><see cref="F:Segger.UsbBulkSetupRequest.wValue">Setup's Request value</see>.<seealso cref="F:Segger.UsbBulkSetupRequest.wValue"/></param>
            <param name="wIndex"><see cref="F:Segger.UsbBulkSetupRequest.wIndex">Setup's Request index</see>.<seealso cref="F:Segger.UsbBulkSetupRequest.wIndex"/></param>
            <param name="wLength"><see cref="F:Segger.UsbBulkSetupRequest.wLength">Length of the data phase</see>. <seealso cref="F:Segger.UsbBulkSetupRequest.wLength"/>If this parameter is zero, there is no data transfer phase and thus buffer can be empty.</param>
            <param name="buffer">Byte array to store/retrieved data to/from device.</param>
            <param name="bufferSize">Reference with the size of the buffer, on return the parameter contains the number of bytes transferred. Please make sure that buffer and bufferSize is at least as large as wLength.</param>
            <param name="timeOut">Timeout given in ms.</param>
            <exception cref="T:Segger.SeggerException">An exception is thrown when the device is not opened.</exception>
            <returns>0 if the setup request was successful. Otherwise the return value is negative</returns>
        </member>
        <member name="P:Segger.UsbBulkDevice.DeviceCount">
            <summary>
            Stores the number of device that are available.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.DriverVersion">
            <summary>
            Hold the USB BULK driver version
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.DllVersion">
            <summary>
            Hold the USB BULK DLL version
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.DriverCompileDate">
            <summary>
            Stores the compile date of the used USB BULK driver.
            </summary>
        </member>
        <member name="E:Segger.UsbBulkDevice.OnDeviceNotification">
             <summary>
             Event handler to which an application can connect in order to receive device notifications
             </summary>
             <example>
             This example shows how to use this method
             <code lang="c#">
                  static void OnDeviceNotification(object sender, UsbBulkDeviceEventArgs e) {
                    //
                    // Show the event message that occurred
                    //
                    if (e.EventOccurred == UsbBulkDeviceEvent.Added) {
                      Console.ForegroundColor = ConsoleColor.DarkGreen;
                    } else if (e.EventOccurred == UsbBulkDeviceEvent.Removed) {
                      Console.ForegroundColor = ConsoleColor.DarkRed;
                    }
                    Console.WriteLine("Received an event:\n  Event: {0}\n  DeviceIndex: {1}", e.EventOccurred.ToString(), e.DeviceIndex.ToString());
                    Console.ResetColor();
                  }
            
                  static void Main(string[] args) {
                    UsbBulkDevice.OnDeviceNotification += OnDeviceNotification;
                    [...]
                  }
             </code>
             <code lang="vb">
                 Public Sub OnDeviceNotification(ByVal sender As Object, ByVal e As UsbBulkDeviceEventArgs)
                   '
                   ' Show the event message that occurred
                   '
                   If e.EventOccurred = UsbBulkDeviceEvent.Added Then
                     Console.ForegroundColor = ConsoleColor.DarkGreen
                   ElseIf e.EventOccurred = UsbBulkDeviceEvent.Removed Then
                     Console.ForegroundColor = ConsoleColor.DarkRed
                   End If
                   Console.WriteLine("Received an event:\n  Event: {0}\n  DeviceIndex: {1}", e.EventOccurred.ToString(), e.DeviceIndex.ToString())
                   Console.ResetColor()
                 End Sub
            
                 Sub Main()
                   AddHandler UsbBulkDevice.OnDeviceNotification, AddressOf OnDeviceNotification
                   [....]
                 End Sub
             </code>
             <code lang="cpp">
             static void _OnDeviceNotifation(Object ^ sender, UsbBulkDeviceEventArgs ^ e) {
               //
               // Show the event message that occurred
               //
               if (e->EventOccurred == UsbBulkDeviceEvent::Added) {
                 Console::ForegroundColor = ConsoleColor::DarkGreen;
               } else if (e->EventOccurred == UsbBulkDeviceEvent::Removed) {
                 Console::ForegroundColor = ConsoleColor::DarkRed;
               }
               Console::WriteLine("Received an event:\n  Event: {0}\n  DeviceIndex: {1}", e->EventOccurred.ToString(), e->DeviceIndex.ToString());
               Console::ResetColor();
             }
            
             int main(array&lt;System::String ^&gt; ^args) {
               UsbBulkDevice::OnDeviceNotification += gcnew EventHandler&lt;UsbBulkDeviceEventArgs ^&gt;(_OnDeviceNotifation);
               [...]
             }
             </code>
             </example>
            
        </member>
        <member name="P:Segger.UsbBulkDevice.ReadMaxTransferSize">
            <summary>
            Refers the maximum of bytes that can be read at once.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.WriteMaxTransferSize">
            <summary>
            Refers the maximum of bytes that can be written at once.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.ReadMaxTransferSizeDown">
            <summary>
            Refers the maximum of bytes that the driver can read at once.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.WriteMaxTransferSizeDown">
            <summary>
            Refers the maximum of bytes that the driver can write at once.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.ReadTimeout">
            <summary>
            Read timeout given in ms.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.WriteTimeout">
            <summary>
            Write timeout given in ms.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.DeviceEnumeratedAtTickCount">
            <summary>
            Gives the tick count from which the device was successfully be enumerated by the driver.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.VendorName">
            <summary>
            Gives vendor name of the device when the string has been assigned by the target device.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.ProductName">
            <summary>
            Gives product name of the device when the string has been assigned by the target device.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.IsOpened">
            <summary>
            Returns if the device is already been opened or not.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.deviceId">
            <summary>
            Stores the Device Id of the device.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.ReadMode">
            <summary>
            Gives the read mode of the give instance.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.WriteMode">
            <summary>
            Gives the write mode of the give instance.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.ProductId">
            <summary>
            Returns the product id of the identified device.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.VendorId">
            <summary>
            Returns the vendor id of the identified device.
            </summary>
        </member>
        <member name="P:Segger.UsbBulkDevice.InterfaceNo">
            <summary>
            Returns the number of interface of the bulk class of the identified device.
            </summary>
        </member>
        <member name="E:Segger.UsbBulkDevice.OnRemove">
             <summary>
             Event handler which is called when the device is removed.
             </summary>
             <example>
             This example shows how to use this method
             <code lang="c#">
               void OnDeviceRemove(object sender, EventArgs e) {
                 //
                 // Device is not available anymore
                 // Close it.
                 // GC will do the rest.
                 //
                 this.Close()
               }
            
               _func(void) {
                 UsbBulkDevice Device = new UsbBulkDevice();
            
                 Device.OnRemove += OnDeviceRemove;
                 [...]
               }
             </code>
             <code lang="vb">
               Sub OnDeviceRemove(sender as object, e as EventArgs)
                 '
                 ' Device is not available anymore
                 ' Close it.
                 ' GC will do the rest.
                 '
                 Me.Close()
               End Sub
            
               Sub _func()
                 Dim Device As New UsbBulkDevice()
            
                 AddHandler Device.OnRemove, AddressOf OnDeviceRemove
                 [...]
               End Sub
             </code>
             <code lang="cpp">
             static void OnDeviceRemove(Object ^ sender, EventArgs ^ e) {
               UsbBulkDevice ^ pDevice;
            
               pDevice = (UsbBulkDevice ^)(sender);
               pDevice->Close();
             }
            
             void func(void) {
               UsbBulkDevice^ pDevice = gcnew UsbBulkDevice();
            
               pDevice->OnRemove += gcnew EventHandler(OnDeviceRemove);
               [...]
             }
             </code>
             </example>
        </member>
    </members>
</doc>
