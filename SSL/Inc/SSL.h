/*********************************************************************
*                     SEGGER Microcontroller GmbH                    *
*                        The Embedded Experts                        *
**********************************************************************
*                                                                    *
*       (c) 2003 - 2019  SEGGER Microcontroller GmbH                 *
*                                                                    *
*       www.segger.com     Support: support@segger.com               *
*                                                                    *
**********************************************************************
-------------------------- END-OF-HEADER -----------------------------

File        : SSL.h
Purpose     : SSL/TLS User-Level API.

*/

#ifndef SSL_H
#define SSL_H

/*********************************************************************
*
*       #include Section
*
**********************************************************************
*/

#include "SSL_ConfDefaults.h"
#include "SSL_Types.h"

#ifdef __cplusplus
extern "C" {
#endif

/*********************************************************************
*
*       Defines, fixed
*
**********************************************************************
*/

/*********************************************************************
*
*       Version number
*
*  Description
*    Symbol expands to a number that identifies the specific emSSL release.
*/
#define SSL_VERSION               25602  // Format is "Mmmrr" so, for example, 25401 corresponds to version 2.54a.

/*********************************************************************
*
*       Protocol version number encoding for SSL and TLS
*/
#define SSL_PROTOCOL_ID_SSL_3v0   0x0300      // SSL 3.0 --- this is now considered insecure and is not supported [POODLE].
#define SSL_PROTOCOL_ID_TLS_1v0   0x0301      // TLS 1.0
#define SSL_PROTOCOL_ID_TLS_1v1   0x0302      // TLS 1.1
#define SSL_PROTOCOL_ID_TLS_1v2   0x0303      // TLS 1.2

/*********************************************************************
*
*       Logging flags
*
*  Description
*    Flags that control log output.
*
*  Additional information
*    Flags are added using SSL_AddLogFilter() and removed using
*    SSL_RemoveLogFilter().
*/
#define SSL_LOG_ERROR           (1uL <<  0)  // Log all error status returns generated by emSSL.
#define SSL_LOG_RECORD          (1uL <<  1)  // Log record-layer protocol details.
#define SSL_LOG_SIGNATURES      (1uL <<  2)  // Log signature operations.
#define SSL_LOG_CERTIFICATES    (1uL <<  3)  // Log certificate-related information; usually used in conjunction with SSL_LOG_SIGNATURES.
#define SSL_LOG_VERIFY_DATA     (1uL <<  4)  // Log verification data; usually used in conjunction with SSL_LOG_HANDSHAKE.
#define SSL_LOG_STATES          (1uL <<  5)  // Log SSL state machine transitions.
#define SSL_LOG_KEYS            (1uL <<  6)  // Log key derivation for session bulk encryption keys; usually used in conjunction with SSL_LOG_CRYPTO.
#define SSL_LOG_CIPHER          (1uL <<  7)  // Log cipher encryption and decryption.
#define SSL_LOG_SOCKET_SEND     (1uL <<  8)  // Log raw data sent over an SSL connection.
#define SSL_LOG_SOCKET_RECV     (1uL <<  9)  // Log raw data received over an SSL connection.
#define SSL_LOG_SUITES          (1uL << 10)  // Log agreed SSL cipher suite.
#define SSL_LOG_PRF             (1uL << 11)  // Log inputs and outputs of the SSL PRF function.
#define SSL_LOG_HANDSHAKE       (1uL << 12)  // Log data contributing to the SSL handshake when computing verification data.
#define SSL_LOG_MESSAGES        (1uL << 13)  // Log decoded SSL messages.
#define SSL_LOG_CONFIG          (1uL << 14)  // Log emSSL configuration on startup.
#define SSL_LOG_ALERT           (1uL << 15)  // Log received alert messages.
#define SSL_LOG_APP             (1uL << 31)  // Log application messages.

/*********************************************************************
*
*       Warning flags
*
*  Description
*    Flags that control warning output.
*
*  Additional information
*    Flags are added using SSL_AddWarnFilter() and removed using
*    SSL_RemoveWarnFilter().
*/
#define SSL_WARN_CRYPTO         (1uL << 0)  // Warn on cryptography-related errors such as bad message formatting or bad key parameters.
#define SSL_WARN_IGNORE         (1uL << 1)  // Warn on purposely-ignored nonfatal conditions, such as
                                            // SSL extensions that are not recognized by the current
                                            // emSSL implementation which allow forward compatibility
                                            // with TLS specifications.
#define SSL_WARN_X509           (1uL << 2)  // Warn on nonfatal X.509 certificate issues identified by
                                            // emSSL which allow forward compatibility with new X.509
                                            // capabilities.
#define SSL_WARN_CONFIG         (1uL << 3)  // Warn on configuration issues on startup.
#define SSL_WARN_TICKETS        (1uL << 4)  // Warn on session ticket problems.

/*********************************************************************
*
*       Cipher suite IDs
*
*  Description
*    Official IANA names for cipher suites, but using emSSL's "SSL"
*    prefix rather than "TLS".
*
*  See also
*    http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4
*/
#define SSL_SUITE_ID_NULL_WITH_NULL_NULL                        0x0000 // [RFC5246]
#define SSL_SUITE_ID_RSA_WITH_NULL_MD5                          0x0001 // [RFC5246]            weak
#define SSL_SUITE_ID_RSA_WITH_NULL_SHA                          0x0002 // [RFC5246]            weak
#define SSL_SUITE_ID_RSA_EXPORT_WITH_RC4_40_MD5                 0x0003 // [RFC4346] [RFC6347]
#define SSL_SUITE_ID_RSA_WITH_RC4_128_MD5                       0x0004 // [RFC5246] [RFC6347]
#define SSL_SUITE_ID_RSA_WITH_RC4_128_SHA                       0x0005 // [RFC5246] [RFC6347]
#define SSL_SUITE_ID_RSA_EXPORT_WITH_RC2_CBC_40_MD5             0x0006 // [RFC4346]
#define SSL_SUITE_ID_RSA_WITH_IDEA_CBC_SHA                      0x0007 // [RFC5469]
#define SSL_SUITE_ID_RSA_EXPORT_WITH_DES40_CBC_SHA              0x0008 // [RFC4346]
#define SSL_SUITE_ID_RSA_WITH_DES_CBC_SHA                       0x0009 // [RFC5469]            weak, removed from TLS 1.2
#define SSL_SUITE_ID_RSA_WITH_3DES_EDE_CBC_SHA                  0x000A // [RFC5246]
#define SSL_SUITE_ID_DH_DSS_EXPORT_WITH_DES40_CBC_SHA           0x000B // [RFC4346]
#define SSL_SUITE_ID_DH_DSS_WITH_DES_CBC_SHA                    0x000C // [RFC5469]
#define SSL_SUITE_ID_DH_DSS_WITH_3DES_EDE_CBC_SHA               0x000D // [RFC5246]
#define SSL_SUITE_ID_DH_RSA_EXPORT_WITH_DES40_CBC_SHA           0x000E // [RFC4346]
#define SSL_SUITE_ID_DH_RSA_WITH_DES_CBC_SHA                    0x000F // [RFC5469]
#define SSL_SUITE_ID_DH_RSA_WITH_3DES_EDE_CBC_SHA               0x0010 // [RFC5246]
#define SSL_SUITE_ID_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA          0x0011 // [RFC4346]
#define SSL_SUITE_ID_DHE_DSS_WITH_DES_CBC_SHA                   0x0012 // [RFC5469]
#define SSL_SUITE_ID_DHE_DSS_WITH_3DES_EDE_CBC_SHA              0x0013 // [RFC5246]
#define SSL_SUITE_ID_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA          0x0014 // [RFC4346]
#define SSL_SUITE_ID_DHE_RSA_WITH_DES_CBC_SHA                   0x0015 // [RFC5469]            weak, removed from TLS 1.2
#define SSL_SUITE_ID_DHE_RSA_WITH_3DES_EDE_CBC_SHA              0x0016 // [RFC5246]
#define SSL_SUITE_ID_DH_anon_EXPORT_WITH_RC4_40_MD5             0x0017 // [RFC4346] [RFC6347]
#define SSL_SUITE_ID_DH_anon_WITH_RC4_128_MD5                   0x0018 // [RFC5246] [RFC6347]
#define SSL_SUITE_ID_DH_anon_EXPORT_WITH_DES40_CBC_SHA          0x0019 // [RFC4346]
#define SSL_SUITE_ID_DH_anon_WITH_DES_CBC_SHA                   0x001A // [RFC5469]
#define SSL_SUITE_ID_DH_anon_WITH_3DES_EDE_CBC_SHA              0x001B // [RFC5246]
#define SSL_SUITE_ID_KRB5_WITH_DES_CBC_SHA                      0x001E // [RFC2712]
#define SSL_SUITE_ID_KRB5_WITH_3DES_EDE_CBC_SHA                 0x001F // [RFC2712]
#define SSL_SUITE_ID_KRB5_WITH_RC4_128_SHA                      0x0020 // [RFC2712] [RFC6347]
#define SSL_SUITE_ID_KRB5_WITH_IDEA_CBC_SHA                     0x0021 // [RFC2712]
#define SSL_SUITE_ID_KRB5_WITH_DES_CBC_MD5                      0x0022 // [RFC2712]
#define SSL_SUITE_ID_KRB5_WITH_3DES_EDE_CBC_MD5                 0x0023 // [RFC2712]
#define SSL_SUITE_ID_KRB5_WITH_RC4_128_MD5                      0x0024 // [RFC2712] [RFC6347]
#define SSL_SUITE_ID_KRB5_WITH_IDEA_CBC_MD5                     0x0025 // [RFC2712]
#define SSL_SUITE_ID_KRB5_EXPORT_WITH_DES_CBC_40_SHA            0x0026 // [RFC2712]
#define SSL_SUITE_ID_KRB5_EXPORT_WITH_RC2_CBC_40_SHA            0x0027 // [RFC2712]
#define SSL_SUITE_ID_KRB5_EXPORT_WITH_RC4_40_SHA                0x0028 // [RFC2712] [RFC6347]
#define SSL_SUITE_ID_KRB5_EXPORT_WITH_DES_CBC_40_MD5            0x0029 // [RFC2712]
#define SSL_SUITE_ID_KRB5_EXPORT_WITH_RC2_CBC_40_MD5            0x002A // [RFC2712]
#define SSL_SUITE_ID_KRB5_EXPORT_WITH_RC4_40_MD5                0x002B // [RFC2712] [RFC6347]
#define SSL_SUITE_ID_PSK_WITH_NULL_SHA                          0x002C // [RFC4785]            weak
#define SSL_SUITE_ID_DHE_PSK_WITH_NULL_SHA                      0x002D // [RFC4785]            weak
#define SSL_SUITE_ID_RSA_PSK_WITH_NULL_SHA                      0x002E // [RFC4785]            weak
#define SSL_SUITE_ID_RSA_WITH_AES_128_CBC_SHA                   0x002F // [RFC5246]
#define SSL_SUITE_ID_DH_DSS_WITH_AES_128_CBC_SHA                0x0030 // [RFC5246]
#define SSL_SUITE_ID_DH_RSA_WITH_AES_128_CBC_SHA                0x0031 // [RFC5246]
#define SSL_SUITE_ID_DHE_DSS_WITH_AES_128_CBC_SHA               0x0032 // [RFC5246]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_128_CBC_SHA               0x0033 // [RFC5246]
#define SSL_SUITE_ID_DH_anon_WITH_AES_128_CBC_SHA               0x0034 // [RFC5246]
#define SSL_SUITE_ID_RSA_WITH_AES_256_CBC_SHA                   0x0035 // [RFC5246]
#define SSL_SUITE_ID_DH_DSS_WITH_AES_256_CBC_SHA                0x0036 // [RFC5246]
#define SSL_SUITE_ID_DH_RSA_WITH_AES_256_CBC_SHA                0x0037 // [RFC5246]
#define SSL_SUITE_ID_DHE_DSS_WITH_AES_256_CBC_SHA               0x0038 // [RFC5246]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_256_CBC_SHA               0x0039 // [RFC5246]
#define SSL_SUITE_ID_DH_anon_WITH_AES_256_CBC_SHA               0x003A // [RFC5246]
#define SSL_SUITE_ID_RSA_WITH_NULL_SHA256                       0x003B // [RFC5246]            weak
#define SSL_SUITE_ID_RSA_WITH_AES_128_CBC_SHA256                0x003C // [RFC5246]
#define SSL_SUITE_ID_RSA_WITH_AES_256_CBC_SHA256                0x003D // [RFC5246]
#define SSL_SUITE_ID_DH_DSS_WITH_AES_128_CBC_SHA256             0x003E // [RFC5246]
#define SSL_SUITE_ID_DH_RSA_WITH_AES_128_CBC_SHA256             0x003F // [RFC5246]
#define SSL_SUITE_ID_DHE_DSS_WITH_AES_128_CBC_SHA256            0x0040 // [RFC5246]
#define SSL_SUITE_ID_RSA_WITH_CAMELLIA_128_CBC_SHA              0x0041 // [RFC5932]
#define SSL_SUITE_ID_DH_DSS_WITH_CAMELLIA_128_CBC_SHA           0x0042 // [RFC5932]
#define SSL_SUITE_ID_DH_RSA_WITH_CAMELLIA_128_CBC_SHA           0x0043 // [RFC5932]
#define SSL_SUITE_ID_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA          0x0044 // [RFC5932]
#define SSL_SUITE_ID_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA          0x0045 // [RFC5932]
#define SSL_SUITE_ID_DH_anon_WITH_CAMELLIA_128_CBC_SHA          0x0046 // [RFC5932]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_128_CBC_SHA256            0x0067 // [RFC5246]
#define SSL_SUITE_ID_DH_DSS_WITH_AES_256_CBC_SHA256             0x0068 // [RFC5246]
#define SSL_SUITE_ID_DH_RSA_WITH_AES_256_CBC_SHA256             0x0069 // [RFC5246]
#define SSL_SUITE_ID_DHE_DSS_WITH_AES_256_CBC_SHA256            0x006A // [RFC5246]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_256_CBC_SHA256            0x006B // [RFC5246]
#define SSL_SUITE_ID_DH_anon_WITH_AES_128_CBC_SHA256            0x006C // [RFC5246]
#define SSL_SUITE_ID_DH_anon_WITH_AES_256_CBC_SHA256            0x006D // [RFC5246]
#define SSL_SUITE_ID_RSA_WITH_CAMELLIA_256_CBC_SHA              0x0084 // [RFC5932]
#define SSL_SUITE_ID_DH_DSS_WITH_CAMELLIA_256_CBC_SHA           0x0085 // [RFC5932]
#define SSL_SUITE_ID_DH_RSA_WITH_CAMELLIA_256_CBC_SHA           0x0086 // [RFC5932]
#define SSL_SUITE_ID_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA          0x0087 // [RFC5932]
#define SSL_SUITE_ID_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA          0x0088 // [RFC5932]
#define SSL_SUITE_ID_DH_anon_WITH_CAMELLIA_256_CBC_SHA          0x0089 // [RFC5932]
#define SSL_SUITE_ID_PSK_WITH_RC4_128_SHA                       0x008A // [RFC4279] [RFC6347]
#define SSL_SUITE_ID_PSK_WITH_3DES_EDE_CBC_SHA                  0x008B // [RFC4279]
#define SSL_SUITE_ID_PSK_WITH_AES_128_CBC_SHA                   0x008C // [RFC4279]
#define SSL_SUITE_ID_PSK_WITH_AES_256_CBC_SHA                   0x008D // [RFC4279]
#define SSL_SUITE_ID_DHE_PSK_WITH_RC4_128_SHA                   0x008E // [RFC4279] [RFC6347]
#define SSL_SUITE_ID_DHE_PSK_WITH_3DES_EDE_CBC_SHA              0x008F // [RFC4279]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_128_CBC_SHA               0x0090 // [RFC4279]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_256_CBC_SHA               0x0091 // [RFC4279]
#define SSL_SUITE_ID_RSA_PSK_WITH_RC4_128_SHA                   0x0092 // [RFC4279] [RFC6347]
#define SSL_SUITE_ID_RSA_PSK_WITH_3DES_EDE_CBC_SHA              0x0093 // [RFC4279]
#define SSL_SUITE_ID_RSA_PSK_WITH_AES_128_CBC_SHA               0x0094 // [RFC4279]
#define SSL_SUITE_ID_RSA_PSK_WITH_AES_256_CBC_SHA               0x0095 // [RFC4279]
#define SSL_SUITE_ID_RSA_WITH_SEED_CBC_SHA                      0x0096 // [RFC4162]
#define SSL_SUITE_ID_DH_DSS_WITH_SEED_CBC_SHA                   0x0097 // [RFC4162]
#define SSL_SUITE_ID_DH_RSA_WITH_SEED_CBC_SHA                   0x0098 // [RFC4162]
#define SSL_SUITE_ID_DHE_DSS_WITH_SEED_CBC_SHA                  0x0099 // [RFC4162]
#define SSL_SUITE_ID_DHE_RSA_WITH_SEED_CBC_SHA                  0x009A // [RFC4162]
#define SSL_SUITE_ID_DH_anon_WITH_SEED_CBC_SHA                  0x009B // [RFC4162]
#define SSL_SUITE_ID_RSA_WITH_AES_128_GCM_SHA256                0x009C // [RFC5288]
#define SSL_SUITE_ID_RSA_WITH_AES_256_GCM_SHA384                0x009D // [RFC5288]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_128_GCM_SHA256            0x009E // [RFC5288]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_256_GCM_SHA384            0x009F // [RFC5288]
#define SSL_SUITE_ID_DH_RSA_WITH_AES_128_GCM_SHA256             0x00A0 // [RFC5288]
#define SSL_SUITE_ID_DH_RSA_WITH_AES_256_GCM_SHA384             0x00A1 // [RFC5288]
#define SSL_SUITE_ID_DHE_DSS_WITH_AES_128_GCM_SHA256            0x00A2 // [RFC5288]
#define SSL_SUITE_ID_DHE_DSS_WITH_AES_256_GCM_SHA384            0x00A3 // [RFC5288]
#define SSL_SUITE_ID_DH_DSS_WITH_AES_128_GCM_SHA256             0x00A4 // [RFC5288]
#define SSL_SUITE_ID_DH_DSS_WITH_AES_256_GCM_SHA384             0x00A5 // [RFC5288]
#define SSL_SUITE_ID_DH_anon_WITH_AES_128_GCM_SHA256            0x00A6 // [RFC5288]
#define SSL_SUITE_ID_DH_anon_WITH_AES_256_GCM_SHA384            0x00A7 // [RFC5288]
#define SSL_SUITE_ID_PSK_WITH_AES_128_GCM_SHA256                0x00A8 // [RFC5487]
#define SSL_SUITE_ID_PSK_WITH_AES_256_GCM_SHA384                0x00A9 // [RFC5487]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_128_GCM_SHA256            0x00AA // [RFC5487]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_256_GCM_SHA384            0x00AB // [RFC5487]
#define SSL_SUITE_ID_RSA_PSK_WITH_AES_128_GCM_SHA256            0x00AC // [RFC5487]
#define SSL_SUITE_ID_RSA_PSK_WITH_AES_256_GCM_SHA384            0x00AD // [RFC5487]
#define SSL_SUITE_ID_PSK_WITH_AES_128_CBC_SHA256                0x00AE // [RFC5487]
#define SSL_SUITE_ID_PSK_WITH_AES_256_CBC_SHA384                0x00AF // [RFC5487]
#define SSL_SUITE_ID_PSK_WITH_NULL_SHA256                       0x00B0 // [RFC5487]            weak
#define SSL_SUITE_ID_PSK_WITH_NULL_SHA384                       0x00B1 // [RFC5487]            weak
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_128_CBC_SHA256            0x00B2 // [RFC5487]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_256_CBC_SHA384            0x00B3 // [RFC5487]
#define SSL_SUITE_ID_DHE_PSK_WITH_NULL_SHA256                   0x00B4 // [RFC5487]            weak
#define SSL_SUITE_ID_DHE_PSK_WITH_NULL_SHA384                   0x00B5 // [RFC5487]            weak
#define SSL_SUITE_ID_RSA_PSK_WITH_AES_128_CBC_SHA256            0x00B6 // [RFC5487]
#define SSL_SUITE_ID_RSA_PSK_WITH_AES_256_CBC_SHA384            0x00B7 // [RFC5487]
#define SSL_SUITE_ID_RSA_PSK_WITH_NULL_SHA256                   0x00B8 // [RFC5487]            weak
#define SSL_SUITE_ID_RSA_PSK_WITH_NULL_SHA384                   0x00B9 // [RFC5487]            weak
#define SSL_SUITE_ID_RSA_WITH_CAMELLIA_128_CBC_SHA256           0x00BA // [RFC5932]
#define SSL_SUITE_ID_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256        0x00BB // [RFC5932]
#define SSL_SUITE_ID_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256        0x00BC // [RFC5932]
#define SSL_SUITE_ID_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256       0x00BD // [RFC5932]
#define SSL_SUITE_ID_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256       0x00BE // [RFC5932]
#define SSL_SUITE_ID_DH_anon_WITH_CAMELLIA_128_CBC_SHA256       0x00BF // [RFC5932]
#define SSL_SUITE_ID_RSA_WITH_CAMELLIA_256_CBC_SHA256           0x00C0 // [RFC5932]
#define SSL_SUITE_ID_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256        0x00C1 // [RFC5932]
#define SSL_SUITE_ID_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256        0x00C2 // [RFC5932]
#define SSL_SUITE_ID_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256       0x00C3 // [RFC5932]
#define SSL_SUITE_ID_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256       0x00C4 // [RFC5932]
#define SSL_SUITE_ID_DH_anon_WITH_CAMELLIA_256_CBC_SHA256       0x00C5 // [RFC5932]
#define SSL_SUITE_ID_EMPTY_RENEGOTIATION_INFO_SCSV              0x00FF // [RFC5746]            this isn't a cipher suite!
#define SSL_SUITE_ID_FALLBACK_SCSV                              0x5600 // [RFC7507]            this isn't a cipher suite!
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_NULL_SHA                   0xC001 // [RFC4492]            weak
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_RC4_128_SHA                0xC002 // [RFC4492] [RFC6347]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA           0xC003 // [RFC4492]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_AES_128_CBC_SHA            0xC004 // [RFC4492]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_AES_256_CBC_SHA            0xC005 // [RFC4492]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_NULL_SHA                  0xC006 // [RFC4492]            weak
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_RC4_128_SHA               0xC007 // [RFC4492] [RFC6347]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA          0xC008 // [RFC4492]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_128_CBC_SHA           0xC009 // [RFC4492]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_256_CBC_SHA           0xC00A // [RFC4492]
#define SSL_SUITE_ID_ECDH_RSA_WITH_NULL_SHA                     0xC00B // [RFC4492]            weak
#define SSL_SUITE_ID_ECDH_RSA_WITH_RC4_128_SHA                  0xC00C // [RFC4492] [RFC6347]
#define SSL_SUITE_ID_ECDH_RSA_WITH_3DES_EDE_CBC_SHA             0xC00D // [RFC4492]
#define SSL_SUITE_ID_ECDH_RSA_WITH_AES_128_CBC_SHA              0xC00E // [RFC4492]
#define SSL_SUITE_ID_ECDH_RSA_WITH_AES_256_CBC_SHA              0xC00F // [RFC4492]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_NULL_SHA                    0xC010 // [RFC4492]            weak
#define SSL_SUITE_ID_ECDHE_RSA_WITH_RC4_128_SHA                 0xC011 // [RFC4492] [RFC6347]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA            0xC012 // [RFC4492]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_AES_128_CBC_SHA             0xC013 // [RFC4492]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_AES_256_CBC_SHA             0xC014 // [RFC4492]
#define SSL_SUITE_ID_ECDH_anon_WITH_NULL_SHA                    0xC015 // [RFC4492]
#define SSL_SUITE_ID_ECDH_anon_WITH_RC4_128_SHA                 0xC016 // [RFC4492] [RFC6347]
#define SSL_SUITE_ID_ECDH_anon_WITH_3DES_EDE_CBC_SHA            0xC017 // [RFC4492]
#define SSL_SUITE_ID_ECDH_anon_WITH_AES_128_CBC_SHA             0xC018 // [RFC4492]
#define SSL_SUITE_ID_ECDH_anon_WITH_AES_256_CBC_SHA             0xC019 // [RFC4492]
#define SSL_SUITE_ID_SRP_SHA_WITH_3DES_EDE_CBC_SHA              0xC01A // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA          0xC01B // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA          0xC01C // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_WITH_AES_128_CBC_SHA               0xC01D // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_RSA_WITH_AES_128_CBC_SHA           0xC01E // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_DSS_WITH_AES_128_CBC_SHA           0xC01F // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_WITH_AES_256_CBC_SHA               0xC020 // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_RSA_WITH_AES_256_CBC_SHA           0xC021 // [RFC5054]
#define SSL_SUITE_ID_SRP_SHA_DSS_WITH_AES_256_CBC_SHA           0xC022 // [RFC5054]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256        0xC023 // [RFC5289]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384        0xC024 // [RFC5289]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_AES_128_CBC_SHA256         0xC025 // [RFC5289]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_AES_256_CBC_SHA384         0xC026 // [RFC5289]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_AES_128_CBC_SHA256          0xC027 // [RFC5289]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_AES_256_CBC_SHA384          0xC028 // [RFC5289]
#define SSL_SUITE_ID_ECDH_RSA_WITH_AES_128_CBC_SHA256           0xC029 // [RFC5289]
#define SSL_SUITE_ID_ECDH_RSA_WITH_AES_256_CBC_SHA384           0xC02A // [RFC5289]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256        0xC02B // [RFC5289]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384        0xC02C // [RFC5289]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_AES_128_GCM_SHA256         0xC02D // [RFC5289]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_AES_256_GCM_SHA384         0xC02E // [RFC5289]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_AES_128_GCM_SHA256          0xC02F // [RFC5289]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_AES_256_GCM_SHA384          0xC030 // [RFC5289]
#define SSL_SUITE_ID_ECDH_RSA_WITH_AES_128_GCM_SHA256           0xC031 // [RFC5289]
#define SSL_SUITE_ID_ECDH_RSA_WITH_AES_256_GCM_SHA384           0xC032 // [RFC5289]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_RC4_128_SHA                 0xC033 // [RFC5489] [RFC6347]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA            0xC034 // [RFC5489]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_AES_128_CBC_SHA             0xC035 // [RFC5489]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_AES_256_CBC_SHA             0xC036 // [RFC5489]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_AES_128_CBC_SHA256          0xC037 // [RFC5489]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_AES_256_CBC_SHA384          0xC038 // [RFC5489]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_NULL_SHA                    0xC039 // [RFC5489]            weak
#define SSL_SUITE_ID_ECDHE_PSK_WITH_NULL_SHA256                 0xC03A // [RFC5489]            weak
#define SSL_SUITE_ID_ECDHE_PSK_WITH_NULL_SHA384                 0xC03B // [RFC5489]            weak
#define SSL_SUITE_ID_RSA_WITH_ARIA_128_CBC_SHA256               0xC03C // [RFC6209]
#define SSL_SUITE_ID_RSA_WITH_ARIA_256_CBC_SHA384               0xC03D // [RFC6209]
#define SSL_SUITE_ID_DH_DSS_WITH_ARIA_128_CBC_SHA256            0xC03E // [RFC6209]
#define SSL_SUITE_ID_DH_DSS_WITH_ARIA_256_CBC_SHA384            0xC03F // [RFC6209]
#define SSL_SUITE_ID_DH_RSA_WITH_ARIA_128_CBC_SHA256            0xC040 // [RFC6209]
#define SSL_SUITE_ID_DH_RSA_WITH_ARIA_256_CBC_SHA384            0xC041 // [RFC6209]
#define SSL_SUITE_ID_DHE_DSS_WITH_ARIA_128_CBC_SHA256           0xC042 // [RFC6209]
#define SSL_SUITE_ID_DHE_DSS_WITH_ARIA_256_CBC_SHA384           0xC043 // [RFC6209]
#define SSL_SUITE_ID_DHE_RSA_WITH_ARIA_128_CBC_SHA256           0xC044 // [RFC6209]
#define SSL_SUITE_ID_DHE_RSA_WITH_ARIA_256_CBC_SHA384           0xC045 // [RFC6209]
#define SSL_SUITE_ID_DH_anon_WITH_ARIA_128_CBC_SHA256           0xC046 // [RFC6209]
#define SSL_SUITE_ID_DH_anon_WITH_ARIA_256_CBC_SHA384           0xC047 // [RFC6209]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256       0xC048 // [RFC6209]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384       0xC049 // [RFC6209]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256        0xC04A // [RFC6209]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384        0xC04B // [RFC6209]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256         0xC04C // [RFC6209]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384         0xC04D // [RFC6209]
#define SSL_SUITE_ID_ECDH_RSA_WITH_ARIA_128_CBC_SHA256          0xC04E // [RFC6209]
#define SSL_SUITE_ID_ECDH_RSA_WITH_ARIA_256_CBC_SHA384          0xC04F // [RFC6209]
#define SSL_SUITE_ID_RSA_WITH_ARIA_128_GCM_SHA256               0xC050 // [RFC6209]
#define SSL_SUITE_ID_RSA_WITH_ARIA_256_GCM_SHA384               0xC051 // [RFC6209]
#define SSL_SUITE_ID_DHE_RSA_WITH_ARIA_128_GCM_SHA256           0xC052 // [RFC6209]
#define SSL_SUITE_ID_DHE_RSA_WITH_ARIA_256_GCM_SHA384           0xC053 // [RFC6209]
#define SSL_SUITE_ID_DH_RSA_WITH_ARIA_128_GCM_SHA256            0xC054 // [RFC6209]
#define SSL_SUITE_ID_DH_RSA_WITH_ARIA_256_GCM_SHA384            0xC055 // [RFC6209]
#define SSL_SUITE_ID_DHE_DSS_WITH_ARIA_128_GCM_SHA256           0xC056 // [RFC6209]
#define SSL_SUITE_ID_DHE_DSS_WITH_ARIA_256_GCM_SHA384           0xC057 // [RFC6209]
#define SSL_SUITE_ID_DH_DSS_WITH_ARIA_128_GCM_SHA256            0xC058 // [RFC6209]
#define SSL_SUITE_ID_DH_DSS_WITH_ARIA_256_GCM_SHA384            0xC059 // [RFC6209]
#define SSL_SUITE_ID_DH_anon_WITH_ARIA_128_GCM_SHA256           0xC05A // [RFC6209]
#define SSL_SUITE_ID_DH_anon_WITH_ARIA_256_GCM_SHA384           0xC05B // [RFC6209]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256       0xC05C // [RFC6209]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384       0xC05D // [RFC6209]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256        0xC05E // [RFC6209]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384        0xC05F // [RFC6209]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256         0xC060 // [RFC6209]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384         0xC061 // [RFC6209]
#define SSL_SUITE_ID_ECDH_RSA_WITH_ARIA_128_GCM_SHA256          0xC062 // [RFC6209]
#define SSL_SUITE_ID_ECDH_RSA_WITH_ARIA_256_GCM_SHA384          0xC063 // [RFC6209]
#define SSL_SUITE_ID_PSK_WITH_ARIA_128_CBC_SHA256               0xC064 // [RFC6209]
#define SSL_SUITE_ID_PSK_WITH_ARIA_256_CBC_SHA384               0xC065 // [RFC6209]
#define SSL_SUITE_ID_DHE_PSK_WITH_ARIA_128_CBC_SHA256           0xC066 // [RFC6209]
#define SSL_SUITE_ID_DHE_PSK_WITH_ARIA_256_CBC_SHA384           0xC067 // [RFC6209]
#define SSL_SUITE_ID_RSA_PSK_WITH_ARIA_128_CBC_SHA256           0xC068 // [RFC6209]
#define SSL_SUITE_ID_RSA_PSK_WITH_ARIA_256_CBC_SHA384           0xC069 // [RFC6209]
#define SSL_SUITE_ID_PSK_WITH_ARIA_128_GCM_SHA256               0xC06A // [RFC6209]
#define SSL_SUITE_ID_PSK_WITH_ARIA_256_GCM_SHA384               0xC06B // [RFC6209]
#define SSL_SUITE_ID_DHE_PSK_WITH_ARIA_128_GCM_SHA256           0xC06C // [RFC6209]
#define SSL_SUITE_ID_DHE_PSK_WITH_ARIA_256_GCM_SHA384           0xC06D // [RFC6209]
#define SSL_SUITE_ID_RSA_PSK_WITH_ARIA_128_GCM_SHA256           0xC06E // [RFC6209]
#define SSL_SUITE_ID_RSA_PSK_WITH_ARIA_256_GCM_SHA384           0xC06F // [RFC6209]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256         0xC070 // [RFC6209]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384         0xC071 // [RFC6209]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256   0xC072 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384   0xC073 // [RFC6367]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256    0xC074 // [RFC6367]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384    0xC075 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256     0xC076 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384     0xC077 // [RFC6367]
#define SSL_SUITE_ID_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256      0xC078 // [RFC6367]
#define SSL_SUITE_ID_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384      0xC079 // [RFC6367]
#define SSL_SUITE_ID_RSA_WITH_CAMELLIA_128_GCM_SHA256           0xC07A // [RFC6367]
#define SSL_SUITE_ID_RSA_WITH_CAMELLIA_256_GCM_SHA384           0xC07B // [RFC6367]
#define SSL_SUITE_ID_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256       0xC07C // [RFC6367]
#define SSL_SUITE_ID_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384       0xC07D // [RFC6367]
#define SSL_SUITE_ID_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256        0xC07E // [RFC6367]
#define SSL_SUITE_ID_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384        0xC07F // [RFC6367]
#define SSL_SUITE_ID_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256       0xC080 // [RFC6367]
#define SSL_SUITE_ID_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384       0xC081 // [RFC6367]
#define SSL_SUITE_ID_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256        0xC082 // [RFC6367]
#define SSL_SUITE_ID_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384        0xC083 // [RFC6367]
#define SSL_SUITE_ID_DH_anon_WITH_CAMELLIA_128_GCM_SHA256       0xC084 // [RFC6367]
#define SSL_SUITE_ID_DH_anon_WITH_CAMELLIA_256_GCM_SHA384       0xC085 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256   0xC086 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384   0xC087 // [RFC6367]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256    0xC088 // [RFC6367]
#define SSL_SUITE_ID_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384    0xC089 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256     0xC08A // [RFC6367]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384     0xC08B // [RFC6367]
#define SSL_SUITE_ID_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256      0xC08C // [RFC6367]
#define SSL_SUITE_ID_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384      0xC08D // [RFC6367]
#define SSL_SUITE_ID_PSK_WITH_CAMELLIA_128_GCM_SHA256           0xC08E // [RFC6367]
#define SSL_SUITE_ID_PSK_WITH_CAMELLIA_256_GCM_SHA384           0xC08F // [RFC6367]
#define SSL_SUITE_ID_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256       0xC090 // [RFC6367]
#define SSL_SUITE_ID_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384       0xC091 // [RFC6367]
#define SSL_SUITE_ID_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256       0xC092 // [RFC6367]
#define SSL_SUITE_ID_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384       0xC093 // [RFC6367]
#define SSL_SUITE_ID_PSK_WITH_CAMELLIA_128_CBC_SHA256           0xC094 // [RFC6367]
#define SSL_SUITE_ID_PSK_WITH_CAMELLIA_256_CBC_SHA384           0xC095 // [RFC6367]
#define SSL_SUITE_ID_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256       0xC096 // [RFC6367]
#define SSL_SUITE_ID_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384       0xC097 // [RFC6367]
#define SSL_SUITE_ID_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256       0xC098 // [RFC6367]
#define SSL_SUITE_ID_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384       0xC099 // [RFC6367]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256     0xC09A // [RFC6367]
#define SSL_SUITE_ID_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384     0xC09B // [RFC6367]
#define SSL_SUITE_ID_RSA_WITH_AES_128_CCM                       0xC09C // [RFC6655]
#define SSL_SUITE_ID_RSA_WITH_AES_256_CCM                       0xC09D // [RFC6655]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_128_CCM                   0xC09E // [RFC6655]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_256_CCM                   0xC09F // [RFC6655]
#define SSL_SUITE_ID_RSA_WITH_AES_128_CCM_8                     0xC0A0 // [RFC6655]
#define SSL_SUITE_ID_RSA_WITH_AES_256_CCM_8                     0xC0A1 // [RFC6655]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_128_CCM_8                 0xC0A2 // [RFC6655]
#define SSL_SUITE_ID_DHE_RSA_WITH_AES_256_CCM_8                 0xC0A3 // [RFC6655]
#define SSL_SUITE_ID_PSK_WITH_AES_128_CCM                       0xC0A4 // [RFC6655]
#define SSL_SUITE_ID_PSK_WITH_AES_256_CCM                       0xC0A5 // [RFC6655]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_128_CCM                   0xC0A6 // [RFC6655]
#define SSL_SUITE_ID_DHE_PSK_WITH_AES_256_CCM                   0xC0A7 // [RFC6655]
#define SSL_SUITE_ID_PSK_WITH_AES_128_CCM_8                     0xC0A8 // [RFC6655]
#define SSL_SUITE_ID_PSK_WITH_AES_256_CCM_8                     0xC0A9 // [RFC6655]
#define SSL_SUITE_ID_PSK_DHE_WITH_AES_128_CCM_8                 0xC0AA // [RFC6655]
#define SSL_SUITE_ID_PSK_DHE_WITH_AES_256_CCM_8                 0xC0AB // [RFC6655]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_128_CCM               0xC0AC // [RFC7251]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_256_CCM               0xC0AD // [RFC7251]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_128_CCM_8             0xC0AE // [RFC7251]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_AES_256_CCM_8             0xC0AF // [RFC7251]
#define SSL_SUITE_ID_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256    0xCCA8 // [RFC7905]
#define SSL_SUITE_ID_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256  0xCCA9 // [RFC7905]
#define SSL_SUITE_ID_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256      0xCCAA // [RFC7905]

/*********************************************************************
*
*       Session flags
*
*  Description
*    Flags set by the user or by emSSL.
*/
#define SSL_SESSION_FLAG_REQUEST_CERTIFICATE                  0x0001  // Set by user:  emSSL Server must request a client certificate for mutual authentication.
#define SSL_SESSION_FLAG_CERTIFICATE_RECEIVED                 0x0002  // Set by emSSL: Client provided a valid certificate to emSSL server.
#define SSL_SESSION_FLAG_CERTIFICATE_REQUEST_RECEIVED         0x0004  // Set by emSSL: Server requested certificate, if we have one.
#define SSL_SESSION_FLAG_CERTIFICATE_SENT                     0x0008  // Set by emSSL: Client sent a valid certificate as we have one.
#define SSL_SESSION_FLAG_REQUEST_RESUME_SESSION_ID            0x0010  // Set by emSSL: Indicates session resumption is requested by session ID.
#define SSL_SESSION_FLAG_REQUEST_RESUME_SESSION_TICKET        0x0020  // Set by emSSL: Indicates session resumption is requested by session ticket.
#define SSL_SESSION_FLAG_REQUEST_RESUME_CRITICAL              0x0040  // Set by user:  If session resumption is requested, it is critical that a session is resumed (no new session offered).  If not, fail.
#define SSL_SESSION_FLAG_RESUME_GRANTED                       0x0080  // Set by emSSL: After connection completes, indicates that a session is successfully resumed.
#define SSL_SESSION_FLAG_DISABLE_SESSION_TICKET               0x0100  // Set by user:  Do not use session ticket even if configured.
#define SSL_SESSION_FLAG_SESSION_TICKET_EXPECTED              0x0200  // Set by emSSL: The client knows the server supports session tickets.
#define SSL_SESSION_FLAG_SESSION_TICKET_EXTENSION_ADVERTISED  0x0400  // Set by emSSL: The server indicates its willingness to issue session tickets.
#define SSL_SESSION_FLAG_SESSION_TICKET_RECEIVED              0x0800  // Set by emSSL: The client has received a session ticket.
#define SSL_SESSION_FLAG_DISABLE_RSA_PMS_VERSION_CHECK        0x1000  // Set by user:  Disable TLS 1.0 version check [TLS1v2 https://tools.ietf.org/html/rfc5246#section-7.4.7.1].
#define SSL_SESSION_FLAG_REQUEST_PREVENT_FALLBACK             0x2000  // Set by user:  Request Fallback SCSV signaling cipher suite [RFC7507 https://tools.ietf.org/html/rfc7507].
#define SSL_SESSION_FLAG_PREFER_SERVER_ORDER                  0x4000  // Set by user:  Prefer the server's cipher suite order to the client's preferred order.
#define SSL_SESSION_FLAG_REQUIRE_STRICT_TLS_CLOSE             0x8000  // Set by user:  Require a TLS close-notify from peer to close the session.

/*********************************************************************
*
*       Public data types
*
**********************************************************************
*/

/*********************************************************************
*
*       Errors generated by TLS
*/
typedef enum {
  SSL_ERROR_NONE                              =    0,
  SSL_ERROR_EOF                               =   -1,
  SSL_ERROR_ASSERT_FAILED                     =   -2,
  SSL_ERROR_BUFFER_TOO_SMALL                  = -105,
  SSL_ERROR_INVALID_PUBLIC_KEY                = -108,
  SSL_ERROR_BAD_MAC                           = -110,
  SSL_ERROR_BAD_PADDING                       = -111,
  SSL_ERROR_DECRYPTION_ERROR                  = -112,
  SSL_ERROR_INTERNAL_ERROR                    = -113,
  SSL_ERROR_UNEXPECTED_MESSAGE                = -116,
  SSL_ERROR_BAD_PUBLIC_KEY_ALGORITHM          = -119,
  SSL_ERROR_BAD_SIGNATURE_LENGTH              = -120,
  SSL_ERROR_BAD_HASH_ALGORITHM                = -121,
  SSL_ERROR_INCONSISTENT_SIGNATURE_LENGTHS    = -122,
  SSL_ERROR_SIGNATURE_UNWRAP_ERROR            = -123,
  SSL_ERROR_SIGNATURE_REJECTED                = -124,
  SSL_ERROR_BAD_NAMED_CURVE                   = -125,
  SSL_ERROR_BAD_CURVE_TYPE                    = -126,
  SSL_ERROR_BAD_POINT_TYPE                    = -127,
  SSL_ERROR_BAD_PUBLIC_KEY                    = -128,
  SSL_ERROR_RUNT_MESSAGE                      = -129,
  SSL_ERROR_PROTOCOL_MISMATCH                 = -130,
  SSL_ERROR_VERIFICATION_DATA_MISMATCH        = -132,
  SSL_ERROR_MESSAGE_LENGTH_ERROR              = -133,
  SSL_ERROR_BAD_KEY_EXCHANGE_METHOD           = -134,
  SSL_ERROR_SOCKET_ERROR                      = -135,
  SSL_ERROR_OUT_OF_MEMORY                     = -136,
  SSL_ERROR_MEMORY_ALLOCATION_ERROR           = -137,
  SSL_ERROR_CONNECT_FAILED                    = -138,
  SSL_ERROR_UNKNOWN_PK_ALGORITHM              = -139,
  SSL_ERROR_NOT_IMPLEMENTED                   = -140,
  SSL_ERROR_ENCRYPTION_ERROR                  = -141,
  SSL_ERROR_UNSUPPORTED_CIPHER_SUITE          = -142,
  SSL_ERROR_SESSION_RESUMPTION_DENIED         = -143,
  SSL_ERROR_BAD_CONFIGURATION                 = -144,
  SSL_ERROR_PROTOCOL_ERROR                    = -145,
  SSL_ERROR_CERTIFICATE_UNKNOWN               = -146,

  // Alerts from peer, converted to error indicators
  SSL_ERROR_RECEIVED_CLOSE_NOTIFY             = -200 - (int)SSL_ALERT_CLOSE_NOTIFY,
  SSL_ERROR_RECEIVED_UNEXPECTED_MESSAGE       = -200 - (int)SSL_ALERT_UNEXPECTED_MESSAGE,
  SSL_ERROR_RECEIVED_BAD_RECORD_MAC           = -200 - (int)SSL_ALERT_BAD_MESSAGE_MAC,
  SSL_ERROR_RECEIVED_DECRYPTION_FAILED        = -200 - (int)SSL_ALERT_DECRYPTION_FAILED,
  SSL_ERROR_RECEIVED_RECORD_OVERFLOW          = -200 - (int)SSL_ALERT_RECORD_OVERFLOW,
  SSL_ERROR_RECEIVED_DECOMPRESSION_FAILURE    = -200 - (int)SSL_ALERT_DECOMPRESSION_FAILURE,
  SSL_ERROR_RECEIVED_HANDSHAKE_FAILURE        = -200 - (int)SSL_ALERT_HANDSHAKE_FAILURE,
  SSL_ERROR_RECEIVED_BAD_CERTIFICATE          = -200 - (int)SSL_ALERT_BAD_CERTIFICATE,
  SSL_ERROR_RECEIVED_UNSUPPORTED_CERTIFICATE  = -200 - (int)SSL_ALERT_UNSUPPORTED_CERTIFICATE,
  SSL_ERROR_RECEIVED_CERTIFICATE_REVOKED      = -200 - (int)SSL_ALERT_CERTIFICATE_REVOKED,
  SSL_ERROR_RECEIVED_CERTIFICATE_EXPIRED      = -200 - (int)SSL_ALERT_CERTIFICATE_EXPIRED,
  SSL_ERROR_RECEIVED_CERTIFICATE_UNKNOWN      = -200 - (int)SSL_ALERT_CERTIFICATE_UNKNOWN,
  SSL_ERROR_RECEIVED_ILLEGAL_PARAMETER        = -200 - (int)SSL_ALERT_ILLEGAL_PARAMETER,
  SSL_ERROR_RECEIVED_UNKNOWN_CA               = -200 - (int)SSL_ALERT_UNKNOWN_CA,
  SSL_ERROR_RECEIVED_ACCESS_DENIED            = -200 - (int)SSL_ALERT_ACCESS_DENIED,
  SSL_ERROR_RECEIVED_DECODE_ERROR             = -200 - (int)SSL_ALERT_DECODE_ERROR,
  SSL_ERROR_RECEIVED_DECRYPT_ERROR            = -200 - (int)SSL_ALERT_DECRYPT_ERROR,
  SSL_ERROR_RECEIVED_EXPORT_RESTRICTION       = -200 - (int)SSL_ALERT_EXPORT_RESTRICTION,
  SSL_ERROR_RECEIVED_PROTOCOL_VERSION         = -200 - (int)SSL_ALERT_PROTOCOL_VERSION,
  SSL_ERROR_RECEIVED_INSUFFICIENT_SECURITY    = -200 - (int)SSL_ALERT_INSUFFICIENT_SECURITY,
  SSL_ERROR_RECEIVED_INTERNAL_ERROR           = -200 - (int)SSL_ALERT_INTERNAL_ERROR,
  SSL_ERROR_RECEIVED_INAPPROPRIATE_FALLBACK   = -200 - (int)SSL_ALERT_INAPPROPRIATE_FALLBACK,
  SSL_ERROR_RECEIVED_USER_CANCELED            = -200 - (int)SSL_ALERT_USER_CANCELED,
  SSL_ERROR_RECEIVED_NO_RENEGOTIATION         = -200 - (int)SSL_ALERT_NO_RENEGOTIATION
} SSL_ERROR;

/*********************************************************************
*
*       Socket / Transport API
*/
typedef struct SSL_TRANSPORT_API_tag {
  int (*pfSend)    (int Socket, const char *pData, int Len, int Flags);   // Send 8-bit clean data to transport
  int (*pfReceive) (int Socket,       char *pData, int Len, int Flags);   // Receive 8-bit clean data from transport
  U32 (*pfGetTime) (void);                                                // Get seconds elapsed since 01/01/70.
} SSL_TRANSPORT_API;

/*********************************************************************
*
*       Certificate processing API.
*/
typedef int  SSL_CERTIFICATE_API_VERIFY_CERT_FUNC     (SSL_SESSION *pSession, CRYPTO_TLV *pTLV, CRYPTO_X509_CERTIFICATE_DATA *pCertificate);
typedef int  SSL_CERTIFICATE_API_GET_CERT_FUNC        (SSL_SESSION *pSession, unsigned Index, const U8 **ppData, unsigned *pDataLen);
typedef int  SSL_CERTIFICATE_API_GET_PRIVATE_KEY_FUNC (SSL_SESSION *pSession, const U8 **ppKey, unsigned *pKeyLen);
typedef void SSL_CERTIFICATE_API_TRACE_CERT_FUNC      (SSL_SESSION *pSession, CRYPTO_X509_CERTIFICATE_DATA *pCertificate, unsigned Count);

typedef struct SSL_CERITIFCATE_API_tag {
  SSL_CERTIFICATE_API_VERIFY_CERT_FUNC     * pfVerifyCertificate;  // Verify certificate acceptability
  SSL_CERTIFICATE_API_GET_CERT_FUNC        * pfGetCertificate;     // Deliver DER-encoded certificate
  SSL_CERTIFICATE_API_GET_PRIVATE_KEY_FUNC * pfGetPrivateKey;      // Deliver corresponding private key
  SSL_CERTIFICATE_API_TRACE_CERT_FUNC      * pfTraceCertificate;   // Trace certificate data in certificate chain
} SSL_CERTIFICATE_API;

#define SSL_CERITIFCATE_API SSL_CERTIFICATE_API  // Fix spelling error in previous APIs.  Duh.

/*********************************************************************
*
*       Root certificate.
*/
typedef struct {
  const U8 *pCertDER;    unsigned CertDERLen;
  const U8 *pSubjectDN;  unsigned SubjectDNLen;
  const U8 *pIssuerDN;   unsigned IssuerDNLen;
  const U8 *pSubjectCN;  unsigned SubjectCNLen;
//   const U8 *pIssuerCN;   unsigned IssuerCNLen;
} SSL_ROOT_CERTIFICATE_DATA;

typedef struct SSL_ROOT_CERTIFICATE_tag SSL_ROOT_CERTIFICATE;
struct SSL_ROOT_CERTIFICATE_tag {
  const SSL_ROOT_CERTIFICATE_DATA * pData;
  SSL_ROOT_CERTIFICATE            * pNext;
};

/*********************************************************************
*
*       Public const data
*
**********************************************************************
*/

/*********************************************************************
*
*       Implemented cipher suites
*/

// ECDHE-ECDSA
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_NULL_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_RC4_128_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_128_CCM;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_256_CCM;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_128_CCM_8;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_AES_256_CCM_8;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256;

// ECDHE-RSA
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_NULL_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_RC4_128_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_AES_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_AES_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256;

// ECDH-RSA
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_NULL_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_RC4_128_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_3DES_EDE_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_AES_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_AES_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_AES_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_AES_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_AES_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_AES_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_ARIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_ARIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_ARIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_ARIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384;

// ECDH-ECDSA
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_NULL_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_RC4_128_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;

// DHE-RSA
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_3DES_EDE_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_SEED_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_256_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_128_CCM;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_256_CCM;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_128_CCM_8;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_AES_256_CCM_8;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_ARIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_ARIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_ARIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_ARIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256;

// RSA
extern const SSL_SUITE SSL_SUITE_RSA_WITH_NULL_MD5;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_NULL_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_NULL_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_RC4_128_MD5;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_RC4_128_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_3DES_EDE_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_SEED_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_256_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_128_CCM;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_256_CCM;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_128_CCM_8;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_AES_256_CCM_8;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_ARIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_ARIA_256_CBC_SHA384;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_ARIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_ARIA_256_GCM_SHA384;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_CAMELLIA_128_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_CAMELLIA_256_CBC_SHA;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_CAMELLIA_256_CBC_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
extern const SSL_SUITE SSL_SUITE_RSA_WITH_CAMELLIA_256_GCM_SHA384;

// For debugging
extern const SSL_SUITE SSL_SUITE_NULL_WITH_NULL_NULL;

/*********************************************************************
*
*       Implemented ciphers
*/
extern const SSL_CIPHER_API SSL_CIPHER_AES_128_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_256_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_128_GCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_256_GCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_128_CCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_256_CCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_128_CCM_8_API;
extern const SSL_CIPHER_API SSL_CIPHER_AES_256_CCM_8_API;
extern const SSL_CIPHER_API SSL_CIPHER_ARIA_128_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_ARIA_256_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_ARIA_128_GCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_ARIA_256_GCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_CAMELLIA_128_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_CAMELLIA_256_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_CAMELLIA_128_GCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_CAMELLIA_256_GCM_API;
extern const SSL_CIPHER_API SSL_CIPHER_SEED_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_3DES_EDE_CBC_API;
extern const SSL_CIPHER_API SSL_CIPHER_RC4_128_API;
extern const SSL_CIPHER_API SSL_CIPHER_CHACHA20_POLY1305_API;

/*********************************************************************
*
*       Implemented MAC and HMACs
*/
extern const SSL_MAC_API SSL_MAC_MD5_API;
extern const SSL_MAC_API SSL_MAC_SHA_API;
extern const SSL_MAC_API SSL_MAC_SHA224_API;
extern const SSL_MAC_API SSL_MAC_SHA256_API;
extern const SSL_MAC_API SSL_MAC_SHA384_API;
extern const SSL_MAC_API SSL_MAC_SHA512_API;

/*********************************************************************
*
*       Implemented signature verification algorithms
*/
extern const SSL_SIGNATURE_VERIFY_API SSL_SIGNATURE_VERIFY_RSA_API;
extern const SSL_SIGNATURE_VERIFY_API SSL_SIGNATURE_VERIFY_DSA_API;
extern const SSL_SIGNATURE_VERIFY_API SSL_SIGNATURE_VERIFY_ECDSA_API;

/*********************************************************************
*
*       Implemented signature signing algorithms
*/
extern const SSL_SIGNATURE_SIGN_API SSL_SIGNATURE_SIGN_RSA_API;
extern const SSL_SIGNATURE_SIGN_API SSL_SIGNATURE_SIGN_ECDSA_API;

/*********************************************************************
*
*       TLS protocols
*/
extern const SSL_PROTOCOL_API SSL_PROTOCOL_TLS1v0_API;
extern const SSL_PROTOCOL_API SSL_PROTOCOL_TLS1v1_API;
extern const SSL_PROTOCOL_API SSL_PROTOCOL_TLS1v2_API;

/*********************************************************************
*
*       NIST prime curves.
*/
extern const SSL_CURVE SSL_CURVE_secp192r1;
extern const SSL_CURVE SSL_CURVE_secp224r1;
extern const SSL_CURVE SSL_CURVE_secp256r1;
extern const SSL_CURVE SSL_CURVE_secp384r1;
extern const SSL_CURVE SSL_CURVE_secp521r1;

/*********************************************************************
*
*       SEC Koblitz curves.
*/
extern const SSL_CURVE SSL_CURVE_secp192k1;
extern const SSL_CURVE SSL_CURVE_secp224k1;
extern const SSL_CURVE SSL_CURVE_secp256k1;

/*********************************************************************
*
*       Brainpool curves.
*/
extern const SSL_CURVE SSL_CURVE_brainpoolP256r1;
extern const SSL_CURVE SSL_CURVE_brainpoolP384r1;
extern const SSL_CURVE SSL_CURVE_brainpoolP512r1;

/*********************************************************************
*
*       Curve25519
*/
extern const SSL_CURVE SSL_CURVE_Curve25519;

/*********************************************************************
*
*       Transition period.  We only offer optimized curves, so
*       drop the "optimized" which makes ECDSA keys easier to use.
*/
#define SSL_CURVE_P192           SSL_CURVE_secp192r1
#define SSL_CURVE_P224           SSL_CURVE_secp224r1
#define SSL_CURVE_P256           SSL_CURVE_secp256r1
#define SSL_CURVE_P384           SSL_CURVE_secp384r1
#define SSL_CURVE_P521           SSL_CURVE_secp521r1

/*********************************************************************
*
*       Transition period.
*/
#define SSL_CURVE_P192_Optimized SSL_CURVE_P192
#define SSL_CURVE_P224_Optimized SSL_CURVE_P224
#define SSL_CURVE_P256_Optimized SSL_CURVE_P256
#define SSL_CURVE_P384_Optimized SSL_CURVE_P384
#define SSL_CURVE_P521_Optimized SSL_CURVE_P521

/*********************************************************************
*
*       Public functions
*
**********************************************************************
*/

/*********************************************************************
*
*       SSL/TLS management functions
*/
void              SSL_Init                      (void);
void              SSL_Exit                      (void);
void              SSL_SetDefaultCertificateAPI  (const SSL_CERTIFICATE_API *pAPI);
void              SSL_X_Config                  (void);     // Provided by user

/*********************************************************************
*
*       Session configuration functions
*/
void              SSL_SESSION_Prepare           (SSL_SESSION *pSelf, int Socket, const SSL_TRANSPORT_API *pAPI);
void              SSL_SESSION_SetProtocolRange  (SSL_SESSION *pSelf, U16 MinVersion, U16 MaxVersion);

/*********************************************************************
*
*       Session management functions
*/
int               SSL_SESSION_Connect           (SSL_SESSION *pSelf, const char *sServerName);
int               SSL_SESSION_Accept            (SSL_SESSION *pSelf);
void              SSL_SESSION_Disconnect        (SSL_SESSION *pSelf);
void              SSL_SESSION_SetAllowedSuites  (SSL_SESSION *pSelf, const U16 *paSuites, unsigned SuiteCnt);
void              SSL_SESSION_SetCertificateAPI (SSL_SESSION *pSelf, const SSL_CERTIFICATE_API *pAPI);
void              SSL_SESSION_SetFlags          (SSL_SESSION *pSelf, unsigned Flags);
void              SSL_SESSION_ClrFlags          (SSL_SESSION *pSelf, unsigned Flags);
unsigned          SSL_SESSION_QueryFlags        (SSL_SESSION *pSelf);
const SSL_SUITE * SSL_SESSION_GetSuite          (SSL_SESSION *pSelf);
void              SSL_SESSION_GetResumeParas    (SSL_SESSION *pSelf, SSL_SESSION_RESUME_PARAS *pParas);
void              SSL_SESSION_SetResumeParas    (SSL_SESSION *pSelf, const SSL_SESSION_RESUME_PARAS *pParas);
U16               SSL_SESSION_GetProtocol       (SSL_SESSION *pSelf);

/*********************************************************************
*
*       Application data I/O functions
*/
int               SSL_SESSION_Send              (SSL_SESSION *pSelf, const void *pData, unsigned DataLen);
int               SSL_SESSION_Receive           (SSL_SESSION *pSelf,       void *pData, unsigned DataLen);
int               SSL_SESSION_SendStr           (SSL_SESSION *pSelf, const char *sText);

/*********************************************************************
*
*       Plug-in cipher suites.
*/
void              SSL_SUITE_Add                 (const SSL_SUITE *pSuite);
int               SSL_SUITE_QueryRequiresECC    (const SSL_SUITE *pSuite);
int               SSL_SUITE_QueryRequiresPSK    (const SSL_SUITE *pSuite);
int               SSL_SUITE_QueryValidity       (const SSL_SUITE *pSuite, unsigned Version);
int               SSL_SUITE_QueryNull           (const SSL_SUITE *pSuite);
int               SSL_SUITE_GetID               (const SSL_SUITE *pSuite);
void              SSL_SUITE_CopyName            (char *pText, const SSL_SUITE *pSuite);
const char      * SSL_SUITE_GetIANASuiteName    (unsigned ID);
const SSL_SUITE * SSL_SUITE_FindByID            (unsigned ID);
const SSL_SUITE * SSL_SUITE_FindByIndex         (unsigned Index);

/*********************************************************************
*
*       Configuration.
*/
void              SSL_MAC_Add                   (const SSL_MAC_API *pAPI);
void              SSL_CIPHER_Add                (const SSL_CIPHER_API *pAPI);
void              SSL_CURVE_Add                 (const SSL_CURVE *pCurve);
void              SSL_CURVE_Remove              (const SSL_CURVE *pCurve);
void              SSL_SIGNATURE_VERIFY_Add      (const SSL_SIGNATURE_VERIFY_API *pAPI);
void              SSL_SIGNATURE_SIGN_Add        (const SSL_SIGNATURE_SIGN_API *pAPI);
void              SSL_SIGNATURE_ALGORITHM_Add   (unsigned ID);
void              SSL_ROOT_CERTIFICATE_Add      (SSL_ROOT_CERTIFICATE *pCert);
void              SSL_PROTOCOL_Add              (const SSL_PROTOCOL_API *pAPI);
void              SSL_CLIENT_ConfigMutualAuth   (void);
void              SSL_SERVER_ConfigMutualAuth   (void);

/*********************************************************************
*
*       Decoding parameters.
*/
const char *      SSL_PROTOCOL_GetText          (U16 Protocol);
const char *      SSL_CURVE_GetName             (unsigned ID);

/*********************************************************************
*
*       TLS memory architecture.
*/
void              SSL_MEM_Add                   (void *pStore, unsigned NumBytesStore);
void              SSL_MEM_ConfigSystem          (void);
void              SSL_MEM_GetContext            (SEGGER_MEM_CONTEXT **ppMem);

/*********************************************************************
*
*       SSL profiling instrumentation functions.
*/
void              SSL_SYSVIEW_Init              (void);

/*********************************************************************
*
*       Version and copyright information
*/
const char *      SSL_GetVersionText            (void);
const char *      SSL_GetCopyrightText          (void);

/*********************************************************************
*
*       OS integration.
*/
void              SSL_OS_DisableInterrupt       (void);
void              SSL_OS_EnableInterrupt        (void);
U32               SSL_OS_GetTime32              (void);
const char *      SSL_OS_GetTaskName            (void *pTask);
void              SSL_OS_Init                   (void);
void              SSL_OS_Lock                   (void);
void              SSL_OS_Unlock                 (void);

/*********************************************************************
*
*       Warning filter functions
*/
U32               SSL_SetWarnFilter             (U32 FilterMask);
U32               SSL_AddWarnFilter             (U32 FilterMask);
U32               SSL_RemoveWarnFilter          (U32 FilterMask);

/*********************************************************************
*
*       Logging filter functions
*/
U32               SSL_SetLogFilter              (U32 FilterMask);
U32               SSL_AddLogFilter              (U32 FilterMask);
U32               SSL_RemoveLogFilter           (U32 FilterMask);

/*********************************************************************
*
*       Mid-level log and warning functions
*/
void              SSL_Logf                      (U32 ReportMask, const char *sFormat, ...);
void              SSL_Warnf                     (U32 ReportMask, const char *sFormat, ...);

/*********************************************************************
*
*       Low-level log and warning output functions
*/
void              SSL_Log                       (const char *sText);
void              SSL_Warn                      (const char *sText);

/*********************************************************************
*
*       Error-related functions
*/
const char *      SSL_ERROR_GetText             (int Status);
void              SSL_Panic                     (int Status);

/*********************************************************************
*
*       Lint configuration
*
**********************************************************************
*/

//lint -esym(534,SSL_Send)              suppress ignored return value
//lint -esym(534,SSL_SendStr)           ditto
//lint -esym(534,SSL_AddLogFilter)      ditto
//lint -esym(534,SSL_RemoveLogFilter)   ditto
//lint -esym(534,SSL_SetLogFilter)      ditto
//lint -esym(534,SSL_AddWarnFilter)     ditto
//lint -esym(534,SSL_RemoveWarnFilter)  ditto
//lint -esym(534,SSL_SetWarnFilter)     ditto

#ifdef __cplusplus
}
#endif

#endif

/*************************** End of file ****************************/
