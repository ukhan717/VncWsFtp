/*********************************************************************
*                     SEGGER Microcontroller GmbH                    *
*                        The Embedded Experts                        *
**********************************************************************
*                                                                    *
*       (c) 2003 - 2019  SEGGER Microcontroller GmbH                 *
*                                                                    *
*       www.segger.com     Support: support@segger.com               *
*                                                                    *
**********************************************************************
-------------------------- END-OF-HEADER -----------------------------

File        : CRYPTO.h
Purpose     : SEGGER cryptographic toolkit API.

*/

#ifndef CRYPTO_H
#define CRYPTO_H

/*********************************************************************
*
*       #include Section
*
**********************************************************************
*/

#include "SEGGER.h"
#include "CRYPTO_ConfDefaults.h"
#include "CRYPTO_OID_List.h"

#if CRYPTO_CONFIG_AES_AESNI > 0
  #include <wmmintrin.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

/*********************************************************************
*
*       Defines, fixed
*
**********************************************************************
*/

/*********************************************************************
*
*       Version number
*
*  Description
*    Symbol expands to a number that identifies the specific emCrypt release.
*/
#define CRYPTO_VERSION            23000   // Format is "Mmmrr" so, for example, 12304 corresponds to version 1.23d.

/*********************************************************************
*
*       Number of units used internally by emCrypt.
*/
#define CRYPTO_OS_MAX_INTERNAL_UNIT             1

/*********************************************************************
*
*       Errors detected or generated by the component
*/
#define CRYPTO_ERROR_OUT_OF_MEMORY            -400
#define CRYPTO_ERROR_NO_INVERSE               -401
#define CRYPTO_ERROR_BAD_PKCS1_FORMAT         -402
#define CRYPTO_ERROR_SMALL_DECRYPTION_BUFFER  -403
#define CRYPTO_ERROR_SIGNATURE_NOT_VERIFIED   -404
#define CRYPTO_ERROR_PRIME_GENERATION_FAILED  -405
#define CRYPTO_ERROR_BAD_TLV_LENGTH           -406
#define CRYPTO_ERROR_BAD_TAG                  -407
#define CRYPTO_ERROR_BAD_LENGTH               -408
#define CRYPTO_ERROR_BAD_VALUE                -409
#define CRYPTO_ERROR_UNEXPECTED_TAG           -410
#define CRYPTO_ERROR_BAD_CERTIFICATE_VERSION  -411
#define CRYPTO_ERROR_BAD_SIGNATURE            -412
#define CRYPTO_ERROR_BAD_CURVE                -413
#define CRYPTO_ERROR_BUFFER_OVERFLOW          -414
#define CRYPTO_ERROR_NOT_ENOUGH_ENTROPY       -415
#define CRYPTO_ERROR_BAD_KEY_WRAP_FORMAT      -416
#define CRYPTO_ERROR_NO_SQUARE_ROOT           -417
#define CRYPTO_ERROR_BAD_POINT_FORMAT         -418
#define CRYPTO_ERROR_MESSAGE_TOO_LONG         -419
#define CRYPTO_ERROR_BAD_FORMAT               -420
#define CRYPTO_ERROR_BAD_PUBLIC_KEY           -421
#define CRYPTO_ERROR_POINT_NOT_ON_CURVE       -422
#define CRYPTO_ERROR_BAD_ALGORITHM_ID         -423
#define CRYPTO_ERROR_BAD_PARITY               -424
#define CRYPTO_ERROR_DECRYPTION_ERROR         -425
#define CRYPTO_ERROR_BAD_MAC                  -426
#define CRYPTO_ERROR_EXPECTED_NONEMPTY_TLV    -427
#define CRYPTO_ERROR_CERTIFICATE_EXPIRED      -428
#define CRYPTO_ERROR_NAME_MISMATCH            -429
#define CRYPTO_ERROR_SIGNING_CERT_NOT_A_CA    -430
#define CRYPTO_ERROR_UNSUPPORTED_SIG_ALG      -431
#define CRYPTO_ERROR_UNSUPPORTED_HASH_ALG     -432
#define CRYPTO_ERROR_UNSUPPORTED_PK_ALG       -433
#define CRYPTO_ERROR_CHAIN_NOT_VALID          -434

/*********************************************************************
*
*       SHA-1
*/
#define CRYPTO_SHA1_BLOCK_BYTE_COUNT          64
#define CRYPTO_SHA1_DIGEST_UNIT_COUNT         5                                    // 5 x 32-bit units
#define CRYPTO_SHA1_DIGEST_BYTE_COUNT         (CRYPTO_SHA1_DIGEST_UNIT_COUNT*4)    // 5 units of 4 bytes
#define CRYPTO_SHA1_DIGEST_BIT_COUNT          (CRYPTO_SHA1_DIGEST_BYTE_COUNT*8)
#define CRYPTO_SHA1_96_DIGEST_BYTE_COUNT      (96/8)

/*********************************************************************
*
*       SHA-224
*/
#define CRYPTO_SHA224_BLOCK_BYTE_COUNT        64
#define CRYPTO_SHA224_DIGEST_UNIT_COUNT       7
#define CRYPTO_SHA224_DIGEST_BYTE_COUNT       (CRYPTO_SHA224_DIGEST_UNIT_COUNT*4)
#define CRYPTO_SHA224_DIGEST_BIT_COUNT        (CRYPTO_SHA224_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       SHA-256
*/
#define CRYPTO_SHA256_BLOCK_BYTE_COUNT        64
#define CRYPTO_SHA256_DIGEST_UNIT_COUNT       8
#define CRYPTO_SHA256_DIGEST_BYTE_COUNT       (CRYPTO_SHA256_DIGEST_UNIT_COUNT*4)
#define CRYPTO_SHA256_DIGEST_BIT_COUNT        (CRYPTO_SHA256_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       SHA-384
*/
#define CRYPTO_SHA384_BLOCK_BYTE_COUNT        128
#define CRYPTO_SHA384_DIGEST_UNIT_COUNT       6
#define CRYPTO_SHA384_DIGEST_BYTE_COUNT       (CRYPTO_SHA384_DIGEST_UNIT_COUNT*8)
#define CRYPTO_SHA384_DIGEST_BIT_COUNT        (CRYPTO_SHA384_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       SHA-512
*/
#define CRYPTO_SHA512_BLOCK_BYTE_COUNT        128
#define CRYPTO_SHA512_DIGEST_UNIT_COUNT       8                                     // 8 x 64-bit units
#define CRYPTO_SHA512_DIGEST_BYTE_COUNT       (CRYPTO_SHA512_DIGEST_UNIT_COUNT*8)   // 8 units of 8 bytes
#define CRYPTO_SHA512_DIGEST_BIT_COUNT        (CRYPTO_SHA512_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       SHA-512/224
*/
#define CRYPTO_SHA512_224_BLOCK_BYTE_COUNT    128
#define CRYPTO_SHA512_224_DIGEST_BYTE_COUNT   28
#define CRYPTO_SHA512_224_DIGEST_BIT_COUNT    (CRYPTO_SHA512_224_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       SHA-512/256
*/
#define CRYPTO_SHA512_256_BLOCK_BYTE_COUNT    128
#define CRYPTO_SHA512_256_DIGEST_BYTE_COUNT   32
#define CRYPTO_SHA512_256_DIGEST_BIT_COUNT    (CRYPTO_SHA512_256_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       Keccak SHA-3 parameterization
*/
#define CRYPTO_SHA3_KECCAK_U64_WORDS          (1600 / 64)   // 1600 bits in 64-bit chunks

/*********************************************************************
*
*       SHA3-224
*/
#define CRYPTO_SHA3_224_BLOCK_BYTE_COUNT      144           // == 1152/8
#define CRYPTO_SHA3_224_DIGEST_BYTE_COUNT     28
#define CRYPTO_SHA3_224_DIGEST_BIT_COUNT      224

/*********************************************************************
*
*       SHA3-256
*/
#define CRYPTO_SHA3_256_BLOCK_BYTE_COUNT      136
#define CRYPTO_SHA3_256_DIGEST_BYTE_COUNT     32
#define CRYPTO_SHA3_256_DIGEST_BIT_COUNT      256

/*********************************************************************
*
*       SHA3-384
*/
#define CRYPTO_SHA3_384_BLOCK_BYTE_COUNT      104
#define CRYPTO_SHA3_384_DIGEST_BYTE_COUNT     48
#define CRYPTO_SHA3_384_DIGEST_BIT_COUNT      384

/*********************************************************************
*
*       SHA3-512
*/
#define CRYPTO_SHA3_512_BLOCK_BYTE_COUNT      72
#define CRYPTO_SHA3_512_DIGEST_BYTE_COUNT     64
#define CRYPTO_SHA3_512_DIGEST_BIT_COUNT      512

/*********************************************************************
*
*       SM3
*/
#define CRYPTO_SM3_BLOCK_BYTE_COUNT           64
#define CRYPTO_SM3_DIGEST_UNIT_COUNT          8
#define CRYPTO_SM3_DIGEST_BYTE_COUNT          (CRYPTO_SM3_DIGEST_UNIT_COUNT*4)
#define CRYPTO_SM3_DIGEST_BIT_COUNT           (CRYPTO_SM3_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       MD5
*/
#define CRYPTO_MD5_BLOCK_BYTE_COUNT           64
#define CRYPTO_MD5_DIGEST_UNIT_COUNT          4
#define CRYPTO_MD5_DIGEST_BYTE_COUNT          (CRYPTO_MD5_DIGEST_UNIT_COUNT*4)   // == 16
#define CRYPTO_MD5_DIGEST_BIT_COUNT           (CRYPTO_MD5_DIGEST_BYTE_COUNT*8)   // == 128
#define CRYPTO_MD5_96_DIGEST_BYTE_COUNT       (96/8)

/*********************************************************************
*
*       RIPEMD-160
*/
#define CRYPTO_RIPEMD160_BLOCK_BYTE_COUNT     64
#define CRYPTO_RIPEMD160_DIGEST_UNIT_COUNT    5
#define CRYPTO_RIPEMD160_DIGEST_BYTE_COUNT    (CRYPTO_RIPEMD160_DIGEST_UNIT_COUNT*4)
#define CRYPTO_RIPEMD160_DIGEST_BIT_COUNT     (CRYPTO_RIPEMD160_DIGEST_BYTE_COUNT*8)

/*********************************************************************
*
*       MD5-SHA-1 [TLS 1.0]
*/
#define CRYPTO_MD5SHA1_DIGEST_BYTE_COUNT      (CRYPTO_MD5_DIGEST_BYTE_COUNT + CRYPTO_SHA1_DIGEST_BYTE_COUNT)

/*********************************************************************
*
*       Poly1305
*/
#define CRYPTO_POLY1305_KEY_BYTE_COUNT        32
#define CRYPTO_POLY1305_BLOCK_BYTE_COUNT      16
#define CRYPTO_POLY1305_MAC_BYTE_COUNT        16

/*********************************************************************
*
*       Cipher modes
*/
#define CRYPTO_GCM_BLOCK_SIZE                 16            // 128-bit block for GCM mode
#define CRYPTO_CCM_BLOCK_SIZE                 16            // 128-bit block for CCM mode

/*********************************************************************
*
*       DES
*/
#define CRYPTO_DES_BLOCK_SIZE                  8
#define CRYPTO_DES_KEY_SIZE                    8

/*********************************************************************
*
*       TDES
*/
#define CRYPTO_TDES_BLOCK_SIZE                 8
#define CRYPTO_TDES_1KEY_SIZE                  8      // TDES in 1-key mode
#define CRYPTO_TDES_2KEY_SIZE                 16      // TDES in 2-key mode
#define CRYPTO_TDES_3KEY_SIZE                 24      // TDES in 3-key mode

/*********************************************************************
*
*       AES
*/
#define CRYPTO_AES_BLOCK_SIZE                 16      // Size of one AES block, in bytes
#define CRYPTO_AES128_KEY_SIZE                16      // Size of one AES-128 key, in bytes
#define CRYPTO_AES192_KEY_SIZE                24      // Size of one AES-128 key, in bytes
#define CRYPTO_AES256_KEY_SIZE                32      // Size of one AES-256 key, in bytes
#define CRYPTO_AES_GCM_BLOCK_SIZE             CRYPTO_GCM_BLOCK_SIZE
#define CRYPTO_AES_CCM_BLOCK_SIZE             CRYPTO_CCM_BLOCK_SIZE

/*********************************************************************
*
*       ChaCha20
*/
#define CRYPTO_CHACHA20_BLOCK_SIZE            64      // Size of one ChaCha20 block, in bytes
#define CRYPTO_CHACHA20_KEY_SIZE              32      // Size of one ChaCha20 key, in bytes

/*********************************************************************
*
*       ARIA
*/
#define CRYPTO_ARIA_BLOCK_SIZE                16      // Size of one ARIA block, in bytes
#define CRYPTO_ARIA128_KEY_SIZE               16      // Size of one ARIA-128 key, in bytes
#define CRYPTO_ARIA192_KEY_SIZE               24      // Size of one ARIA-128 key, in bytes
#define CRYPTO_ARIA256_KEY_SIZE               32      // Size of one ARIA-256 key, in bytes
#define CRYPTO_ARIA_GCM_BLOCK_SIZE            CRYPTO_GCM_BLOCK_SIZE
#define CRYPTO_ARIA_CCM_BLOCK_SIZE            CRYPTO_CCM_BLOCK_SIZE

/*********************************************************************
*
*       SEED
*/
#define CRYPTO_SEED_BLOCK_SIZE                16      // Size of one SEED block, in bytes
#define CRYPTO_SEED_KEY_SIZE                  16      // Size of one SEED key, in bytes
#define CRYPTO_SEED_GCM_BLOCK_SIZE            CRYPTO_GCM_BLOCK_SIZE
#define CRYPTO_SEED_CCM_BLOCK_SIZE            CRYPTO_CCM_BLOCK_SIZE

/*********************************************************************
*
*       CAMELLIA
*/
#define CRYPTO_CAMELLIA_BLOCK_SIZE            16      // Size of one Camellia block, in bytes
#define CRYPTO_CAMELLIA128_KEY_SIZE           16      // Size of one Camellia-128 key, in bytes
#define CRYPTO_CAMELLIA192_KEY_SIZE           24      // Size of one Camellia-192 key, in bytes
#define CRYPTO_CAMELLIA256_KEY_SIZE           32      // Size of one Camellia-256 key, in bytes
#define CRYPTO_CAMELLIA_GCM_BLOCK_SIZE        CRYPTO_GCM_BLOCK_SIZE
#define CRYPTO_CAMELLIA_CCM_BLOCK_SIZE        CRYPTO_CCM_BLOCK_SIZE

/*********************************************************************
*
*       Blowfish
*/
#define CRYPTO_BLOWFISH_BLOCK_SIZE             8      // Size of one Blowfish block, in bytes
#define CRYPTO_BLOWFISH128_KEY_SIZE           16      // Size of one Blowfish-128 key, in bytes
#define CRYPTO_BLOWFISH192_KEY_SIZE           24      // Size of one Blowfish-192 key, in bytes
#define CRYPTO_BLOWFISH256_KEY_SIZE           32      // Size of one Blowfish-256 key, in bytes

/*********************************************************************
*
*       Twofish
*/
#define CRYPTO_TWOFISH_BLOCK_SIZE             16      // Size of one Twofish block, in bytes
#define CRYPTO_TWOFISH128_KEY_SIZE            16      // Size of one Twofish-128 key, in bytes
#define CRYPTO_TWOFISH192_KEY_SIZE            24      // Size of one Twofish-192 key, in bytes
#define CRYPTO_TWOFISH256_KEY_SIZE            32      // Size of one Twofish-256 key, in bytes
#define CRYPTO_TWOFISH_GCM_BLOCK_SIZE         CRYPTO_GCM_BLOCK_SIZE
#define CRYPTO_TWOFISH_CCM_BLOCK_SIZE         CRYPTO_CCM_BLOCK_SIZE

/*********************************************************************
*
*       CAST
*/
#define CRYPTO_CAST_BLOCK_SIZE                 8      // Size of one CAST block, in bytes
#define CRYPTO_CAST128_KEY_SIZE               16      // Size of one CAST-128 128-bit key, in bytes
#define CRYPTO_CAST192_KEY_SIZE               24      // Size of one CAST-128 192-bit key, in bytes
#define CRYPTO_CAST256_KEY_SIZE               32      // Size of one CAST-128 256-bit key, in bytes

/*********************************************************************
*
*       RC4
*/
#define CRYPTO_RC4_40_KEY_SIZE                 5    // RC4-40 uses a 5-byte key
#define CRYPTO_RC4_128_KEY_SIZE               16    // RC4-128 uses a 16-byte key
#define CRYPTO_RC4_256_KEY_SIZE               32    // RC4-256 uses a 32-byte key

/*********************************************************************
*
*       DRBG
*/
#define CRYPTO_DRBG_SHA1_SEEDLEN_BITS        440
#define CRYPTO_DRBG_SHA224_SEEDLEN_BITS      440
#define CRYPTO_DRBG_SHA256_SEEDLEN_BITS      440
#define CRYPTO_DRBG_SHA384_SEEDLEN_BITS      888
#define CRYPTO_DRBG_SHA512_SEEDLEN_BITS      888
#define CRYPTO_DRBG_SHA512_224_SEEDLEN_BITS  440
#define CRYPTO_DRBG_SHA512_256_SEEDLEN_BITS  440
#define CRYPTO_DRBG_TDES_SEEDLEN_BITS        232     // 3DES key size (no parity bits) + DES block size: 168 + 64 = 232
#define CRYPTO_DRBG_AES128_SEEDLEN_BITS      256     // AES128 key size + AES block size: 128+128 = 256
#define CRYPTO_DRBG_AES192_SEEDLEN_BITS      320     // AES192 key size + AES block size: 192+128 = 320
#define CRYPTO_DRBG_AES256_SEEDLEN_BITS      384     // AES256 key size + AES block size: 256+128 = 384

/*********************************************************************
*
*       MACs
*/
#define CRYPTO_CMAC_AES_MAC_SIZE           CRYPTO_AES_BLOCK_SIZE
#define CRYPTO_CMAC_ARIA_MAC_SIZE          CRYPTO_ARIA_BLOCK_SIZE
#define CRYPTO_CMAC_BLOWFISH_MAC_SIZE      CRYPTO_BLOWFISH_BLOCK_SIZE
#define CRYPTO_CMAC_CAMELLIA_MAC_SIZE      CRYPTO_CAMELLIA_BLOCK_SIZE
#define CRYPTO_CMAC_CAST_MAC_SIZE          CRYPTO_CAST_BLOCK_SIZE
#define CRYPTO_CMAC_SEED_MAC_SIZE          CRYPTO_SEED_BLOCK_SIZE
#define CRYPTO_CMAC_TDES_MAC_SIZE          CRYPTO_TDES_BLOCK_SIZE
#define CRYPTO_CMAC_TWOFISH_MAC_SIZE       CRYPTO_TWOFISH_BLOCK_SIZE
#define CRYPTO_XCBC_AES_MAC_SIZE           CRYPTO_AES_BLOCK_SIZE
#define CRYPTO_XCBC_CAMELLIA_MAC_SIZE      CRYPTO_CAMELLIA_BLOCK_SIZE
#define CRYPTO_XCBC_ARIA_MAC_SIZE          CRYPTO_ARIA_BLOCK_SIZE
#define CRYPTO_XCBC_SEED_MAC_SIZE          CRYPTO_SEED_BLOCK_SIZE
#define CRYPTO_XCBC_TWOFISH_MAC_SIZE       CRYPTO_TWOFISH_BLOCK_SIZE
#define CRYPTO_GMAC_AES_MAC_SIZE           CRYPTO_AES_GCM_BLOCK_SIZE
#define CRYPTO_GMAC_ARIA_MAC_SIZE          CRYPTO_ARIA_GCM_BLOCK_SIZE
#define CRYPTO_GMAC_CAMELLIA_MAC_SIZE      CRYPTO_CAMELLIA_GCM_BLOCK_SIZE
#define CRYPTO_GMAC_SEED_MAC_SIZE          CRYPTO_SEED_GCM_BLOCK_SIZE
#define CRYPTO_GMAC_TWOFISH_MAC_SIZE       CRYPTO_TWOFISH_GCM_BLOCK_SIZE
#define CRYPTO_HMAC_MD5_MAC_SIZE           CRYPTO_MD5_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA1_MAC_SIZE          CRYPTO_SHA1_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA224_MAC_SIZE        CRYPTO_SHA224_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA256_MAC_SIZE        CRYPTO_SHA256_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA384_MAC_SIZE        CRYPTO_SHA384_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA512_MAC_SIZE        CRYPTO_SHA512_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA512_224_MAC_SIZE    CRYPTO_SHA512_224_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA512_256_MAC_SIZE    CRYPTO_SHA512_256_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA3_224_MAC_SIZE      CRYPTO_SHA3_224_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA3_256_MAC_SIZE      CRYPTO_SHA3_256_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA3_384_MAC_SIZE      CRYPTO_SHA3_384_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SHA3_512_MAC_SIZE      CRYPTO_SHA3_512_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_SM3_MAC_SIZE           CRYPTO_SM3_DIGEST_BYTE_COUNT
#define CRYPTO_HMAC_RIPEMD160_MAC_SIZE     CRYPTO_RIPEMD160_DIGEST_BYTE_COUNT
#define CRYPTO_POLY1305_AES_MAC_SIZE       CRYPTO_POLY1305_MAC_BYTE_COUNT
#define CRYPTO_POLY1305_ARIA_MAC_SIZE      CRYPTO_POLY1305_MAC_BYTE_COUNT
#define CRYPTO_POLY1305_CAMELLIA_MAC_SIZE  CRYPTO_POLY1305_MAC_BYTE_COUNT
#define CRYPTO_POLY1305_SEED_MAC_SIZE      CRYPTO_POLY1305_MAC_BYTE_COUNT
#define CRYPTO_POLY1305_TWOFISH_MAC_SIZE   CRYPTO_POLY1305_MAC_BYTE_COUNT

/*********************************************************************
*
*       ASN.1
*/

// ASN.1 DER types
#define ASN1_TAG_END_OF_CONTEXT             0x00    // P
#define ASN1_TAG_BOOLEAN                    0x01    // P
#define ASN1_TAG_INTEGER                    0x02    // P
#define ASN1_TAG_BIT_STRING                 0x03    // P/C
#define ASN1_TAG_OCTET_STRING               0x04    // P/C
#define ASN1_TAG_NULL                       0x05    // P
#define ASN1_TAG_OID                        0x06    // P
#define ASN1_TAG_OBJECT_DESCRIPTOR          0x07    // P/C
#define ASN1_TAG_EXTERNAL                   0x08    // C
#define ASN1_TAG_REAL                       0x09    // P
#define ASN1_TAG_ENUMERATED                 0x0A    // P
#define ASN1_TAG_EMBEDDED_PDV               0x0B    // C
#define ASN1_TAG_UTF8_STRING                0x0C    // P/C
#define ASN1_TAG_RELATIVE_OID               0x0D    // P
#define ASN1_TAG_reserved_0x0e              0x0E    // Reserved
#define ASN1_TAG_reserved_0x0f              0x0F    // Reserved
#define ASN1_TAG_SEQUENCE                   0x10    // C
#define ASN1_TAG_SET                        0x11    // C
#define ASN1_TAG_NUMERIC_STRING             0x12    // P/C
#define ASN1_TAG_PRINTABLE_STRING           0x13    // P/C
#define ASN1_TAG_T61_STRING                 0x14    // P/C
#define ASN1_TAG_VIDEOTEX_STRING            0x15    // P/C
#define ASN1_TAG_IA5_STRING                 0x16    // P/C
#define ASN1_TAG_UTC_TIME                   0x17    // P/C
#define ASN1_TAG_GENERALIZED_TIME           0x18    // P/C
#define ASN1_TAG_GRAPHIC_STRING             0x19    // P/C
#define ASN1_TAG_VISIBLE_STRING             0x1A    // P/C
#define ASN1_TAG_GENERAL_STRING             0x1B    // P/C
#define ASN1_TAG_UNIVERSAL_STRING           0x1C    // P/C
#define ASN1_TAG_CHARACTER_STRING           0x1D    // P/C
#define ASN1_TAG_BMP_STRING                 0x1E    // P/C

// Bit 6, P/C
#define ASN1_TAG_PRIMITIVE                  0x00    // P/C bit clear, primitive
#define ASN1_TAG_CONSTRUCTED                0x20    // P/C bit set, constructed

// Bit 7/8 combinations
#define ASN1_TAG_UNIVERSAL                  0x00
#define ASN1_TAG_APPLICATION                0x40
#define ASN1_TAG_CONTEXT_SPECIFIC           0x80
#define ASN1_TAG_PRIVATE                    0xC0

//
// BASE64 encode and decode flags
//
#define CRYPTO_BASE64_FLAG_NEWLINES         0x01  // Generate newlines on output
#define CRYPTO_BASE64_FLAG_NOZTERM          0x02  // Do not zero-terminate output

//
// X.509 key usage.  See [https://tools.ietf.org/html/rfc5280#section-4.2.1.3].
//
#define CRYPTO_X509_KEY_USAGE_DIGITAL_SIGNATURE        (1 << 0)
#define CRYPTO_X509_KEY_USAGE_NON_REPUDIATION          (1 << 1)
#define CRYPTO_X509_KEY_USAGE_KEY_ENCIPHERMENT         (1 << 2)
#define CRYPTO_X509_KEY_USAGE_DATA_ENCIPHERMENT        (1 << 3)
#define CRYPTO_X509_KEY_USAGE_KEY_AGREEMENT            (1 << 4)
#define CRYPTO_X509_KEY_USAGE_KEY_CERT_SIGN            (1 << 5)
#define CRYPTO_X509_KEY_USAGE_CRL_SIGN                 (1 << 6)
#define CRYPTO_X509_KEY_USAGE_ENCIPHER_ONLY            (1 << 7)
#define CRYPTO_X509_KEY_USAGE_DECIPHER_ONLY            (1 << 8)

//
// X.509 extended key usage.  See [https://tools.ietf.org/html/rfc5280#section-4.2.1.12].
//
#define CRYPTO_X509_EXT_KEY_USAGE_ANY                  (1 << 0)
#define CRYPTO_X509_EXT_KEY_USAGE_SERVER_AUTH          (1 << 1)
#define CRYPTO_X509_EXT_KEY_USAGE_CLIENT_AUTH          (1 << 2)
#define CRYPTO_X509_EXT_KEY_USAGE_CODE_SIGNING         (1 << 3)
#define CRYPTO_X509_EXT_KEY_USAGE_EMAIL_PROTECTION     (1 << 4)
#define CRYPTO_X509_EXT_KEY_USAGE_TIME_STAMPING        (1 << 5)
#define CRYPTO_X509_EXT_KEY_USAGE_OCSP_SIGNING         (1 << 6)

/*********************************************************************
*
*       Types required for API
*
**********************************************************************
*/

typedef struct CRYPTO_TLV_tag CRYPTO_TLV;
struct CRYPTO_TLV_tag {
  int        Tag;
  unsigned   Length;
  U8       * Value;
};

typedef struct {
  unsigned Hour;
  unsigned Minute;
  unsigned Second;
  unsigned Year;
  unsigned Month;
  unsigned Day;
} CRYPTO_CALENDAR_TIME;

typedef enum {
  CRYPTO_LOGIC_OP_Store,
  CRYPTO_LOGIC_OP_Xor
} CRYPTO_LOGIC_OP;

typedef struct {
  U8       * pCursor;         // Current input or output pointer, the cursor on the stream
  unsigned   OutputByteCnt;   // Number of bytes left to be written
  unsigned   OverflowCnt;     // Number of bytes overwritten
  unsigned   Capacity;        // Total number of bytes in the buffer
  U8       * pBuffer;         // Start of the write buffer.
} CRYPTO_BUFFER;

typedef struct {
  unsigned Index;
  U8     * pBuffer;           // Big enough for SHA-512
} CRYPTO_HASH_BUFFER;

typedef struct {
  void (*pfInit)   (void);
  void (*pfGet)    (U8 *pDest, unsigned DestLen);
  void (*pfReseed) (void);
  int  (*pfStatus) (void);
} CRYPTO_RNG_API;

typedef struct CRYPTO_CIPHER_API_tag CRYPTO_CIPHER_API;
struct CRYPTO_CIPHER_API_tag {
  unsigned                  BlockSize;       // Size of one block
  //
  const CRYPTO_CIPHER_API * (*pfClaim)       (unsigned KeySize);
  void                      (*pfUnclaim)     (void *pContext);
  void                      (*pfInitEncrypt) (void *pContext, const U8 *pKey, unsigned KeyLen);
  void                      (*pfInitDecrypt) (void *pContext, const U8 *pKey, unsigned KeyLen);
  void                      (*pfEncrypt)     (void *pContext, U8 *pOutput, const U8 *pInput);
  void                      (*pfDecrypt)     (void *pContext, U8 *pOutput, const U8 *pInput);
  //
  // Special accelerators for different modes.  If null, use the generic
  // encryption mode code along with the kernel cipher functions.  If nonnull,
  // call the specialized accelerator function.
  //
  void                      (*pfECBEncrypt)  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned InputLen);
  void                      (*pfECBDecrypt)  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned InputLen);
  void                      (*pfCBCEncrypt)  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
  void                      (*pfCBCDecrypt)  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
};

typedef struct CRYPTO_HASH_API_tag CRYPTO_HASH_API;
struct CRYPTO_HASH_API_tag {
  unsigned                  HashLen;
  //
  const CRYPTO_HASH_API *   (*pfClaim)   (void);
  void                      (*pfUnclaim) (void *pContext);
  void                      (*pfInit)    (void *pContext);
  void                      (*pfAdd)     (void *pContext, const U8 *pInput, unsigned InputLen);
  void                      (*pfGet)     (void *pContext, U8 *pOutput, unsigned OutputLen);
  void                      (*pfKill)    (void *pContext);
};

typedef struct {
  unsigned                  MACLen;
  //
  void                      (*pfInit)    (void *pContext, const U8 *pKey, unsigned KeyLen);
  void                      (*pfInitEx)  (void *pContext, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
  void                      (*pfAdd)     (void *pContext, const U8 *pInput, unsigned InputLen);
  void                      (*pfFinal)   (void *pContext, U8 *pOutput, unsigned OutputLen);
  void                      (*pfKill)    (void *pContext);
} CRYPTO_MAC_API;

/*********************************************************************
*
*       DES context.
*/
typedef struct {
  U32 aRoundKey[32];
} CRYPTO_DES_CONTEXT;

/*********************************************************************
*
*       TDES
*/
typedef struct {
  const CRYPTO_CIPHER_API * pAPI;
  unsigned                  KeyLen;
  CRYPTO_DES_CONTEXT        EDE[3];
} CRYPTO_TDES_CONTEXT;

/*********************************************************************
*
*       AES
*/
typedef U8 CRYPTO_AES_BLOCK[CRYPTO_AES_BLOCK_SIZE];

/*********************************************************************
*
*       AES context (enough for AES-128 and AES-256).
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
  unsigned Control;          // For specific use by the cipher implementation, e.g.
  //
  union {
#if CRYPTO_CONFIG_AES_AESNI > 0
    __m128i aNIKey[15];      // Key schedule for AES-NI
#endif
#if CRYPTO_CONFIG_AES_OPTIMIZE >= 0
    U32     aRoundKey[60];   // Key schedule
#endif
  } KeySchedule;
} CRYPTO_AES_CONTEXT;

/*********************************************************************
*
*       ARIA context.
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
  unsigned RoundCnt;
  U32      aRK[68];
} CRYPTO_ARIA_CONTEXT;

/*********************************************************************
*
*       SEED context.
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;  // Pointer to cipher implementation
  U32 aKS[32];                    // Key schedule
} CRYPTO_SEED_CONTEXT;

/*********************************************************************
*
*       Camellia context.
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;  // Pointer to cipher implementation
  unsigned KeyBytes;              // Byte length of key
  U64      aKW[4];                // Pre and postwhitening
  U64      aK[24];                // Key schedule
  U64      aKL[6];                // Key schedule
} CRYPTO_CAMELLIA_CONTEXT;

/*********************************************************************
*
*       Blowfish
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
  U32      aP[16+2];    // 16 rounds; this is fixed.
  U32      aS[4][256];  // 4K, key-dependent s-boxes
} CRYPTO_BLOWFISH_CONTEXT;

/*********************************************************************
*
*       Twofish
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
  U32      aK[40];      // 160 bytes
#if CRYPTO_CONFIG_TWOFISH_OPTIMIZE & 4   // Full keying option
  // ...Full keying...
  U32      aS[4][256]; // 4K, key-dependent s-boxes
#else
  // ...Minimal keying...
  U8       aS[32];     // 32 bytes
  unsigned Start;
#endif
} CRYPTO_TWOFISH_CONTEXT;

/*********************************************************************
*
*       Generic cipher context.
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
} CRYPTO_CIPHER_CONTEXT;

/*********************************************************************
*
*       CAST
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
  unsigned KeySize;
  U32      aK[32];
} CRYPTO_CAST_CONTEXT;

/*********************************************************************
*
*       RC4
*/
typedef struct {
  U8 aS[256];  // State vector
  U8 i;       // Exchange indexes
  U8 j;
} CRYPTO_RC4_CONTEXT;

/*********************************************************************
*
*       MD5
*/
typedef struct {
  const CRYPTO_HASH_API * pAPI;                                     // Hash API for this context
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  union {                                                           // Intermediate hash
    U32                   aUnit[CRYPTO_MD5_DIGEST_UNIT_COUNT];
    U8                    aByte[CRYPTO_MD5_DIGEST_BYTE_COUNT];
  } H;
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_MD5_BLOCK_BYTE_COUNT];
} CRYPTO_MD5_CONTEXT;

/*********************************************************************
*
*       RIPEMD-160
*/
typedef struct {
  const CRYPTO_HASH_API * pAPI;                                     // Hash API for this context
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  union {                                                           // Intermediate hash
    U32                   aUnit[CRYPTO_RIPEMD160_DIGEST_UNIT_COUNT];
    U8                    aByte[CRYPTO_RIPEMD160_DIGEST_BYTE_COUNT];
  } H;
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_RIPEMD160_BLOCK_BYTE_COUNT];
} CRYPTO_RIPEMD160_CONTEXT;

/*********************************************************************
*
*       SHA-1
*/
typedef struct {
  const CRYPTO_HASH_API * pAPI;                                     // Hash API for this context
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  union {                                                           // Intermediate hash
    U32                   aUnit[CRYPTO_SHA1_DIGEST_UNIT_COUNT];
    U8                    aByte[CRYPTO_SHA1_DIGEST_BYTE_COUNT];
  } H;
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_SHA1_BLOCK_BYTE_COUNT];
} CRYPTO_SHA1_CONTEXT;

/*********************************************************************
*
*       SHA-256
*/
typedef struct {
  const CRYPTO_HASH_API * pAPI;                                     // Hash API for this context
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  union {                                                           // Intermediate hash
    U32                   aUnit[CRYPTO_SHA256_DIGEST_UNIT_COUNT];
    U8                    aByte[CRYPTO_SHA256_DIGEST_BYTE_COUNT];
  } H;
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_SHA256_BLOCK_BYTE_COUNT];
} CRYPTO_SHA256_CONTEXT;

/*********************************************************************
*
*       SHA-512
*/
typedef struct {
  const CRYPTO_HASH_API * pAPI;                                     // Hash API for this context
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  union {                                                           // Intermediate hash
    U64                   aUnit[CRYPTO_SHA512_DIGEST_UNIT_COUNT];
    U8                    aByte[CRYPTO_SHA512_DIGEST_BYTE_COUNT];
  } H;
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_SHA512_BLOCK_BYTE_COUNT];
} CRYPTO_SHA512_CONTEXT;

/*********************************************************************
*
*       Keccak context
*/
typedef struct {
  unsigned ByteCnt;                                                 // Byte within word, [0, 7]
  unsigned WordCnt;                                                 // Word within block, [0, 24]
  unsigned Capacity;                                                // Capacity converted to 64-bit word "chunks"
  unsigned BlockSize;                                               // Block size in 64-bit words
  U8       aWork[8];                                                // Input buffering for one 64-bit word
  U64      aState[CRYPTO_SHA3_KECCAK_U64_WORDS];
} CRYPTO_KECCAK_CONTEXT;

/*********************************************************************
*
*       SHAKE context
*/
typedef CRYPTO_KECCAK_CONTEXT CRYPTO_SHAKE_CONTEXT;

/*********************************************************************
*
*       cSHAKE context
*/
typedef struct {
  CRYPTO_KECCAK_CONTEXT Keccak;
  unsigned              Padding;                                    // Padding to add to message
} CRYPTO_CSHAKE_CONTEXT;

/*********************************************************************
*
*       SHA3 shared context
*/
typedef struct {
  const CRYPTO_HASH_API  * pAPI;                                    // Hash API for this context
  CRYPTO_KECCAK_CONTEXT    Keccak;
} CRYPTO_SHA3_CONTEXT;

/*********************************************************************
*
*       SM3
*/
typedef struct {
  const CRYPTO_HASH_API * pAPI;                                     // Hash API for this context
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  union {                                                           // Intermediate hash
    U32                   aUnit[CRYPTO_SM3_DIGEST_UNIT_COUNT];
    U8                    aByte[CRYPTO_SM3_DIGEST_BYTE_COUNT];
  } H;
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_SM3_BLOCK_BYTE_COUNT];
} CRYPTO_SM3_CONTEXT;

/*********************************************************************
*
*       ChaCha20 cipher context.
*/
typedef struct {
  const CRYPTO_CIPHER_API *pAPI;
  U32 aBlock[16];
  unsigned IETFMode;  // 32-bit counter, 96-bit nonce
} CRYPTO_CHACHA20_CONTEXT;

/*********************************************************************
*
*       SHA based on other kernels.
*/
typedef CRYPTO_SHA256_CONTEXT   CRYPTO_SHA224_CONTEXT;      // SHA-224 is a truncated SHA-256 with a different IV
typedef CRYPTO_SHA512_CONTEXT   CRYPTO_SHA384_CONTEXT;      // SHA-384 is a truncated SHA-512 with a different IV
typedef CRYPTO_SHA512_CONTEXT   CRYPTO_SHA512_224_CONTEXT;  // SHA-512/224 is a truncated SHA-512 with a different IV
typedef CRYPTO_SHA512_CONTEXT   CRYPTO_SHA512_256_CONTEXT;  // SHA-512/256 is a truncated SHA-512 with a different IV
typedef CRYPTO_SHA3_CONTEXT     CRYPTO_SHA3_224_CONTEXT;
typedef CRYPTO_SHA3_CONTEXT     CRYPTO_SHA3_256_CONTEXT;
typedef CRYPTO_SHA3_CONTEXT     CRYPTO_SHA3_384_CONTEXT;
typedef CRYPTO_SHA3_CONTEXT     CRYPTO_SHA3_512_CONTEXT;

/*********************************************************************
*
*       MD5-SHA-1 context [TLS 1.0]
*/
typedef struct {
  CRYPTO_MD5_CONTEXT  MD5;
  CRYPTO_SHA1_CONTEXT SHA;
} CRYPTO_MD5SHA1_CONTEXT;

/*********************************************************************
*
*       GHASH context
*/
typedef struct {
  U8                      aMAC[CRYPTO_AES_BLOCK_SIZE];              // 16 bytes for any 128-bit cipher block
  U8                      aKey[CRYPTO_AES_BLOCK_SIZE];              // 16 bytes for any 128-bit cipher block
  CRYPTO_HASH_BUFFER      Block;                                    // Buffered data for block
  U8                      aBlockData[CRYPTO_AES_BLOCK_SIZE];        // 16 bytes for any 128-bit cipher block
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
} CRYPTO_GHASH_CONTEXT;

/*********************************************************************
*
*       GMAC-AES
*/
typedef struct {
  U8                 aMAC      [CRYPTO_AES_BLOCK_SIZE];
  U8                 aTag      [CRYPTO_AES_BLOCK_SIZE];
  U8                 aH        [CRYPTO_AES_BLOCK_SIZE];
  U8                 aBlockData[CRYPTO_AES_BLOCK_SIZE];
  U64                ByteCnt;                                  // 64-bit byte count (not bit count!)
  CRYPTO_HASH_BUFFER Block;
  CRYPTO_AES_CONTEXT CipherContext;
} CRYPTO_GMAC_AES_CONTEXT;

/*********************************************************************
*
*       GMAC-ARIA
*/
typedef struct {
  U8                  aMAC      [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aTag      [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aH        [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_ARIA_BLOCK_SIZE];
  U64                 ByteCnt;                                  // 64-bit byte count (not bit count!)
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_ARIA_CONTEXT CipherContext;
} CRYPTO_GMAC_ARIA_CONTEXT;

/*********************************************************************
*
*       GMAC-SEED
*/
typedef struct {
  U8                  aMAC      [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aTag      [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aH        [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_SEED_BLOCK_SIZE];
  U64                 ByteCnt;                                  // 64-bit byte count (not bit count!)
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_SEED_CONTEXT CipherContext;
} CRYPTO_GMAC_SEED_CONTEXT;

/*********************************************************************
*
*       GMAC-CAMELLIA
*/
typedef struct {
  U8                      aMAC      [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aTag      [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aH        [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aBlockData[CRYPTO_CAMELLIA_BLOCK_SIZE];
  U64                     ByteCnt;                                  // 64-bit byte count (not bit count!)
  CRYPTO_HASH_BUFFER      Block;
  CRYPTO_CAMELLIA_CONTEXT CipherContext;
} CRYPTO_GMAC_CAMELLIA_CONTEXT;

/*********************************************************************
*
*       GMAC-TWOFISH
*/
typedef struct {
  U8                     aMAC      [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aTag      [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aH        [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aBlockData[CRYPTO_TWOFISH_BLOCK_SIZE];
  U64                    ByteCnt;                                  // 64-bit byte count (not bit count!)
  CRYPTO_HASH_BUFFER     Block;
  CRYPTO_TWOFISH_CONTEXT CipherContext;
} CRYPTO_GMAC_TWOFISH_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA1
*/
typedef struct {
  CRYPTO_SHA1_CONTEXT HashContext;
  U8                  aInnerPad[CRYPTO_SHA1_BLOCK_BYTE_COUNT];
  U8                  aOuterPad[CRYPTO_SHA1_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA1_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA224
*/
typedef struct {
  CRYPTO_SHA224_CONTEXT HashContext;
  U8                    aInnerPad[CRYPTO_SHA224_BLOCK_BYTE_COUNT];
  U8                    aOuterPad[CRYPTO_SHA224_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA224_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA256
*/
typedef struct {
  CRYPTO_SHA256_CONTEXT HashContext;
  U8                    aInnerPad[CRYPTO_SHA256_BLOCK_BYTE_COUNT];
  U8                    aOuterPad[CRYPTO_SHA256_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA256_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA384
*/
typedef struct {
  CRYPTO_SHA384_CONTEXT HashContext;
  U8                    aInnerPad[CRYPTO_SHA384_BLOCK_BYTE_COUNT];
  U8                    aOuterPad[CRYPTO_SHA384_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA384_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA512
*/
typedef struct {
  CRYPTO_SHA512_CONTEXT HashContext;
  U8                    aInnerPad[CRYPTO_SHA512_BLOCK_BYTE_COUNT];
  U8                    aOuterPad[CRYPTO_SHA512_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA512_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA512/224
*/
typedef struct {
  CRYPTO_SHA512_224_CONTEXT HashContext;
  U8                        aInnerPad[CRYPTO_SHA512_224_BLOCK_BYTE_COUNT];
  U8                        aOuterPad[CRYPTO_SHA512_224_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA512_224_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA512/256
*/
typedef struct {
  CRYPTO_SHA512_256_CONTEXT HashContext;
  U8                        aInnerPad[CRYPTO_SHA512_256_BLOCK_BYTE_COUNT];
  U8                        aOuterPad[CRYPTO_SHA512_256_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA512_256_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA3-224
*/
typedef struct {
  CRYPTO_SHA3_224_CONTEXT HashContext;
  U8                      aInnerPad[CRYPTO_SHA3_224_BLOCK_BYTE_COUNT];
  U8                      aOuterPad[CRYPTO_SHA3_224_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA3_224_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA3-256
*/
typedef struct {
  CRYPTO_SHA3_256_CONTEXT HashContext;
  U8                      aInnerPad[CRYPTO_SHA3_256_BLOCK_BYTE_COUNT];
  U8                      aOuterPad[CRYPTO_SHA3_256_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA3_256_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA3-384
*/
typedef struct {
  CRYPTO_SHA3_384_CONTEXT HashContext;
  U8                      aInnerPad[CRYPTO_SHA3_384_BLOCK_BYTE_COUNT];
  U8                      aOuterPad[CRYPTO_SHA3_384_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA3_384_CONTEXT;

/*********************************************************************
*
*       HMAC-SHA3-512
*/
typedef struct {
  CRYPTO_SHA3_512_CONTEXT HashContext;
  U8                      aInnerPad[CRYPTO_SHA3_512_BLOCK_BYTE_COUNT];
  U8                      aOuterPad[CRYPTO_SHA3_512_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SHA3_512_CONTEXT;

/*********************************************************************
*
*       HMAC-SM3
*/
typedef struct {
  CRYPTO_SM3_CONTEXT HashContext;
  U8                 aInnerPad[CRYPTO_SM3_BLOCK_BYTE_COUNT];
  U8                 aOuterPad[CRYPTO_SM3_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_SM3_CONTEXT;

/*********************************************************************
*
*       HMAC-RIPEMD160
*/
typedef struct {
  CRYPTO_RIPEMD160_CONTEXT HashContext;
  U8                       aInnerPad[CRYPTO_RIPEMD160_BLOCK_BYTE_COUNT];
  U8                       aOuterPad[CRYPTO_RIPEMD160_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_RIPEMD160_CONTEXT;

/*********************************************************************
*
*       HMAC-MD5
*/
typedef struct {
  CRYPTO_MD5_CONTEXT HashContext;
  U8                 aInnerPad[CRYPTO_MD5_BLOCK_BYTE_COUNT];
  U8                 aOuterPad[CRYPTO_MD5_BLOCK_BYTE_COUNT];
} CRYPTO_HMAC_MD5_CONTEXT;

/*********************************************************************
*
*       CMAC-AES
*/
typedef struct {
  U8                 aMAC      [CRYPTO_AES_BLOCK_SIZE];
  U8                 aK1       [CRYPTO_AES_BLOCK_SIZE];
  U8                 aK2       [CRYPTO_AES_BLOCK_SIZE];
  U8                 aBlockData[CRYPTO_AES_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER Block;
  CRYPTO_AES_CONTEXT CipherContext;
} CRYPTO_CMAC_AES_CONTEXT;

/*********************************************************************
*
*       CMAC-TDES
*/
typedef struct {
  U8                  aMAC      [CRYPTO_TDES_BLOCK_SIZE];
  U8                  aK1       [CRYPTO_TDES_BLOCK_SIZE];
  U8                  aK2       [CRYPTO_TDES_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_TDES_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_TDES_CONTEXT CipherContext;
} CRYPTO_CMAC_TDES_CONTEXT;

/*********************************************************************
*
*       CMAC-ARIA
*/
typedef struct {
  U8                  aMAC      [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aK1       [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aK2       [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_ARIA_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_ARIA_CONTEXT CipherContext;
} CRYPTO_CMAC_ARIA_CONTEXT;

/*********************************************************************
*
*       CMAC-SEED
*/
typedef struct {
  U8                  aMAC      [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aK1       [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aK2       [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_SEED_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_SEED_CONTEXT CipherContext;
} CRYPTO_CMAC_SEED_CONTEXT;

/*********************************************************************
*
*       CMAC-Camellia
*/
typedef struct {
  U8                      aMAC      [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aK1       [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aK2       [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aBlockData[CRYPTO_CAMELLIA_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER      Block;
  CRYPTO_CAMELLIA_CONTEXT CipherContext;
} CRYPTO_CMAC_CAMELLIA_CONTEXT;

/*********************************************************************
*
*       CMAC-Twofish
*/
typedef struct {
  U8                     aMAC      [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aK1       [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aK2       [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aBlockData[CRYPTO_TWOFISH_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER     Block;
  CRYPTO_TWOFISH_CONTEXT CipherContext;
} CRYPTO_CMAC_TWOFISH_CONTEXT;

/*********************************************************************
*
*       CMAC-Blowfish
*/
typedef struct {
  U8                      aMAC      [CRYPTO_BLOWFISH_BLOCK_SIZE];
  U8                      aK1       [CRYPTO_BLOWFISH_BLOCK_SIZE];
  U8                      aK2       [CRYPTO_BLOWFISH_BLOCK_SIZE];
  U8                      aBlockData[CRYPTO_BLOWFISH_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER      Block;
  CRYPTO_BLOWFISH_CONTEXT CipherContext;
} CRYPTO_CMAC_BLOWFISH_CONTEXT;

/*********************************************************************
*
*       CMAC-CAST
*/
typedef struct {
  U8                  aMAC      [CRYPTO_CAST_BLOCK_SIZE];
  U8                  aK1       [CRYPTO_CAST_BLOCK_SIZE];
  U8                  aK2       [CRYPTO_CAST_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_CAST_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_CAST_CONTEXT CipherContext;
} CRYPTO_CMAC_CAST_CONTEXT;

/*********************************************************************
*
*       AES-XCBC-MAC
*/
typedef struct {
  U8                 aMAC      [CRYPTO_AES_BLOCK_SIZE];
  U8                 aK1       [CRYPTO_AES_BLOCK_SIZE];
  U8                 aK2       [CRYPTO_AES_BLOCK_SIZE];
  U8                 aK3       [CRYPTO_AES_BLOCK_SIZE];
  U8                 aBlockData[CRYPTO_AES_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER Block;
  CRYPTO_AES_CONTEXT CipherContext;
} CRYPTO_XCBC_AES_CONTEXT;

/*********************************************************************
*
*       Camellia-XCBC-MAC
*/
typedef struct {
  U8                      aMAC      [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aK1       [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aK2       [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aK3       [CRYPTO_CAMELLIA_BLOCK_SIZE];
  U8                      aBlockData[CRYPTO_CAMELLIA_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER      Block;
  CRYPTO_CAMELLIA_CONTEXT CipherContext;
} CRYPTO_XCBC_CAMELLIA_CONTEXT;

/*********************************************************************
*
*       ARIA-XCBC-MAC
*/
typedef struct {
  U8                  aMAC      [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aK1       [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aK2       [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aK3       [CRYPTO_ARIA_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_ARIA_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_ARIA_CONTEXT CipherContext;
} CRYPTO_XCBC_ARIA_CONTEXT;

/*********************************************************************
*
*       SEED-XCBC-MAC
*/
typedef struct {
  U8                  aMAC      [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aK1       [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aK2       [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aK3       [CRYPTO_SEED_BLOCK_SIZE];
  U8                  aBlockData[CRYPTO_SEED_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER  Block;
  CRYPTO_SEED_CONTEXT CipherContext;
} CRYPTO_XCBC_SEED_CONTEXT;

/*********************************************************************
*
*       BLOWFISH-XCBC-MAC
*/
typedef struct {
  U8                     aMAC      [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aK1       [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aK2       [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aK3       [CRYPTO_TWOFISH_BLOCK_SIZE];
  U8                     aBlockData[CRYPTO_TWOFISH_BLOCK_SIZE];
  CRYPTO_HASH_BUFFER     Block;
  CRYPTO_TWOFISH_CONTEXT CipherContext;
} CRYPTO_XCBC_TWOFISH_CONTEXT;

/*********************************************************************
*
*       KMAC
*/
typedef struct {
  CRYPTO_CSHAKE_CONTEXT cSHAKE;
} CRYPTO_KMAC_CONTEXT;

/*********************************************************************
*
*       Poly1305
*/
typedef struct {
  U32                aH[5];
  U32                aR[9];
  CRYPTO_HASH_BUFFER Block;
  U8                 aBlockData[CRYPTO_POLY1305_BLOCK_BYTE_COUNT];
} CRYPTO_POLY1305_CONTEXT;

/*********************************************************************
*
*       Poly1305-AES
*/
typedef struct {
  CRYPTO_POLY1305_CONTEXT POLY1305;
} CRYPTO_POLY1305_AES_CONTEXT;

/*********************************************************************
*
*       Poly1305-Camellia
*/
typedef struct {
  CRYPTO_POLY1305_CONTEXT POLY1305;
} CRYPTO_POLY1305_CAMELLIA_CONTEXT;

/*********************************************************************
*
*       Poly1305-SEED
*/
typedef struct {
  CRYPTO_POLY1305_CONTEXT POLY1305;
} CRYPTO_POLY1305_SEED_CONTEXT;

/*********************************************************************
*
*       Poly1305-ARIA
*/
typedef struct {
  CRYPTO_POLY1305_CONTEXT POLY1305;
} CRYPTO_POLY1305_ARIA_CONTEXT;

/*********************************************************************
*
*       Poly1305-Twofish
*/
typedef struct {
  CRYPTO_POLY1305_CONTEXT POLY1305;
} CRYPTO_POLY1305_TWOFISH_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA1
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA1_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA1_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA1_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA224
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA224_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA224_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA224_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA256
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA256_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA256_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA256_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA384
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA384_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA384_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA384_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA512
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA512_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA512_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA512_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA512/224
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA512_224_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA512_224_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA512_224_CONTEXT;

/*********************************************************************
*
*       DRBG-Hash-SHA512/256
*/
typedef struct {
  U8  aV[CRYPTO_DRBG_SHA512_256_SEEDLEN_BITS / 8];
  U8  aC[CRYPTO_DRBG_SHA512_256_SEEDLEN_BITS / 8];
  U32 ReseedCounter;
} CRYPTO_DRBG_HASH_SHA512_256_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA1
*/
typedef struct {
  U8  aV  [CRYPTO_SHA1_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA1_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA1_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA224
*/
typedef struct {
  U8  aV  [CRYPTO_SHA224_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA224_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA224_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA256
*/
typedef struct {
  U8  aV  [CRYPTO_SHA256_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA256_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA256_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA384
*/
typedef struct {
  U8  aV  [CRYPTO_SHA384_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA384_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA384_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA512
*/
typedef struct {
  U8  aV  [CRYPTO_SHA512_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA512_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA512_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA512/224
*/
typedef struct {
  U8  aV  [CRYPTO_SHA512_224_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA512_224_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA512_224_CONTEXT;

/*********************************************************************
*
*       DRBG-HMAC-SHA512/256
*/
typedef struct {
  U8  aV  [CRYPTO_SHA512_256_DIGEST_BYTE_COUNT];
  U8  aKey[CRYPTO_SHA512_256_DIGEST_BYTE_COUNT];
  U32 ReseedCounter;
} CRYPTO_DRBG_HMAC_SHA512_256_CONTEXT;

/*********************************************************************
*
*       DRBG-CTR-AES-128
*/
typedef struct {
  U8  aV  [CRYPTO_AES_BLOCK_SIZE];
  U8  aKey[CRYPTO_AES128_KEY_SIZE];
  U32 ReseedCtr;
} CRYPTO_DRBG_CTR_AES128_CONTEXT;

/*********************************************************************
*
*       DRBG-CTR-AES-192
*/
typedef struct {
  U8  aV  [CRYPTO_AES_BLOCK_SIZE];
  U8  aKey[CRYPTO_AES192_KEY_SIZE];
  U32 ReseedCtr;
} CRYPTO_DRBG_CTR_AES192_CONTEXT;

/*********************************************************************
*
*       DRBG-CTR-AES-256
*/
typedef struct {
  U8  aV  [CRYPTO_AES_BLOCK_SIZE];
  U8  aKey[CRYPTO_AES256_KEY_SIZE];
  U32 ReseedCtr;
} CRYPTO_DRBG_CTR_AES256_CONTEXT;

/*********************************************************************
*
*       DRBG-CTR-TDES
*/
typedef struct {
  U8  aV  [CRYPTO_DES_BLOCK_SIZE];
  U8  aKey[21];  // 168 bits, no parity
  U32 ReseedCtr;
} CRYPTO_DRBG_CTR_TDES_CONTEXT;

/*********************************************************************
*
*       FORTUNA-AES
*/
typedef struct {
  U32                     GenByteCnt;                         // Number of bytes generated since last reseed
  U32                     ReseedCnt;                          // Total number of reseeds
  CRYPTO_AES_CONTEXT      AESContext;
  U8                      aKey      [CRYPTO_AES256_KEY_SIZE];
  U8                      aCTR      [CRYPTO_AES_BLOCK_SIZE];
  U8                      aNextPool [CRYPTO_CONFIG_FORTUNA_SOURCE_MAX];
  CRYPTO_SHA256_CONTEXT   aPool     [CRYPTO_CONFIG_FORTUNA_POOL_MAX];
} CRYPTO_FORTUNA_CONTEXT;


/*********************************************************************
*
*       Multiprecision integer, legacy
*/

#if CRYPTO_MPI_BITS_PER_LIMB == 32
  typedef U32 CRYPTO_MPI_LIMB;
  typedef U64 CRYPTO_MPI_2LIMB;
  #define CRYPTO_MPI_LIMB_MAX 0xFFFFFFFFU
  #define __MPI_LITERAL_DATA(U, V, W, X)   /*lint -e(845)*/ ((U)+(V)*0x100U+(W)*0x10000U+(X)*0x1000000U) /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA4(U, V, W, X)  /*lint -e(845)*/ ((U)+(V)*0x100U+(W)*0x10000U+(X)*0x1000000U) /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA3(U, V, W)     /*lint -e(845)*/ ((U)+(V)*0x100U+(W)*0x10000U)                /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA2(U, V)        /*lint -e(845)*/ ((U)+(V)*0x100U)                             /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA1(U)           /*lint -e(845)*/ ((U))                                        /*Some additions will always be zero, we do not care*/
#elif CRYPTO_MPI_BITS_PER_LIMB == 16
  typedef U16 CRYPTO_MPI_LIMB;
  typedef U32 CRYPTO_MPI_2LIMB;
  #define CRYPTO_MPI_LIMB_MAX 0xFFFFU
  #define __MPI_LITERAL_DATA(U, V, W, X)  /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/ (W)+(X)*0x100U  /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA4(U, V, W, X)  /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/ (W)+(X)*0x100U  /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA3(U, V, W)     /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/ (W)             /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA2(U, V)        /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/                 /*Some additions will always be zero, we do not care*/
  #define __MPI_LITERAL_DATA1(U)           /*lint -e(845)*/ ((U)),            /*lint -e(845)*/                 /*Some additions will always be zero, we do not care*/
#elif CRYPTO_MPI_BITS_PER_LIMB == 8
  typedef U8 CRYPTO_MPI_LIMB;
  typedef U16 CRYPTO_MPI_2LIMB;
  #define CRYPTO_MPI_LIMB_MAX 0xFFU
  #define __MPI_LITERAL_DATA(U, V, W, X)  (U), (V), (W), (X)
  #define __MPI_LITERAL_DATA4(U, V, W, X)  (U), (V), (W), (X)
  #define __MPI_LITERAL_DATA3(U, V, W)     (U), (V), (W)
  #define __MPI_LITERAL_DATA2(U, V)        (U), (V)
  #define __MPI_LITERAL_DATA1(U)           (U)
#else
  // Only 8-bit, 16-bit, and 32-bit limbs supported.
  #error Invalid configuration for CRYPTO_MPI_BITS_PER_LIMB: Check your configuration!
#endif

#define __MPI_LITERAL_BEGIN(SC, NAME) \
static const CRYPTO_MPI_LIMB NAME##_aLimbs[] = {

#define __MPI_LITERAL_END(SC, NAME, N)          \
};                                              \
                                                \
SC const CRYPTO_MPI NAME = {                    \
  NULL,                                         \
  (CRYPTO_MPI_LIMB *)NAME##_aLimbs,             \
  CRYPTO_MPI_LIMBS_REQUIRED(N),  /* AllocCnt */ \
  CRYPTO_MPI_LIMBS_REQUIRED(N),  /* LimbCnt  */ \
  0,                             /* Negative */ \
  1                              /* ReadOnly */ \
};

#define CRYPTO_MPI_BYTES_PER_LIMB       (CRYPTO_MPI_BITS_PER_LIMB / 8)
#define CRYPTO_MPI_LIMBS_REQUIRED(BITS) (((BITS) + CRYPTO_MPI_BITS_PER_LIMB - 1) / CRYPTO_MPI_BITS_PER_LIMB)
#define CRYPTO_MPI_BYTES_REQUIRED(BITS) (CRYPTO_MPI_LIMBS_REQUIRED(BITS) * CRYPTO_MPI_BYTES_PER_LIMB)
#define CRYPTO_COUNTOF(ARRAY)           (sizeof(ARRAY) / sizeof(ARRAY[0]))

/*********************************************************************
*
*       Multiprecision integer, API
*/

#define CRYPTO_MPI_INIT_RO(NAME) \
  NULL,                                     \
  (CRYPTO_MPI_LIMB *)NAME,                  \
  CRYPTO_COUNTOF(NAME),      /* AllocCnt */ \
  CRYPTO_COUNTOF(NAME),      /* LimbCnt  */ \
  0,                         /* Negative */ \
  1                          /* ReadOnly */ \

#define CRYPTO_MPI_INIT_RO_ZERO \
  NULL,                  \
  NULL,                  \
  0,      /* AllocCnt */ \
  0,      /* LimbCnt  */ \
  0,      /* Negative */ \
  1       /* ReadOnly */ \

#define CRYPTO_MPI_BEGIN(SC, NAME) \
  static const CRYPTO_MPI_LIMB NAME##_aLimbs[] = {

#define CRYPTO_MPI_END(SC, NAME)                                      \
};                                                                    \
                                                                      \
SC const CRYPTO_MPI NAME = {                                          \
  NULL,                                                               \
  (CRYPTO_MPI_LIMB *)NAME##_aLimbs,                                   \
  CRYPTO_MPI_LIMBS_REQUIRED(8*sizeof(NAME##_aLimbs)),  /* AllocCnt */ \
  CRYPTO_MPI_LIMBS_REQUIRED(8*sizeof(NAME##_aLimbs)),  /* LimbCnt  */ \
  0,                                                   /* Negative */ \
  1                                                    /* ReadOnly */ \
};

#if CRYPTO_MPI_BITS_PER_LIMB == 32
  #define CRYPTO_MPI_LIMB_DATA4(U, V, W, X)  /*lint -e(845)*/ ((U)+(V)*0x100U+(W)*0x10000U+(X)*0x1000000U) /*Some additions will always be zero, we do not care*/
  #define CRYPTO_MPI_LIMB_DATA3(U, V, W)     /*lint -e(845)*/ ((U)+(V)*0x100U+(W)*0x10000U)                /*Some additions will always be zero, we do not care*/
  #define CRYPTO_MPI_LIMB_DATA2(U, V)        /*lint -e(845)*/ ((U)+(V)*0x100U)                             /*Some additions will always be zero, we do not care*/
  #define CRYPTO_MPI_LIMB_DATA1(U)           /*lint -e(845)*/ ((U))                                        /*Some additions will always be zero, we do not care*/
#elif CRYPTO_MPI_BITS_PER_LIMB == 16
  #define CRYPTO_MPI_LIMB_DATA4(U, V, W, X)  /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/ (W)+(X)*0x100U  /*Some additions will always be zero, we do not care*/
  #define CRYPTO_MPI_LIMB_DATA3(U, V, W)     /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/ (W)             /*Some additions will always be zero, we do not care*/
  #define CRYPTO_MPI_LIMB_DATA2(U, V)        /*lint -e(845)*/ ((U)+(V)*0x100U), /*lint -e(845)*/                 /*Some additions will always be zero, we do not care*/
  #define CRYPTO_MPI_LIMB_DATA1(U)           /*lint -e(845)*/ ((U)),            /*lint -e(845)*/                 /*Some additions will always be zero, we do not care*/
#elif CRYPTO_MPI_BITS_PER_LIMB == 8
  #define CRYPTO_MPI_LIMB_DATA4(U, V, W, X)  (U), (V), (W), (X)
  #define CRYPTO_MPI_LIMB_DATA3(U, V, W)     (U), (V), (W)
  #define CRYPTO_MPI_LIMB_DATA2(U, V)        (U), (V)
  #define CRYPTO_MPI_LIMB_DATA1(U)           (U)
#else
  // Only 8-bit, 16-bit, and 32-bit limbs supported.
  #error Invalid configuration for CRYPTO_MPI_BITS_PER_LIMB: Check your configuration!
#endif

typedef struct {
  CRYPTO_MEM_CONTEXT * pStore;     // Pointer to memory allocation context
  CRYPTO_MPI_LIMB    * aLimbs;     // Dynamic array of limbs: aLimbs[AllocCount].
  unsigned             AllocCnt;   // Number of limbs allocated
  unsigned             LimbCnt;    // Number of limbs with valid data
  unsigned             Negative;   // Sign of value
  unsigned             ReadOnly;   // Nonzero indicates this MPI is in ROM
} CRYPTO_MPI;

/*********************************************************************
*
*       Modular exponentiation
*/
typedef int (*CRYPTO_MPI_MODEXP_FUNC)(CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Elliptic curves
*/

typedef int CRYPTO_EC_REDUCE_FUNC(CRYPTO_MPI *pProduct, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       CRYPTO_EC_POINT
*
*  Description
*    Elliptic curve point.
*
*  Additional information
*    This type is used for regular and Edwards curves.
*/
typedef struct {
  CRYPTO_MPI X;  // X coordinate.
  CRYPTO_MPI Y;  // Y coordinate.
  CRYPTO_MPI Z;  // Nonzero when point is projective.
  CRYPTO_MPI T;  // Used by Edwards curves.
} CRYPTO_EC_POINT;

/*********************************************************************
*
*       CRYPTO_EC_CURVE
*
*  Description
*    Elliptic curve.
*
*  Additional information
*    Describes the curve y^2 = x^3 + Ax + B (mod P)
*/
typedef struct {
  //
  // Instance data.
  //
  CRYPTO_MPI      P;                // Field prime
  CRYPTO_MPI      A;                // A coefficient
  CRYPTO_MPI      B;                // B coefficient
  CRYPTO_EC_POINT G;                // Generator
  CRYPTO_MPI      Q;                // Order of curve
//CRYPTO_MPI      H;                // cofactor ... don't use this at all
  U8              OptimizedA;       // Nonzero if A == -3 (mod P)
  char            aCurveName[16];   // Standardized curve name
  const U8      * pOID;             // Pointer to curve OID octet string
  unsigned        OIDLen;           // Octet length of the OID octet string
  //
  // Methods.
  //
  CRYPTO_EC_REDUCE_FUNC *pfReduce;  // Specialized reduction function
} CRYPTO_EC_CURVE;

/*********************************************************************
*
*       CRYPTO_HASH_ALGORITHM_ID
*
*  Description
*    Hash algorithm ID.
*
*  See also
*    [TLS1v2 http://tools.ietf.org/html/rfc5246#section-7.4.1.4.1] s. 7.4.1.4.1. SignatureAlgorithm
*/
typedef enum {
  CRYPTO_HASH_ALGORITHM_ID_NULL,
  CRYPTO_HASH_ALGORITHM_ID_MD5,
  CRYPTO_HASH_ALGORITHM_ID_SHA,
  CRYPTO_HASH_ALGORITHM_ID_SHA224,
  CRYPTO_HASH_ALGORITHM_ID_SHA256,
  CRYPTO_HASH_ALGORITHM_ID_SHA384,
  CRYPTO_HASH_ALGORITHM_ID_SHA512,
  CRYPTO_HASH_ALGORITHM_ID__MAX,
  CRYPTO_HASH_ALGORITHM_ID_INVALID = CRYPTO_HASH_ALGORITHM_ID__MAX
} CRYPTO_HASH_ALGORITHM_ID;

/*********************************************************************
*
*       CRYPTO_SIGNATURE_ALGORITHM_ID
*
*  Description
*    Signature algorithm which is the PK algorithm and the hash.
*
*  See also
*    [TLS1v2 http://tools.ietf.org/html/rfc5246#section-7.4.1.4.1] s. 7.4.1.4.1. SignatureAlgorithm
*/
typedef enum {
  CRYPTO_X509_PK_ALGORITHM_ID_ANONYMOUS,
  CRYPTO_X509_PK_ALGORITHM_ID_RSA,
  CRYPTO_X509_PK_ALGORITHM_ID_DSA,
  CRYPTO_X509_PK_ALGORITHM_ID_ECDSA,
  CRYPTO_X509_PK_ALGORITHM_ID__MAX
} CRYPTO_X509_PK_ALGORITHM_ID;

#define __CRYPTO_MK_SIGNATURE_ALG(HASH, ENC) ((unsigned)(HASH)*0x100 + (unsigned)(ENC))

/*********************************************************************
*
*       CRYPTO_SIGNATURE_SCHEME_ID
*
*  Description
*    Signature algorithm which is the PK algorithm and the hash.
*
*  See also
*    [TLS1v2 http://tools.ietf.org/html/rfc5246#section-7.4.1.4.1] s. 7.4.1.4.1. SignatureAndHashAlgorithm
*/
typedef enum {
  /* RSA */
  CRYPTO_SIGNATURE_MD5_WITH_RSA_ENCRYPTION    = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_MD5,    CRYPTO_X509_PK_ALGORITHM_ID_RSA),
  CRYPTO_SIGNATURE_SHA_WITH_RSA_ENCRYPTION    = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA,    CRYPTO_X509_PK_ALGORITHM_ID_RSA),
  CRYPTO_SIGNATURE_SHA224_WITH_RSA_ENCRYPTION = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA224, CRYPTO_X509_PK_ALGORITHM_ID_RSA),
  CRYPTO_SIGNATURE_SHA256_WITH_RSA_ENCRYPTION = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA256, CRYPTO_X509_PK_ALGORITHM_ID_RSA),
  CRYPTO_SIGNATURE_SHA384_WITH_RSA_ENCRYPTION = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA384, CRYPTO_X509_PK_ALGORITHM_ID_RSA),
  CRYPTO_SIGNATURE_SHA512_WITH_RSA_ENCRYPTION = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA512, CRYPTO_X509_PK_ALGORITHM_ID_RSA),
  /* DSA */
  CRYPTO_SIGNATURE_SHA_WITH_DSA               = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA,    CRYPTO_X509_PK_ALGORITHM_ID_DSA),
  CRYPTO_SIGNATURE_SHA224_WITH_DSA            = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA224, CRYPTO_X509_PK_ALGORITHM_ID_DSA),
  CRYPTO_SIGNATURE_SHA256_WITH_DSA            = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA256, CRYPTO_X509_PK_ALGORITHM_ID_DSA),
  /* ECDSA */
  CRYPTO_SIGNATURE_SHA_WITH_ECDSA             = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA,    CRYPTO_X509_PK_ALGORITHM_ID_ECDSA),
  CRYPTO_SIGNATURE_SHA224_WITH_ECDSA          = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA224, CRYPTO_X509_PK_ALGORITHM_ID_ECDSA),
  CRYPTO_SIGNATURE_SHA256_WITH_ECDSA          = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA256, CRYPTO_X509_PK_ALGORITHM_ID_ECDSA),
  CRYPTO_SIGNATURE_SHA384_WITH_ECDSA          = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA384, CRYPTO_X509_PK_ALGORITHM_ID_ECDSA),
  CRYPTO_SIGNATURE_SHA512_WITH_ECDSA          = __CRYPTO_MK_SIGNATURE_ALG(CRYPTO_HASH_ALGORITHM_ID_SHA512, CRYPTO_X509_PK_ALGORITHM_ID_ECDSA),
  //
  CRYPTO_SIGNATURE_SCHEME_INVALID = 0xFFFF
} CRYPTO_SIGNATURE_SCHEME_ID;

/*********************************************************************
*
*       CRYPTO_X509_NAME_DATA
*
*  Description
*    Name data parsed from a Distinguished Name.
*/
typedef struct {
  CRYPTO_TLV DistinguishedName;         // Entire DistinguishedName
  CRYPTO_TLV CountryName;               // Country Name
  CRYPTO_TLV StateOrProvinceName;       // State or province name
  CRYPTO_TLV LocalityName;              // Locality name
  CRYPTO_TLV OrganizationName;          // Organization name
  CRYPTO_TLV OrganizationalUnitName;    // Organizational unit name
  CRYPTO_TLV CommonName;                // Common name
} CRYPTO_X509_NAME_DATA;

/*********************************************************************
*
*       FIPS186 provable random prime generation API
*/
typedef struct {
  unsigned DigestLen;
  int (*pfGenRandom)(CRYPTO_MPI *pOutput, unsigned N,        U8 *pSeed, unsigned SeedLen, CRYPTO_MEM_CONTEXT *pMem);
  int (*pfGenPrime) (CRYPTO_MPI *pPrime,  unsigned PrimeLen, U8 *pSeed, unsigned SeedLen, CRYPTO_MEM_CONTEXT *pMem);
} CRYPTO_FIPS186_PRIMEGEN_API;

/*********************************************************************
*
*       CRYPTO_RSA_PUBLIC_KEY
*
*  Description
*    RSA public key data.
*/
typedef struct {
  CRYPTO_MPI N;   // Public modulus, pq
  CRYPTO_MPI E;   // Public encryption exponent
} CRYPTO_RSA_PUBLIC_KEY;


/*********************************************************************
*
*       CRYPTO_RSA_PRIVATE_KEY
*
*  Description
*    RSA private key data.
*/
typedef struct {
  CRYPTO_MPI D;          // Decryption exponent (non-CRT form).
  CRYPTO_MPI P;          // Factor p of the public modulus.
  CRYPTO_MPI Q;          // Factor q of the public modulus.
  CRYPTO_MPI DP;         // d mod (p-1)
  CRYPTO_MPI DQ;         // d mod (q-1)
  CRYPTO_MPI QInv;       // q^(-1) mod p, i.e. ModInv(q, p)
  CRYPTO_MPI N;          // Public modulus (non-CRT form).
  CRYPTO_MPI E;          // Encryption exponent.
} CRYPTO_RSA_PRIVATE_KEY;

/*********************************************************************
*
*       DSA
*/
typedef struct {
  CRYPTO_MPI P;
  CRYPTO_MPI Q;
  CRYPTO_MPI G;
} CRYPTO_DSA_DOMAIN_PARAMS;

typedef struct {
  CRYPTO_MPI X;
} CRYPTO_DSA_PRIVATE_KEY;

typedef struct {
  CRYPTO_MPI Y;
} CRYPTO_DSA_PUBLIC_KEY;

// This signature structure covers DSA, ECDSA, and EdDSA signatures.
typedef struct {
  CRYPTO_MPI R;
  CRYPTO_MPI S;
} CRYPTO_xDSA_SIGNATURE;

typedef CRYPTO_xDSA_SIGNATURE CRYPTO_DSA_SIGNATURE;
typedef CRYPTO_xDSA_SIGNATURE CRYPTO_ECDSA_SIGNATURE;
typedef CRYPTO_xDSA_SIGNATURE CRYPTO_EdDSA_SIGNATURE;

/*********************************************************************
*
*       ECDSA
*/
typedef struct {
  CRYPTO_MPI              X;
  const CRYPTO_EC_CURVE * pCurve;
} CRYPTO_ECDH_PRIVATE_KEY;

typedef struct {
  CRYPTO_EC_POINT         Y;
  const CRYPTO_EC_CURVE * pCurve;
} CRYPTO_ECDH_PUBLIC_KEY;

typedef CRYPTO_ECDH_PRIVATE_KEY CRYPTO_ECDSA_PRIVATE_KEY;
typedef CRYPTO_ECDH_PUBLIC_KEY  CRYPTO_ECDSA_PUBLIC_KEY;

/*********************************************************************
*
*       EdDSA
*/
typedef struct {
  CRYPTO_MPI SK;    // Secret key
  CRYPTO_MPI PK;    // Public key
} CRYPTO_EdDSA_PRIVATE_KEY;

typedef struct {
  CRYPTO_MPI Y;
} CRYPTO_EdDSA_PUBLIC_KEY;

/*********************************************************************
*
*       CRYPTO_ECDH_KA_CONTEXT
*
*  Description
*    ECDH key agreement data.
*/
typedef struct {
  CRYPTO_MPI P;      // Field modulus
  CRYPTO_MPI G;      // Generator
  CRYPTO_MPI X;      // Secret value X
  CRYPTO_MPI Y;      // Public value Y, G^X
  CRYPTO_MPI K;      // Agreed key
} CRYPTO_DH_KA_CONTEXT;

/*********************************************************************
*
*       CRYPTO_ECDH_KA_CONTEXT
*
*  Description
*    ECDH key agreement data.
*/
typedef struct {
  CRYPTO_ECDSA_PUBLIC_KEY  Public;     // Our public key
  CRYPTO_ECDSA_PRIVATE_KEY Private;    // Our private key
  CRYPTO_EC_POINT          PeerPublic; // Peer's public key, curve is implicit.
  CRYPTO_EC_POINT          K;          // Agreed key; the X coordinate is all we require.
} CRYPTO_ECDH_KA_CONTEXT;

/*********************************************************************
*
*       CMS
*/

typedef struct {
  U8       aNonce[16];
  unsigned NonceLen;
  unsigned ICVLen;
} CRYPTO_CMS_GCM_CCM_PARAMETERS;

/*********************************************************************
*
*       X.509
*/
typedef struct {
  CRYPTO_TLV                  SubjectPKParameters;  // Raw
  CRYPTO_TLV                  SubjectPK;            // Raw
  CRYPTO_X509_PK_ALGORITHM_ID Algorithm;
  CRYPTO_RSA_PUBLIC_KEY       RSAPublicKey;
  CRYPTO_DSA_DOMAIN_PARAMS    DSADomainParams;
  CRYPTO_DSA_PUBLIC_KEY       DSAPublicKey;
  CRYPTO_ECDSA_PUBLIC_KEY     ECDSAPublicKey;
} CRYPTO_X509_PUBLIC_KEY_INFO;

typedef struct {
  CRYPTO_TLV                  Value;                // Entire certificate.
  CRYPTO_TLV                  TBSCertificate;       // To-be-signed certificate.
  long                        Version;              // Certificate version.
  CRYPTO_TLV                  Serial;               // Serial number.
  U64                         NotBefore;            // Parsed certificate validity period.
  U64                         NotAfter;             // ...ditto
  CRYPTO_TLV                  SignatureOID1;        // Signatures.
  CRYPTO_TLV                  SignatureOID2;        // ...ditto
  CRYPTO_X509_NAME_DATA       Issuer;               // Issuer distinguished name.
  CRYPTO_TLV                  IssuerUniqueID;       // ...ditto
  CRYPTO_X509_NAME_DATA       Subject;              // Subject distinguished name.
  CRYPTO_TLV                  SubjectUniqueID;      // ...ditto
  CRYPTO_X509_PUBLIC_KEY_INFO PublicKeyInfo;        // Parsed public key information
  CRYPTO_TLV                  Extensions;           // Certificate extensions.
  CRYPTO_TLV                  Signature;            // Signature
  unsigned                    KeyUsage;             // Key usage from id-ce-keyUsage extension (0 if absent)
  unsigned                    ExtKeyUsage;          // Extended key usage from id-ce-extKeyUsage extension (0 if absent)
  U8                          CA;                   // CA boolean id-ce-basicConstraints (0 if absent)
  long                        PathLenConstraint;    // Path length constraint from id-ce-basicConstraints (1000 if absent)
} CRYPTO_X509_CERTIFICATE_DATA;

/*********************************************************************
*
*       CRTPTO_X509_VALIDATION_CONTEXT
*
*  Description
*    Certificate chain validation context.
*
*  Additional information
*    All fields private.
*/
typedef struct {
  CRYPTO_X509_CERTIFICATE_DATA   CurrentCert;
  unsigned                       Length;
  U64                            Date;
  CRYPTO_MEM_CONTEXT           * pAllocator;
} CRYPTO_X509_VALIDATION_CONTEXT;

/*********************************************************************
*
*       CRYPTO_X509_EXTENSION_PARSER_API
*
*  Description
*    Parser for certificate extensions.
*/
typedef struct {
  U8          Critical;
  CRYPTO_TLV  OID;
  CRYPTO_TLV  Value;
} CRYPTO_X509_EXTENSION_DATA;

typedef int CRYPTO_X509_EXTENSION_CALLBACK_FUNC(CRYPTO_X509_CERTIFICATE_DATA *pCertData, CRYPTO_X509_EXTENSION_DATA *pExtData, void *pCallbackContext);

/*********************************************************************
*
*       File types
*/

typedef enum {
  CRYPTO_IO_CONTENT_UNKNOWN,                // Unknown or invalid content
  CRYPTO_IO_CONTENT_DSA_PRIVATE_KEY,        // Contains a DSA private key in SEGGER format.
  CRYPTO_IO_CONTENT_DSA_PUBLIC_KEY,         // Contains a DSA public key in SEGGER format.
  CRYPTO_IO_CONTENT_PEM_DSA_PRIVATE_KEY,    // Contains a DSA private key in PEM format.
  CRYPTO_IO_CONTENT_PEM_DSA_PUBLIC_KEY,     // Contains a DSA public key in PEM format.
  CRYPTO_IO_CONTENT_EC_PRIVATE_KEY,         // Contains an EC private key in SEGGER format.
  CRYPTO_IO_CONTENT_EC_PUBLIC_KEY,          // Contains an EC public key in SEGGER format.
  CRYPTO_IO_CONTENT_ED25519_PRIVATE_KEY,    // Contains an Ed25519 private key in SEGGER format.
  CRYPTO_IO_CONTENT_ED25519_PUBLIC_KEY,     // Contains an Ed25519 public key in SEGGER format.
  CRYPTO_IO_CONTENT_PEM_EC_PRIVATE_KEY,     // Contains an EC private key in PEM format.
  CRYPTO_IO_CONTENT_PEM_EC_PUBLIC_KEY,      // Contains an EC public key in PEM format.
  CRYPTO_IO_CONTENT_RSA_PRIVATE_KEY,        // Contains an RSA private key in SEGGER format.
  CRYPTO_IO_CONTENT_RSA_PUBLIC_KEY,         // Contains an RSA public key in SEGGER format.
  CRYPTO_IO_CONTENT_PEM_RSA_PRIVATE_KEY,    // Contains an RSA private key in PEM format.
  CRYPTO_IO_CONTENT_PEM_PUBLIC_KEY,         // Contains an {RSA,DSA,ECDSA} public key in PEM format.
  CRYPTO_IO_CONTENT_DSA_SIGNATURE,          // Contains a DSA signature in SEGGER format.
  CRYPTO_IO_CONTENT_ECDSA_SIGNATURE,        // Contains an ECDSA signature in SEGGER format.
  CRYPTO_IO_CONTENT_RSA_SIGNATURE,          // Contains an RSA signature in SEGGER format.
  CRYPTO_IO_CONTENT_PEM_CERTIFICATE         // Contains a certificate in PEM format.
} CRYPTO_IO_CONTENT_TYPE;


/*********************************************************************
*
*       Self-test API
*/
typedef struct {
  void (*pfBegin)    (const char *sText);
  void (*pfProgress) (void);
  void (*pfFail)     (const char *sText);
  void (*pfEnd)      (void);
} CRYPTO_SELFTEST_API;

/*********************************************************************
*
*       Public const data
*
**********************************************************************
*/

/*********************************************************************
*
*       NIST prime curves.
*/
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp192r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp192k1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp224r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp224k1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp256r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp256k1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp384r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_secp521r1;

/*********************************************************************
*
*       Synonyms.
*/
#define CRYPTO_EC_CURVE_P192  CRYPTO_EC_CURVE_secp192r1
#define CRYPTO_EC_CURVE_P224  CRYPTO_EC_CURVE_secp224r1
#define CRYPTO_EC_CURVE_P256  CRYPTO_EC_CURVE_secp256r1
#define CRYPTO_EC_CURVE_P384  CRYPTO_EC_CURVE_secp384r1
#define CRYPTO_EC_CURVE_P521  CRYPTO_EC_CURVE_secp521r1

/*********************************************************************
*
*       Brainpool prime curves.
*/
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP160r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP160t1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP192r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP192t1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP224r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP224t1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP256r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP256t1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP320r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP320t1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP384r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP384t1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP512r1;
extern const CRYPTO_EC_CURVE CRYPTO_EC_CURVE_brainpoolP512t1;

/*********************************************************************
*
*       IKE DH MODP primes (all generators are 2).
*/
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_768_P;     // Group 1   [RFC4306]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_1024_P;    // Group 2   [RFC4306]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_1536_P;    // Group 5   [RFC3526]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_2048_P;    // Group 14  [RFC3526]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_3072_P;    // Group 15  [RFC3526]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_4096_P;    // Group 16  [RFC3526]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_6144_P;    // Group 17  [RFC3526]
extern const CRYPTO_MPI CRYPTO_DH_IKE_MODP_8192_P;    // Group 18  [RFC3526]

/*********************************************************************
*
*       IETF DH MODP primes (all generators are 2).
*/
extern const CRYPTO_MPI CRYPTO_DH_MODP_1024_160_P;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_1024_160_G;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_1024_160_Q;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_2048_224_P;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_2048_224_G;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_2048_224_Q;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_2048_256_P;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_2048_256_G;    // [RFC5114]
extern const CRYPTO_MPI CRYPTO_DH_MODP_2048_256_Q;    // [RFC5114]

/*********************************************************************
*
*       RNG API implementations in hardware and software
*/
extern const CRYPTO_RNG_API CRYPTO_RNG_HW_Kinetis_RNGA;            // Kinetis RNGA as source
extern const CRYPTO_RNG_API CRYPTO_RNG_HW_STM32_RNG;               // STM32 RNG as source
extern const CRYPTO_RNG_API CRYPTO_RNG_HW_RT10xx_TRNG;             // RT10xx TRNG as source
extern const CRYPTO_RNG_API CRYPTO_RNG_HW_SAML_TRNG;               // SAML11 TRNG as source
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA1;             // Hash_DRBG using hardware entropy source (use CRYPTO_RNG_InstallEx)
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA224;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA256;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA384;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA512;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA512_224;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HASH_SHA512_256;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA1;             // HMAC_DRBG using hardware entropy source (use CRYPTO_RNG_InstallEx)
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA224;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA256;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA384;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA512;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA512_224;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_HMAC_SHA512_256;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_CTR_TDES;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_CTR_AES128;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_CTR_AES192;
extern const CRYPTO_RNG_API CRYPTO_RNG_DRBG_CTR_AES256;

/*********************************************************************
*
*       HASH API implementations in software and with hardware-assist
*/
extern const CRYPTO_HASH_API CRYPTO_HASH_MD5;                          // MD5 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_MD5_SW;                       // MD5 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_MD5_HW_Kinetis_CAU;           // MD5 using NXP Kinetis CAU
extern const CRYPTO_HASH_API CRYPTO_HASH_MD5_HW_STM32_HASH;            // MD5 using STM32F/STM32L HASH accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA1;                         // SHA-1 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA1_SW;                      // SHA-1 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA1_HW_Kinetis_CAU;          // SHA-1 using NXP Kinetis CAU accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA1_HW_RT10xx_DCP;           // SHA-1 using NXP RT 10xx DCP accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA1_HW_EFM32_CRYPTO;         // SHA-1 using NXP EFM32 CRYPTO accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA1_HW_STM32_HASH;           // SHA-1 using STM32 HASH accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA224;                       // SHA-224 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA224_SW;                    // SHA-224 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA224_HW_Kinetis_CAU;        // SHA-224 using NXP Kinetis CAU accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA224_HW_SAML_CRYA;          // SHA-224 using SAML11 CRYA accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA224_HW_STM32_HASH;         // SHA-224 using STM32F/STM32L HASH accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA256;                       // SHA-256 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA256_SW;                    // SHA-256 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA256_HW_RT10xx_DCP;         // SHA-256 using NXP RT 10xx DCP accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA256_HW_Kinetis_CAU;        // SHA-256 using NXP Kinetis CAU accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA256_HW_SAML_CRYA;          // SHA-256 using SAML11 CRYA accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA256_HW_STM32_HASH;         // SHA-256 using STM32 HASH accelerator
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA384;                       // SHA-384 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA512;                       // SHA-512 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA512_SW;                    // SHA-512 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA512_224;                   // SHA-512/224 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA512_256;                   // SHA-512/256 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_224;                     // SHA3-224 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_224_SW;                  // SHA3-224 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_256;                     // SHA3-256 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_256_SW;                  // SHA3-256 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_384;                     // SHA3-384 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_384_SW;                  // SHA3-384 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_512;                     // SHA3-512 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SHA3_512_SW;                  // SHA3-512 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_SM3;                          // SM3 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_SM3_SW;                       // SM3 in software
extern const CRYPTO_HASH_API CRYPTO_HASH_RIPEMD160;                    // RIPEMD160 in hardware (if available) else software
extern const CRYPTO_HASH_API CRYPTO_HASH_RIPEMD160_SW;                 // RIPEMD160 in software

/*********************************************************************
*
*       MAC API implementations in software and with hardware-assist
*/
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_MD5;                       // HMAC-MD5 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA1;                      // HMAC-SHA-1 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA224;                    // HMAC-SHA-225 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA256;                    // HMAC-SHA-256 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA384;                    // HMAC-SHA-384 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA512;                    // HMAC-SHA-512 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA512_224;                // HMAC-SHA-512/224 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA512_256;                // HMAC-SHA-512/256 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA3_224;                  // HMAC-SHA3-225 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA3_256;                  // HMAC-SHA3-256 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA3_384;                  // HMAC-SHA3-384 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SHA3_512;                  // HMAC-SHA3-512 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_SM3;                       // HMAC-SM3 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_HMAC_RIPEMD160;                 // HMAC-RIPEMD160 in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_AES;                       // CMAC-AES in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_TDES;                      // CMAC-TDES in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_ARIA;                      // CMAC-ARIA in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_SEED;                      // CMAC-SEED in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_TWOFISH;                   // CMAC-Twofish in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_CAMELLIA;                  // CMAC-Camellia in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_BLOWFISH;                  // CMAC-Blowfish in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_CMAC_CAST;                      // CMAC-Cast in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_GMAC_AES;                       // GMAC-AES in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_GMAC_ARIA;                      // GMAC-ARIA in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_GMAC_SEED;                      // GMAC-SEED in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_GMAC_CAMELLIA;                  // GMAC-Camellia in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_GMAC_TWOFISH;                   // GMAC-Twofish in hardware (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_POLY1305_AES;                   // Poly1305-AES in software (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_POLY1305_ARIA;                  // Poly1305-ARIA in software (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_POLY1305_SEED;                  // Poly1305-SEED in software (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_POLY1305_CAMELLIA;              // Poly1305-Camellia in software (if available) else software
extern const CRYPTO_MAC_API CRYPTO_MAC_POLY1305_TWOFISH;               // Poly1305-Twofish in software (if available) else software

/*********************************************************************
*
*       CIPHER API implementations in software and with hardware-assist
*/
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES;                      // AES in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_SW;                   // AES in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_Intel_AESNI;       // AES using Intel AES-NI for x86
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_Kinetis_CAU;       // AES using NXP Kinetis CAU, SEGGER acceleration
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_Kinetis_libmmcau;  // AES using NXP libmmcau function calls
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_RT10xx_DCP;        // AES using NXP iMX RT10xx DCP accelerator
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_SAML_CRYA;         // AES using SAML CRYA accelerator
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_STM32_CRYP;        // AES using STM32F CRYP accelerator
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_STM32_AES;         // AES using STM32L AES accelerator
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_AES_HW_LPC_ROM;           // AES using LPC AES accelerator through ROM API
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_ARIA;                     // ARIA in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_ARIA_SW;                  // ARIA in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_SEED;                     // SEED in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_SEED_SW;                  // SEED in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_CAMELLIA;                 // Camellia in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_CAMELLIA_SW;              // Camellia in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_BLOWFISH;                 // Blowfish in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_BLOWFISH_SW;              // Blowfish in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TWOFISH;                  // Twofish in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TWOFISH_SW;               // Twofish in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_CAST;                     // CAST-128 in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_CAST_SW;                  // CAST-128 in software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TDES;                     // 3DES in hardware (if available) else software.
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TDES_SW;                  // 3DES "in software" (uses DES hardware if available)
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TDES_HW_Kinetis_CAU;      // 3DES using NXP Kinetis CAU, SEGGER acceleration
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TDES_HW_Kinetis_libmmcau; // 3DES using NXP libmmcau function calls
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_TDES_HW_STM32_CRYP;      // 3DES using STM32F7 CRYP accelerator
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_CHACHA20;                 // ChaCha20 in hardware (if available) else software
extern const CRYPTO_CIPHER_API CRYPTO_CIPHER_CHACHA20_SW;              // ChaCha20 in software

/*********************************************************************
*
*       Legacy names
*/
#define CRYPTO_CIPHER_AES_HW_STM32_CRYP2  CRYPTO_CIPHER_AES_HW_STM32_CRYP
#define CRYPTO_CIPHER_TDES_HW_STM32_CRYP2 CRYPTO_CIPHER_TDES_HW_STM32_CRYP

/*********************************************************************
*
*       FIPS186_PRIMEGEN API implementations
*/
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA1;       // Prime generation using SHA-1 as the hash algorithm
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA224;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA256;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA384;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA512;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA512_224;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA512_256;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA3_224;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA3_256;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA3_384;
extern const CRYPTO_FIPS186_PRIMEGEN_API CRYPTO_FIPS186_PRIMEGEN_SHA3_512;

/*********************************************************************
*
*       API functions
*
**********************************************************************
*/

/*********************************************************************
*
*       Write buffer functions which safely buffer outgoing data
*/
void     CRYPTO_BUFFER_Init                         (CRYPTO_BUFFER *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_BUFFER_Reset                        (CRYPTO_BUFFER *pSelf);
void     CRYPTO_BUFFER_Wr                           (CRYPTO_BUFFER *pSelf, const void *pData, unsigned DataLen);
void     CRYPTO_BUFFER_WrStr                        (CRYPTO_BUFFER *pSelf, const char *sText);
void     CRYPTO_BUFFER_WrStrLn                      (CRYPTO_BUFFER *pSelf, const char *sText);
void     CRYPTO_BUFFER_WrLogical                    (CRYPTO_BUFFER *pSelf, CRYPTO_LOGIC_OP Operation, const U8 *pData, unsigned DataLen);
void     CRYPTO_BUFFER_WrU8                         (CRYPTO_BUFFER *pSelf, U8  Data);
void     CRYPTO_BUFFER_WrU16LE                      (CRYPTO_BUFFER *pSelf, U16 Data);
void     CRYPTO_BUFFER_WrU24LE                      (CRYPTO_BUFFER *pSelf, U32 Data);
void     CRYPTO_BUFFER_WrU32LE                      (CRYPTO_BUFFER *pSelf, U32 Data);
void     CRYPTO_BUFFER_WrU64LE                      (CRYPTO_BUFFER *pSelf, U64 Data);
void     CRYPTO_BUFFER_WrU16BE                      (CRYPTO_BUFFER *pSelf, U16 Data);
void     CRYPTO_BUFFER_WrU24BE                      (CRYPTO_BUFFER *pSelf, U32 Data);
void     CRYPTO_BUFFER_WrU32BE                      (CRYPTO_BUFFER *pSelf, U32 Data);
void     CRYPTO_BUFFER_WrU64BE                      (CRYPTO_BUFFER *pSelf, U64 Data);
void     CRYPTO_BUFFER_WrCntU32BE                   (CRYPTO_BUFFER *pSelf, const void *pData, U32 DataLen);
void     CRYPTO_BUFFER_WrMultiU8                    (CRYPTO_BUFFER *pSelf, U8 Data, unsigned Count);
void     CRYPTO_BUFFER_MPI_WrCounted                (CRYPTO_BUFFER *pSelf, const CRYPTO_MPI *pMPI);
void     CRYPTO_BUFFER_MPI_WrCounted_U16BE          (CRYPTO_BUFFER *pSelf, const CRYPTO_MPI *pMPI);
void     CRYPTO_BUFFER_MPI_WrCounted_U32BE          (CRYPTO_BUFFER *pSelf, const CRYPTO_MPI *pMPI);
void     CRYPTO_BUFFER_MPI_WrRaw                    (CRYPTO_BUFFER *pSelf, const CRYPTO_MPI *pMPI, unsigned Len);
void     CRYPTO_BUFFER_MPI_WrRawLE                  (CRYPTO_BUFFER *pSelf, const CRYPTO_MPI *pMPI, unsigned Len);
unsigned CRYPTO_BUFFER_Mark                         (CRYPTO_BUFFER *pSelf);
unsigned CRYPTO_BUFFER_MarkU8                       (CRYPTO_BUFFER *pSelf);
unsigned CRYPTO_BUFFER_MarkU16                      (CRYPTO_BUFFER *pSelf);
unsigned CRYPTO_BUFFER_MarkU24                      (CRYPTO_BUFFER *pSelf);
unsigned CRYPTO_BUFFER_MarkU32                      (CRYPTO_BUFFER *pSelf);
U8       CRYPTO_BUFFER_PatchU8                      (CRYPTO_BUFFER *pSelf, unsigned Mark);
U16      CRYPTO_BUFFER_PatchU16BE                   (CRYPTO_BUFFER *pSelf, unsigned Mark);
U32      CRYPTO_BUFFER_PatchU24BE                   (CRYPTO_BUFFER *pSelf, unsigned Mark);
U32      CRYPTO_BUFFER_PatchU32BE                   (CRYPTO_BUFFER *pSelf, unsigned Mark);
U16      CRYPTO_BUFFER_PatchU16LE                   (CRYPTO_BUFFER *pSelf, unsigned Mark);
U32      CRYPTO_BUFFER_PatchU24LE                   (CRYPTO_BUFFER *pSelf, unsigned Mark);
U32      CRYPTO_BUFFER_PatchU32LE                   (CRYPTO_BUFFER *pSelf, unsigned Mark);
void     CRYPTO_BUFFER_Insert                       (CRYPTO_BUFFER *pSelf, unsigned Mark, const void *pData, unsigned DataLen);
unsigned CRYPTO_BUFFER_SpaceLeft                    (CRYPTO_BUFFER *pSelf);
void     CRYPTO_BUFFER_SetCursor                    (CRYPTO_BUFFER *pSelf, void *pCursor);
void     CRYPTO_BUFFER_SetCursorIndex               (CRYPTO_BUFFER *pSelf, unsigned Index);
unsigned CRYPTO_BUFFER_CursorIndex                  (CRYPTO_BUFFER *pSelf);
unsigned CRYPTO_BUFFER_CursorDistance               (CRYPTO_BUFFER *pSelf, void *pMark);
unsigned CRYPTO_BUFFER_Overflow                     (CRYPTO_BUFFER *pSelf);
void     CRYPTO_BUFFER_Skip                         (CRYPTO_BUFFER *pSelf, unsigned Count);
int      CRYPTO_BUFFER_Status                       (CRYPTO_BUFFER *pSelf);
void   * CRYPTO_BUFFER_Copy                         (CRYPTO_BUFFER *pSelf, const void *pData, unsigned DataLen);
U8     * CRYPTO_BUFFER_Reserve                      (CRYPTO_BUFFER *pSelf, unsigned Len);
U8     * CRYPTO_BUFFER_Data                         (CRYPTO_BUFFER *pSelf);
U8     * CRYPTO_BUFFER_Cursor                       (CRYPTO_BUFFER *pSelf);

/*********************************************************************
*
*       SHA-1 functions
*/
void     CRYPTO_SHA1_Calc                           (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA1_Calc_160                       (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA1_Init                           (CRYPTO_SHA1_CONTEXT *pSelf);
void     CRYPTO_SHA1_Add                            (CRYPTO_SHA1_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA1_Get                            (CRYPTO_SHA1_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA1_Final                          (CRYPTO_SHA1_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA1_Final_160                      (CRYPTO_SHA1_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA1_Kill                           (CRYPTO_SHA1_CONTEXT *pSelf);
void     CRYPTO_SHA1_Install                        (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA1_QueryInstall                   (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA1_IsInstalled                    (void);

/*********************************************************************
*
*       SHA-224 functions
*/
void     CRYPTO_SHA224_Calc                         (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA224_Calc_224                     (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA224_Init                         (CRYPTO_SHA224_CONTEXT *pSelf);
void     CRYPTO_SHA224_Add                          (CRYPTO_SHA224_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA224_Get                          (CRYPTO_SHA224_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA224_Final                        (CRYPTO_SHA224_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA224_Final_224                    (CRYPTO_SHA224_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA224_Kill                         (CRYPTO_SHA224_CONTEXT *pSelf);
void     CRYPTO_SHA224_Install                      (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA224_QueryInstall                 (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA224_IsInstalled                  (void);

/*********************************************************************
*
*       SHA-256 functions
*/
void     CRYPTO_SHA256_Calc                         (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA256_Calc_256                     (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA256_Init                         (CRYPTO_SHA256_CONTEXT *pSelf);
void     CRYPTO_SHA256_Add                          (CRYPTO_SHA256_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA256_Get                          (CRYPTO_SHA256_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA256_Final                        (CRYPTO_SHA256_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA256_Final_256                    (CRYPTO_SHA256_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA256_Kill                         (CRYPTO_SHA256_CONTEXT *pSelf);
void     CRYPTO_SHA256_Install                      (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA256_QueryInstall                 (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA256_IsInstalled                  (void);

/*********************************************************************
*
*       SHA-384 functions
*/
void     CRYPTO_SHA384_Calc                         (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA384_Calc_384                     (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA384_Init                         (CRYPTO_SHA384_CONTEXT *pSelf);
void     CRYPTO_SHA384_Add                          (CRYPTO_SHA384_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA384_Get                          (CRYPTO_SHA384_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA384_Final                        (CRYPTO_SHA384_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA384_Final_384                    (CRYPTO_SHA384_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA384_Kill                         (CRYPTO_SHA384_CONTEXT *pSelf);

/*********************************************************************
*
*       SHA-512 functions
*/
void     CRYPTO_SHA512_Calc                         (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_Calc_512                     (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_Init                         (CRYPTO_SHA512_CONTEXT *pSelf);
void     CRYPTO_SHA512_Add                          (CRYPTO_SHA512_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_Get                          (CRYPTO_SHA512_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA512_Final                        (CRYPTO_SHA512_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA512_Final_512                    (CRYPTO_SHA512_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA512_Kill                         (CRYPTO_SHA512_CONTEXT *pSelf);
void     CRYPTO_SHA512_Install                      (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA512_QueryInstall                 (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA512_IsInstalled                  (void);

/*********************************************************************
*
*       SHA-512/224 functions
*/
void     CRYPTO_SHA512_224_Calc                     (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_224_Calc_224                 (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_224_Init                     (CRYPTO_SHA512_224_CONTEXT *pSelf);
void     CRYPTO_SHA512_224_Add                      (CRYPTO_SHA512_224_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_224_Get                      (CRYPTO_SHA512_224_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA512_224_Final                    (CRYPTO_SHA512_224_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA512_224_Final_224                (CRYPTO_SHA512_224_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA512_224_Kill                     (CRYPTO_SHA512_224_CONTEXT *pSelf);

/*********************************************************************
*
*       SHA-512/256 functions
*/
void     CRYPTO_SHA512_256_Calc                     (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_256_Calc_256                 (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_256_Init                     (CRYPTO_SHA512_256_CONTEXT *pSelf);
void     CRYPTO_SHA512_256_Add                      (CRYPTO_SHA512_256_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA512_256_Get                      (CRYPTO_SHA512_256_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA512_256_Final                    (CRYPTO_SHA512_256_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA512_256_Final_256                (CRYPTO_SHA512_256_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA512_256_Kill                     (CRYPTO_SHA512_256_CONTEXT *pSelf);

/*********************************************************************
*
*       SHA3-224 functions
*/
void     CRYPTO_SHA3_224_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_224_Calc_224                   (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_224_Init                       (CRYPTO_SHA3_224_CONTEXT *pSelf);
void     CRYPTO_SHA3_224_Add                        (CRYPTO_SHA3_224_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_224_Get                        (CRYPTO_SHA3_224_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_224_Final                      (CRYPTO_SHA3_224_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_224_Final_224                  (CRYPTO_SHA3_224_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA3_224_Kill                       (CRYPTO_SHA3_224_CONTEXT *pSelf);
void     CRYPTO_SHA3_224_Install                    (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA3_224_QueryInstall               (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA3_224_IsInstalled                (void);

/*********************************************************************
*
*       SHA3-256 functions
*/
void     CRYPTO_SHA3_256_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_256_Calc_256                   (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_256_Init                       (CRYPTO_SHA3_256_CONTEXT *pSelf);
void     CRYPTO_SHA3_256_Add                        (CRYPTO_SHA3_256_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_256_Get                        (CRYPTO_SHA3_256_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_256_Final                      (CRYPTO_SHA3_256_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_256_Final_256                  (CRYPTO_SHA3_256_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA3_256_Kill                       (CRYPTO_SHA3_256_CONTEXT *pSelf);
void     CRYPTO_SHA3_256_Install                    (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA3_256_QueryInstall               (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA3_256_IsInstalled                (void);

/*********************************************************************
*
*       SHA3-384 functions
*/
void     CRYPTO_SHA3_384_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_384_Calc_384                   (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_384_Init                       (CRYPTO_SHA3_384_CONTEXT *pSelf);
void     CRYPTO_SHA3_384_Add                        (CRYPTO_SHA3_384_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_384_Get                        (CRYPTO_SHA3_384_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_384_Final                      (CRYPTO_SHA3_384_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_384_Final_384                  (CRYPTO_SHA3_384_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA3_384_Kill                       (CRYPTO_SHA3_384_CONTEXT *pSelf);
void     CRYPTO_SHA3_384_Install                    (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA3_384_QueryInstall               (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA3_384_IsInstalled                (void);

/*********************************************************************
*
*       SHA3-512 functions
*/
void     CRYPTO_SHA3_512_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_512_Calc_512                   (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_512_Init                       (CRYPTO_SHA3_512_CONTEXT *pSelf);
void     CRYPTO_SHA3_512_Add                        (CRYPTO_SHA3_512_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHA3_512_Get                        (CRYPTO_SHA3_512_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_512_Final                      (CRYPTO_SHA3_512_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SHA3_512_Final_512                  (CRYPTO_SHA3_512_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SHA3_512_Kill                       (CRYPTO_SHA3_512_CONTEXT *pSelf);
void     CRYPTO_SHA3_512_Install                    (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SHA3_512_QueryInstall               (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SHA3_512_IsInstalled                (void);

/*********************************************************************
*
*       SM3 functions
*/
void     CRYPTO_SM3_Calc                            (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SM3_Calc_256                        (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_SM3_Init                            (CRYPTO_SM3_CONTEXT *pSelf);
void     CRYPTO_SM3_Add                             (CRYPTO_SM3_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SM3_Get                             (CRYPTO_SM3_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SM3_Final                           (CRYPTO_SM3_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_SM3_Final_256                       (CRYPTO_SM3_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_SM3_Kill                            (CRYPTO_SM3_CONTEXT *pSelf);
void     CRYPTO_SM3_Install                         (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_SM3_QueryInstall                    (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_SM3_IsInstalled                     (void);

/*********************************************************************
*
*       MD5 functions
*/
void     CRYPTO_MD5_Calc                            (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MD5_Calc_160                        (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_MD5_Init                            (CRYPTO_MD5_CONTEXT *pSelf);
void     CRYPTO_MD5_Add                             (CRYPTO_MD5_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MD5_Get                             (CRYPTO_MD5_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_MD5_Final                           (CRYPTO_MD5_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_MD5_Final_160                       (CRYPTO_MD5_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_MD5_Kill                            (CRYPTO_MD5_CONTEXT *pSelf);
void     CRYPTO_MD5_Install                         (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_MD5_QueryInstall                    (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_MD5_IsInstalled                     (void);

/*********************************************************************
*
*       MD5-SHA-1 functions [TLS 1.0]
*/
void     CRYPTO_MD5SHA1_Calc                        (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MD5SHA1_Init                        (CRYPTO_MD5SHA1_CONTEXT *pSelf);
void     CRYPTO_MD5SHA1_Add                         (CRYPTO_MD5SHA1_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MD5SHA1_Get                         (CRYPTO_MD5SHA1_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_MD5SHA1_Final                       (CRYPTO_MD5SHA1_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_MD5SHA1_Kill                        (CRYPTO_MD5SHA1_CONTEXT *pSelf);

/*********************************************************************
*
*       RIPEMD-160 functions
*/
void     CRYPTO_RIPEMD160_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_RIPEMD160_Calc_160                  (U8 *pOutput,                     const U8 *pInput, unsigned InputLen);
void     CRYPTO_RIPEMD160_Init                      (CRYPTO_RIPEMD160_CONTEXT *pSelf);
void     CRYPTO_RIPEMD160_Add                       (CRYPTO_RIPEMD160_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_RIPEMD160_Get                       (CRYPTO_RIPEMD160_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_RIPEMD160_Final                     (CRYPTO_RIPEMD160_CONTEXT *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_RIPEMD160_Final_160                 (CRYPTO_RIPEMD160_CONTEXT *pSelf, U8 *pDigest);
void     CRYPTO_RIPEMD160_Kill                      (CRYPTO_RIPEMD160_CONTEXT *pSelf);
void     CRYPTO_RIPEMD160_Install                   (const CRYPTO_HASH_API *pHWAPI, const CRYPTO_HASH_API *pSWAPI);
void     CRYPTO_RIPEMD160_QueryInstall              (const CRYPTO_HASH_API **ppHWAPI, const CRYPTO_HASH_API **ppSWAPI);
int      CRYPTO_RIPEMD160_IsInstalled               (void);

/*********************************************************************
*
*       GHASH functions
*/
void     CRYPTO_GHASH_InitEx                        (CRYPTO_GHASH_CONTEXT *pSelf, const U8 *pIV, unsigned IVLen);
void     CRYPTO_GHASH_Add                           (CRYPTO_GHASH_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GHASH_Final                         (CRYPTO_GHASH_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_GHASH_Kill                          (CRYPTO_GHASH_CONTEXT *pSelf);
void     CRYPTO_GHASH_Calc                          (U8 *pOutput, const U8 *pSubkey, const U8 *pInput, unsigned InputLen);

/*********************************************************************
*
*       Generic MD5 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_MD5_Init                       (void *pSelf);
void     CRYPTO_HASH_MD5_Add                        (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_MD5_Get                        (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_MD5_Final                      (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_MD5_Kill                       (void *pSelf);

/*********************************************************************
*
*       Generic RIPEMD160 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_RIPEMD160_Init                 (void *pSelf);
void     CRYPTO_HASH_RIPEMD160_Add                  (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_RIPEMD160_Get                  (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_RIPEMD160_Final                (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_RIPEMD160_Kill                 (void *pSelf);

/*********************************************************************
*
*       Generic SHA-1 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA1_Init                      (void *pSelf);
void     CRYPTO_HASH_SHA1_Add                       (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA1_Get                       (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA1_Final                     (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA1_Kill                      (void *pSelf);

/*********************************************************************
*
*       Generic SHA-224 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA224_Init                    (void *pSelf);
void     CRYPTO_HASH_SHA224_Add                     (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA224_Get                     (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA224_Final                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA224_Kill                    (void *pSelf);

/*********************************************************************
*
*       Generic SHA-256 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA256_Init                    (void *pSelf);
void     CRYPTO_HASH_SHA256_Add                     (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA256_Get                     (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA256_Final                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA256_Kill                    (void *pSelf);

/*********************************************************************
*
*       Generic SHA-384 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA384_Init                    (void *pSelf);
void     CRYPTO_HASH_SHA384_Add                     (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA384_Get                     (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA384_Final                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA384_Kill                    (void *pSelf);

/*********************************************************************
*
*       Generic SHA-512 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA512_Init                    (void *pSelf);
void     CRYPTO_HASH_SHA512_Add                     (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA512_Get                     (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA512_Final                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA512_Kill                    (void *pSelf);

/*********************************************************************
*
*       Generic SHA3-224 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA3_224_Init                  (void *pSelf);
void     CRYPTO_HASH_SHA3_224_Add                   (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA3_224_Get                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_224_Final                 (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_224_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic SHA3-256 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA3_256_Init                  (void *pSelf);
void     CRYPTO_HASH_SHA3_256_Add                   (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA3_256_Get                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_256_Final                 (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_256_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic SHA3-384 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA3_384_Init                  (void *pSelf);
void     CRYPTO_HASH_SHA3_384_Add                   (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA3_384_Get                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_384_Final                 (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_384_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic SHA3-512 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA3_512_Init                  (void *pSelf);
void     CRYPTO_HASH_SHA3_512_Add                   (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA3_512_Get                   (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_512_Final                 (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA3_512_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic SHA-512/224 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA512_224_Init                (void *pSelf);
void     CRYPTO_HASH_SHA512_224_Add                 (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA512_224_Get                 (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA512_224_Final               (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA512_224_Kill                (void *pSelf);

/*********************************************************************
*
*       Generic SHA-512/256 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SHA512_256_Init                (void *pSelf);
void     CRYPTO_HASH_SHA512_256_Add                 (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SHA512_256_Get                 (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA512_256_Final               (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SHA512_256_Kill                (void *pSelf);

/*********************************************************************
*
*       Generic SM3 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_SM3_Init                       (void *pSelf);
void     CRYPTO_HASH_SM3_Add                        (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_SM3_Get                        (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SM3_Final                      (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_SM3_Kill                       (void *pSelf);

/*********************************************************************
*
*       Generic MD5-SHA-1 functions that conform to the HASH API.
*/
void     CRYPTO_HASH_MD5SHA1_Init                   (void *pSelf);
void     CRYPTO_HASH_MD5SHA1_Add                    (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HASH_MD5SHA1_Get                    (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_MD5SHA1_Final                  (void *pSelf, U8 *pDigest, unsigned DigestLen);
void     CRYPTO_HASH_MD5SHA1_Kill                   (void *pSelf);

/*********************************************************************
*
*       Keccak functions.
*/
void     CRYPTO_KECCAK_Init                         (CRYPTO_KECCAK_CONTEXT *pSelf, unsigned Capacity);
void     CRYPTO_KECCAK_Add                          (CRYPTO_KECCAK_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_KECCAK_AddPadding                   (CRYPTO_KECCAK_CONTEXT *pSelf, U8 Padding);
void     CRYPTO_KECCAK_Get                          (CRYPTO_KECCAK_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KECCAK_Kill                         (CRYPTO_KECCAK_CONTEXT *pSelf);

/*********************************************************************
*
*       SHAKE functions.
*/
void     CRYPTO_SHAKE128_Init                       (CRYPTO_SHAKE_CONTEXT *pSelf);
void     CRYPTO_SHAKE128_Add                        (CRYPTO_SHAKE_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHAKE128_Final                      (CRYPTO_SHAKE_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_SHAKE128_Kill                       (CRYPTO_SHAKE_CONTEXT *pSelf);
void     CRYPTO_SHAKE128_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);
//
void     CRYPTO_SHAKE256_Init                       (CRYPTO_SHAKE_CONTEXT *pSelf);
void     CRYPTO_SHAKE256_Add                        (CRYPTO_SHAKE_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_SHAKE256_Final                      (CRYPTO_SHAKE_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_SHAKE256_Kill                       (CRYPTO_SHAKE_CONTEXT *pSelf);
void     CRYPTO_SHAKE256_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen);

/*********************************************************************
*
*       CSHAKE functions.
*/
void     CRYPTO_CSHAKE128_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pCust, unsigned CustLen, const U8 *pFunc, unsigned FuncLen);
void     CRYPTO_CSHAKE256_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pCust, unsigned CustLen, const U8 *pFunc, unsigned FuncLen);
void     CRYPTO_CSHAKE_Init                         (CRYPTO_CSHAKE_CONTEXT *pSelf, const U8 *pCust, unsigned CustLen, const U8 *pFunc, unsigned FuncLen, unsigned Security);
void     CRYPTO_CSHAKE_Add                          (CRYPTO_CSHAKE_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CSHAKE_Get                          (CRYPTO_CSHAKE_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_CSHAKE_Kill                         (CRYPTO_CSHAKE_CONTEXT *pSelf);
void     CRYPTO_CSHAKE_EncodeStr                    (CRYPTO_CSHAKE_CONTEXT *pSelf, const U8 *pStr, unsigned StrLen);
void     CRYPTO_CSHAKE_LeftEncode                   (CRYPTO_CSHAKE_CONTEXT *pSelf, U32 N);
void     CRYPTO_CSHAKE_RightEncode                  (CRYPTO_CSHAKE_CONTEXT *pSelf, U32 N);
void     CRYPTO_CSHAKE_BlockPad                     (CRYPTO_CSHAKE_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-1 functions
*/
void     CRYPTO_HMAC_SHA1_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA1_Calc_160                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA1_Init                      (CRYPTO_HMAC_SHA1_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA1_InitEx                    (CRYPTO_HMAC_SHA1_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA1_Add                       (CRYPTO_HMAC_SHA1_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA1_Final                     (CRYPTO_HMAC_SHA1_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA1_Final_160                 (CRYPTO_HMAC_SHA1_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA1_Reset                     (CRYPTO_HMAC_SHA1_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA1_Kill                      (CRYPTO_HMAC_SHA1_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-224 functions
*/
void     CRYPTO_HMAC_SHA224_Calc                    (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA224_Calc_224                (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA224_Init                    (CRYPTO_HMAC_SHA224_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA224_InitEx                  (CRYPTO_HMAC_SHA224_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA224_Add                     (CRYPTO_HMAC_SHA224_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA224_Final                   (CRYPTO_HMAC_SHA224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA224_Final_224               (CRYPTO_HMAC_SHA224_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA224_Reset                   (CRYPTO_HMAC_SHA224_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA224_Kill                    (CRYPTO_HMAC_SHA224_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-256 functions
*/
void     CRYPTO_HMAC_SHA256_Calc                    (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA256_Calc_256                (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA256_Init                    (CRYPTO_HMAC_SHA256_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA256_InitEx                  (CRYPTO_HMAC_SHA256_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA256_Add                     (CRYPTO_HMAC_SHA256_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA256_Final                   (CRYPTO_HMAC_SHA256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA256_Final_256               (CRYPTO_HMAC_SHA256_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA256_Reset                   (CRYPTO_HMAC_SHA256_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA256_Kill                    (CRYPTO_HMAC_SHA256_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-384 functions
*/
void     CRYPTO_HMAC_SHA384_Calc                    (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA384_Calc_384                (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA384_Init                    (CRYPTO_HMAC_SHA384_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA384_InitEx                  (CRYPTO_HMAC_SHA384_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA384_Add                     (CRYPTO_HMAC_SHA384_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA384_Final                   (CRYPTO_HMAC_SHA384_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA384_Final_384               (CRYPTO_HMAC_SHA384_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA384_Reset                   (CRYPTO_HMAC_SHA384_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA384_Kill                    (CRYPTO_HMAC_SHA384_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-512 functions
*/
void     CRYPTO_HMAC_SHA512_Calc                    (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_Calc_512                (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_Init                    (CRYPTO_HMAC_SHA512_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA512_InitEx                  (CRYPTO_HMAC_SHA512_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA512_Add                     (CRYPTO_HMAC_SHA512_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_Final                   (CRYPTO_HMAC_SHA512_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA512_Final_512               (CRYPTO_HMAC_SHA512_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA512_Reset                   (CRYPTO_HMAC_SHA512_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA512_Kill                    (CRYPTO_HMAC_SHA512_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-512/224 functions
*/
void     CRYPTO_HMAC_SHA512_224_Calc                (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_224_Calc_224            (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_224_Init                (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA512_224_InitEx              (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA512_224_Add                 (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_224_Final               (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA512_224_Final_224           (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA512_224_Reset               (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA512_224_Kill                (CRYPTO_HMAC_SHA512_224_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA-512/256 functions
*/
void     CRYPTO_HMAC_SHA512_256_Calc                (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_256_Calc_256            (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_256_Init                (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA512_256_InitEx              (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA512_256_Add                 (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA512_256_Final               (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA512_256_Final_256           (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA512_256_Reset               (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA512_256_Kill               (CRYPTO_HMAC_SHA512_256_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA3-224 functions
*/
void     CRYPTO_HMAC_SHA3_224_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_224_Calc_224              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_224_Init                  (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA3_224_InitEx                (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA3_224_Add                   (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_224_Final                 (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA3_224_Final_224             (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA3_224_Reset                 (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA3_224_Kill                  (CRYPTO_HMAC_SHA3_224_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA3-256 functions
*/
void     CRYPTO_HMAC_SHA3_256_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_256_Calc_256              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_256_Init                  (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA3_256_InitEx                (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA3_256_Add                   (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_256_Final                 (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA3_256_Final_256             (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA3_256_Reset                 (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA3_256_Kill                  (CRYPTO_HMAC_SHA3_256_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA3-384 functions
*/
void     CRYPTO_HMAC_SHA3_384_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_384_Calc_384              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_384_Init                  (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA3_384_InitEx                (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA3_384_Add                   (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_384_Final                 (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA3_384_Final_384             (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA3_384_Reset                 (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA3_384_Kill                  (CRYPTO_HMAC_SHA3_384_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SHA3-512 functions
*/
void     CRYPTO_HMAC_SHA3_512_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_512_Calc_512              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_512_Init                  (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SHA3_512_InitEx                (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SHA3_512_Add                   (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SHA3_512_Final                 (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SHA3_512_Final_512             (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SHA3_512_Reset                 (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf);
void     CRYPTO_HMAC_SHA3_512_Kill                  (CRYPTO_HMAC_SHA3_512_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-SM3 functions
*/
void     CRYPTO_HMAC_SM3_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SM3_Calc_256                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SM3_Init                       (CRYPTO_HMAC_SM3_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_SM3_InitEx                     (CRYPTO_HMAC_SM3_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_SM3_Add                        (CRYPTO_HMAC_SM3_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_SM3_Final                      (CRYPTO_HMAC_SM3_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_SM3_Final_256                  (CRYPTO_HMAC_SM3_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_SM3_Reset                      (CRYPTO_HMAC_SM3_CONTEXT *pSelf);
void     CRYPTO_HMAC_SM3_Kill                       (CRYPTO_HMAC_SM3_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-MD5 functions
*/
void     CRYPTO_HMAC_MD5_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_MD5_Calc_160                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_MD5_Init                       (CRYPTO_HMAC_MD5_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_MD5_InitEx                     (CRYPTO_HMAC_MD5_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_MD5_Add                        (CRYPTO_HMAC_MD5_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_MD5_Final                      (CRYPTO_HMAC_MD5_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_MD5_Final_160                  (CRYPTO_HMAC_MD5_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_MD5_Reset                      (CRYPTO_HMAC_MD5_CONTEXT *pSelf);
void     CRYPTO_HMAC_MD5_Kill                       (CRYPTO_HMAC_MD5_CONTEXT *pSelf);

/*********************************************************************
*
*       HMAC-RIPEMD160 functions
*/
void     CRYPTO_HMAC_RIPEMD160_Calc                 (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_RIPEMD160_Calc_160             (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_RIPEMD160_Init                 (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_HMAC_RIPEMD160_InitEx               (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_HMAC_RIPEMD160_Add                  (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_HMAC_RIPEMD160_Final                (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HMAC_RIPEMD160_Final_160            (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_HMAC_RIPEMD160_Reset                (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf);
void     CRYPTO_HMAC_RIPEMD160_Kill                 (CRYPTO_HMAC_RIPEMD160_CONTEXT *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-1 functions
*/
void     CRYPTO_MAC_HMAC_SHA1_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA1_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA1_Add                   (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA1_Final                 (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA1_Final_96              (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA1_Final_160             (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA1_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-224 functions
*/
void     CRYPTO_MAC_HMAC_SHA224_Init                (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA224_InitEx              (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA224_Add                 (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA224_Final               (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA224_Final_224           (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA224_Kill                (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-256 functions
*/
void     CRYPTO_MAC_HMAC_SHA256_Init                (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA256_InitEx              (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA256_Add                 (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA256_Final               (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA256_Final_256           (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA256_Kill                (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-384 functions
*/
void     CRYPTO_MAC_HMAC_SHA384_Init                (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA384_InitEx              (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA384_Add                 (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA384_Final               (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA384_Final_384           (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA384_Kill                (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-512 functions
*/
void     CRYPTO_MAC_HMAC_SHA512_Init                (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA512_InitEx              (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA512_Add                 (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA512_Final               (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA512_Final_512           (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA512_Kill                (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-512/224 functions
*/
void     CRYPTO_MAC_HMAC_SHA512_224_Init            (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA512_224_InitEx          (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA512_224_Add             (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA512_224_Final           (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA512_224_Final_224       (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA512_224_Kill            (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA-512/256 functions
*/
void     CRYPTO_MAC_HMAC_SHA512_256_Init            (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA512_256_InitEx          (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA512_256_Add             (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA512_256_Final           (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA512_256_Final_256       (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA512_256_Kill            (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA3-224 functions
*/
void     CRYPTO_MAC_HMAC_SHA3_224_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA3_224_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA3_224_Add               (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA3_224_Final             (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA3_224_Final_224         (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA3_224_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA3-256 functions
*/
void     CRYPTO_MAC_HMAC_SHA3_256_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA3_256_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA3_256_Add               (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA3_256_Final             (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA3_256_Final_256         (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA3_256_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA3-384 functions
*/
void     CRYPTO_MAC_HMAC_SHA3_384_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA3_384_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA3_384_Add               (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA3_384_Final             (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA3_384_Final_384         (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA3_384_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SHA3-512 functions
*/
void     CRYPTO_MAC_HMAC_SHA3_512_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SHA3_512_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SHA3_512_Add               (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SHA3_512_Final             (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SHA3_512_Final_512         (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SHA3_512_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-SM3 functions
*/
void     CRYPTO_MAC_HMAC_SM3_Init                   (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_SM3_InitEx                 (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_SM3_Add                    (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_SM3_Final                  (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_SM3_Final_256              (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_SM3_Kill                   (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-MD5 functions
*/
void     CRYPTO_MAC_HMAC_MD5_Init                   (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_MD5_InitEx                 (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_MD5_Add                    (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_MD5_Final                  (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_MD5_Final_96               (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_MD5_Final_160              (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_MD5_Kill                   (void *pSelf);

/*********************************************************************
*
*       Generic HMAC-RIPEMD160 functions
*/
void     CRYPTO_MAC_HMAC_RIPEMD160_Init             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_HMAC_RIPEMD160_InitEx           (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_HMAC_RIPEMD160_Add              (void *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_MAC_HMAC_RIPEMD160_Final            (void *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_MAC_HMAC_RIPEMD160_Final_160        (void *pSelf, U8 *pOutput);
void     CRYPTO_MAC_HMAC_RIPEMD160_Kill             (void *pSelf);

/*********************************************************************
*
*       CMAC-AES functions
*/
void     CRYPTO_CMAC_AES_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_AES_Calc_128                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_AES_Init                       (CRYPTO_CMAC_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_AES_InitEx                     (CRYPTO_CMAC_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_AES_Add                        (CRYPTO_CMAC_AES_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_AES_Final                      (CRYPTO_CMAC_AES_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_AES_Final_128                  (CRYPTO_CMAC_AES_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_AES_Kill                       (CRYPTO_CMAC_AES_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-TDES functions
*/
void     CRYPTO_CMAC_TDES_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_TDES_Calc_64                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_TDES_Init                      (CRYPTO_CMAC_TDES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_TDES_InitEx                    (CRYPTO_CMAC_TDES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_TDES_Add                       (CRYPTO_CMAC_TDES_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_TDES_Final                     (CRYPTO_CMAC_TDES_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_TDES_Final_64                  (CRYPTO_CMAC_TDES_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_TDES_Kill                      (CRYPTO_CMAC_TDES_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-ARIA functions
*/
void     CRYPTO_CMAC_ARIA_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_ARIA_Calc_128                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_ARIA_Init                      (CRYPTO_CMAC_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_ARIA_InitEx                    (CRYPTO_CMAC_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_ARIA_Add                       (CRYPTO_CMAC_ARIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_ARIA_Final                     (CRYPTO_CMAC_ARIA_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_ARIA_Final_128                 (CRYPTO_CMAC_ARIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_ARIA_Kill                      (CRYPTO_CMAC_ARIA_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-SEED functions
*/
void     CRYPTO_CMAC_SEED_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_SEED_Calc_128                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_SEED_Init                      (CRYPTO_CMAC_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_SEED_InitEx                    (CRYPTO_CMAC_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_SEED_Add                       (CRYPTO_CMAC_SEED_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_SEED_Final                     (CRYPTO_CMAC_SEED_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_SEED_Final_128                 (CRYPTO_CMAC_SEED_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_SEED_Kill                      (CRYPTO_CMAC_SEED_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-Camellia functions
*/
void     CRYPTO_CMAC_CAMELLIA_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_CAMELLIA_Calc_128              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_CAMELLIA_Init                  (CRYPTO_CMAC_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_CAMELLIA_InitEx                (CRYPTO_CMAC_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_CAMELLIA_Add                   (CRYPTO_CMAC_CAMELLIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_CAMELLIA_Final                 (CRYPTO_CMAC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_CAMELLIA_Final_128             (CRYPTO_CMAC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_CAMELLIA_Kill                  (CRYPTO_CMAC_CAMELLIA_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-Twofish functions
*/
void     CRYPTO_CMAC_TWOFISH_Calc                   (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_TWOFISH_Calc_128               (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_TWOFISH_Init                   (CRYPTO_CMAC_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_TWOFISH_InitEx                 (CRYPTO_CMAC_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_TWOFISH_Add                    (CRYPTO_CMAC_TWOFISH_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_TWOFISH_Final                  (CRYPTO_CMAC_TWOFISH_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_TWOFISH_Final_128              (CRYPTO_CMAC_TWOFISH_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_TWOFISH_Kill                   (CRYPTO_CMAC_TWOFISH_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-Blowfish functions
*/
void     CRYPTO_CMAC_BLOWFISH_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_BLOWFISH_Calc_64               (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_BLOWFISH_Init                  (CRYPTO_CMAC_BLOWFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_BLOWFISH_InitEx                (CRYPTO_CMAC_BLOWFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_BLOWFISH_Add                   (CRYPTO_CMAC_BLOWFISH_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_BLOWFISH_Final                 (CRYPTO_CMAC_BLOWFISH_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_BLOWFISH_Final_64              (CRYPTO_CMAC_BLOWFISH_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_BLOWFISH_Kill                  (CRYPTO_CMAC_BLOWFISH_CONTEXT *pSelf);

/*********************************************************************
*
*       CMAC-CAST functions
*/
void     CRYPTO_CMAC_CAST_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_CAST_Calc_64                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_CAST_Init                      (CRYPTO_CMAC_CAST_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CMAC_CAST_InitEx                    (CRYPTO_CMAC_CAST_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CMAC_CAST_Add                       (CRYPTO_CMAC_CAST_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CMAC_CAST_Final                     (CRYPTO_CMAC_CAST_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_CMAC_CAST_Final_64                  (CRYPTO_CMAC_CAST_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_CMAC_CAST_Kill                      (CRYPTO_CMAC_CAST_CONTEXT *pSelf);

/*********************************************************************
*
*       GMAC-AES functions
*/
void     CRYPTO_GMAC_AES_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_AES_Calc_128                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_AES_InitEx                     (CRYPTO_GMAC_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_GMAC_AES_Add                        (CRYPTO_GMAC_AES_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_AES_Final                      (CRYPTO_GMAC_AES_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_GMAC_AES_Final_128                  (CRYPTO_GMAC_AES_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_GMAC_AES_Kill                       (CRYPTO_GMAC_AES_CONTEXT *pSelf);

/*********************************************************************
*
*       GMAC-ARIA functions
*/
void     CRYPTO_GMAC_ARIA_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_ARIA_Calc_128                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_ARIA_InitEx                    (CRYPTO_GMAC_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_GMAC_ARIA_Add                       (CRYPTO_GMAC_ARIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_ARIA_Final                     (CRYPTO_GMAC_ARIA_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_GMAC_ARIA_Final_128                 (CRYPTO_GMAC_ARIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_GMAC_ARIA_Kill                      (CRYPTO_GMAC_ARIA_CONTEXT *pSelf);

/*********************************************************************
*
*       GMAC-SEED functions
*/
void     CRYPTO_GMAC_SEED_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_SEED_Calc_128                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_SEED_InitEx                    (CRYPTO_GMAC_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_GMAC_SEED_Add                       (CRYPTO_GMAC_SEED_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_SEED_Final                     (CRYPTO_GMAC_SEED_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_GMAC_SEED_Final_128                 (CRYPTO_GMAC_SEED_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_GMAC_SEED_Kill                      (CRYPTO_GMAC_SEED_CONTEXT *pSelf);

/*********************************************************************
*
*       GMAC-CAMELLIA functions
*/
void     CRYPTO_GMAC_CAMELLIA_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_CAMELLIA_Calc_128              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_CAMELLIA_InitEx                (CRYPTO_GMAC_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_GMAC_CAMELLIA_Add                   (CRYPTO_GMAC_CAMELLIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_CAMELLIA_Final                 (CRYPTO_GMAC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_GMAC_CAMELLIA_Final_128             (CRYPTO_GMAC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_GMAC_CAMELLIA_Kill                  (CRYPTO_GMAC_CAMELLIA_CONTEXT *pSelf);

/*********************************************************************
*
*       GMAC-TWOFISH functions
*/
void     CRYPTO_GMAC_TWOFISH_Calc                   (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_TWOFISH_Calc_128               (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_TWOFISH_InitEx                 (CRYPTO_GMAC_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_GMAC_TWOFISH_Add                    (CRYPTO_GMAC_TWOFISH_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_GMAC_TWOFISH_Final                  (CRYPTO_GMAC_TWOFISH_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_GMAC_TWOFISH_Final_128              (CRYPTO_GMAC_TWOFISH_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_GMAC_TWOFISH_Kill                   (CRYPTO_GMAC_TWOFISH_CONTEXT *pSelf);

/*********************************************************************
*
*       XCBC-AES-MAC functions
*/
void     CRYPTO_XCBC_AES_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_AES_Calc_96                    (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_AES_Calc_128                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_AES_Init                       (CRYPTO_XCBC_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_XCBC_AES_InitEx                     (CRYPTO_XCBC_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_XCBC_AES_Add                        (CRYPTO_XCBC_AES_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_AES_Final                      (CRYPTO_XCBC_AES_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_XCBC_AES_Final_96                   (CRYPTO_XCBC_AES_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_AES_Final_128                  (CRYPTO_XCBC_AES_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_AES_Kill                       (CRYPTO_XCBC_AES_CONTEXT *pSelf);

/*********************************************************************
*
*       XCBC-CAMELLIA-MAC functions
*/
void     CRYPTO_XCBC_CAMELLIA_Calc                  (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_CAMELLIA_Calc_96               (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_CAMELLIA_Calc_128              (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_CAMELLIA_Init                  (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_XCBC_CAMELLIA_InitEx                (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_XCBC_CAMELLIA_Add                   (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_CAMELLIA_Final                 (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_XCBC_CAMELLIA_Final_96              (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_CAMELLIA_Final_128             (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_CAMELLIA_Kill                  (CRYPTO_XCBC_CAMELLIA_CONTEXT *pSelf);

/*********************************************************************
*
*       XCBC-ARIA-MAC functions
*/
void     CRYPTO_XCBC_ARIA_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_ARIA_Calc_96                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_ARIA_Calc_128                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_ARIA_Init                      (CRYPTO_XCBC_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_XCBC_ARIA_Add                       (CRYPTO_XCBC_ARIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_ARIA_InitEx                    (CRYPTO_XCBC_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_XCBC_ARIA_Final                     (CRYPTO_XCBC_ARIA_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_XCBC_ARIA_Final_96                  (CRYPTO_XCBC_ARIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_ARIA_Final_128                 (CRYPTO_XCBC_ARIA_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_ARIA_Kill                      (CRYPTO_XCBC_ARIA_CONTEXT *pSelf);

/*********************************************************************
*
*       XCBC-SEED-MAC functions
*/
void     CRYPTO_XCBC_SEED_Calc                      (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_SEED_Calc_96                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_SEED_Calc_128                  (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_SEED_Init                      (CRYPTO_XCBC_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_XCBC_SEED_InitEx                    (CRYPTO_XCBC_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_XCBC_SEED_Add                       (CRYPTO_XCBC_SEED_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_SEED_Final                     (CRYPTO_XCBC_SEED_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_XCBC_SEED_Final_96                  (CRYPTO_XCBC_SEED_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_SEED_Final_128                 (CRYPTO_XCBC_SEED_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_SEED_Kill                      (CRYPTO_XCBC_SEED_CONTEXT *pSelf);

/*********************************************************************
*
*       XCBC-TWOFISH-MAC functions
*/
void     CRYPTO_XCBC_TWOFISH_Calc                   (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_TWOFISH_Calc_96                (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_TWOFISH_Calc_128               (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_TWOFISH_Init                   (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_XCBC_TWOFISH_InitEx                 (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_XCBC_TWOFISH_Add                    (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_XCBC_TWOFISH_Final                  (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_XCBC_TWOFISH_Final_96               (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_TWOFISH_Final_128              (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_XCBC_TWOFISH_Kill                   (CRYPTO_XCBC_TWOFISH_CONTEXT *pSelf);

/*********************************************************************
*
*       AES-CMAC-PRF functions
*/
void     CRYPTO_CMAC_AES_PRF_128_Calc               (const U8 *pKey, unsigned KeyLen, const U8 *pMessage, unsigned MessageLen, U8 *pPRV);

/*********************************************************************
*
*       Poly1305 functions
*/
void     CRYPTO_POLY1305_Init                       (CRYPTO_POLY1305_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_POLY1305_Init_256                   (CRYPTO_POLY1305_CONTEXT *pSelf, const U8 *pKey);
void     CRYPTO_POLY1305_Add                        (CRYPTO_POLY1305_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_Final                      (CRYPTO_POLY1305_CONTEXT *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_POLY1305_Final_128                  (CRYPTO_POLY1305_CONTEXT *pSelf, U8 *pMAC);
void     CRYPTO_POLY1305_Kill                       (CRYPTO_POLY1305_CONTEXT *pSelf);
void     CRYPTO_POLY1305_Calc                       (U8 *pOutput, unsigned OutputLen, const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_Calc_128                   (U8 *pOutput,                     const U8 *pKey, unsigned KeyLen, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_Clamp                      (U8 *pKey);

/*********************************************************************
*
*       Poly1305-AES functions
*/
void     CRYPTO_POLY1305_AES_InitEx                 (CRYPTO_POLY1305_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_POLY1305_AES_InitEx_256_128         (CRYPTO_POLY1305_AES_CONTEXT *pSelf, const U8 *pKey, const U8 *pIV);
void     CRYPTO_POLY1305_AES_Add                    (CRYPTO_POLY1305_AES_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_AES_Final                  (CRYPTO_POLY1305_AES_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_POLY1305_AES_Final_128              (CRYPTO_POLY1305_AES_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_POLY1305_AES_Kill                   (CRYPTO_POLY1305_AES_CONTEXT *pSelf);
void     CRYPTO_POLY1305_AES_Calc                   (      U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_AES_Calc_128               (      U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_AES_Verify                 (const U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_AES_Verify_128             (const U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_AES_Clamp                  (U8 *pKey);

/*********************************************************************
*
*       Poly1305-Camellia functions
*/
void     CRYPTO_POLY1305_CAMELLIA_InitEx            (CRYPTO_POLY1305_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_POLY1305_CAMELLIA_InitEx_256_128    (CRYPTO_POLY1305_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, const U8 *pIV);
void     CRYPTO_POLY1305_CAMELLIA_Add               (CRYPTO_POLY1305_CAMELLIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_CAMELLIA_Final             (CRYPTO_POLY1305_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_POLY1305_CAMELLIA_Final_128         (CRYPTO_POLY1305_CAMELLIA_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_POLY1305_CAMELLIA_Kill              (CRYPTO_POLY1305_CAMELLIA_CONTEXT *pSelf);
void     CRYPTO_POLY1305_CAMELLIA_Calc              (      U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_CAMELLIA_Calc_128          (      U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_CAMELLIA_Verify            (const U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_CAMELLIA_Verify_128        (const U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_CAMELLIA_Clamp             (U8 *pKey);

/*********************************************************************
*
*       Poly1305-SEED functions
*/
void     CRYPTO_POLY1305_SEED_InitEx                (CRYPTO_POLY1305_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_POLY1305_SEED_InitEx_256_128        (CRYPTO_POLY1305_SEED_CONTEXT *pSelf, const U8 *pKey, const U8 *pIV);
void     CRYPTO_POLY1305_SEED_Add                   (CRYPTO_POLY1305_SEED_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_SEED_Final                 (CRYPTO_POLY1305_SEED_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_POLY1305_SEED_Final_128             (CRYPTO_POLY1305_SEED_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_POLY1305_SEED_Kill                  (CRYPTO_POLY1305_SEED_CONTEXT *pSelf);
void     CRYPTO_POLY1305_SEED_Calc                  (      U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_SEED_Calc_128              (      U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_SEED_Verify                (const U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_SEED_Verify_128            (const U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_SEED_Clamp                 (U8 *pKey);

/*********************************************************************
*
*       Poly1305-ARIA functions
*/
void     CRYPTO_POLY1305_ARIA_InitEx                (CRYPTO_POLY1305_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_POLY1305_ARIA_InitEx_256_128        (CRYPTO_POLY1305_ARIA_CONTEXT *pSelf, const U8 *pKey, const U8 *pIV);
void     CRYPTO_POLY1305_ARIA_Add                   (CRYPTO_POLY1305_ARIA_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_ARIA_Final                 (CRYPTO_POLY1305_ARIA_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_POLY1305_ARIA_Final_128             (CRYPTO_POLY1305_ARIA_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_POLY1305_ARIA_Kill                  (CRYPTO_POLY1305_ARIA_CONTEXT *pSelf);
void     CRYPTO_POLY1305_ARIA_Calc                  (      U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_ARIA_Calc_128              (      U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_ARIA_Verify                (const U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_ARIA_Verify_128            (const U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_ARIA_Clamp                 (U8 *pKey);

/*********************************************************************
*
*       Poly1305-Twofish functions
*/
void     CRYPTO_POLY1305_TWOFISH_InitEx             (CRYPTO_POLY1305_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_POLY1305_TWOFISH_InitEx_256_128     (CRYPTO_POLY1305_TWOFISH_CONTEXT *pSelf, const U8 *pKey, const U8 *pIV);
void     CRYPTO_POLY1305_TWOFISH_Add                (CRYPTO_POLY1305_TWOFISH_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_TWOFISH_Final              (CRYPTO_POLY1305_TWOFISH_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_POLY1305_TWOFISH_Final_128          (CRYPTO_POLY1305_TWOFISH_CONTEXT *pSelf, U8 *pOutput);
void     CRYPTO_POLY1305_TWOFISH_Kill               (CRYPTO_POLY1305_TWOFISH_CONTEXT *pSelf);
void     CRYPTO_POLY1305_TWOFISH_Calc               (      U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_TWOFISH_Calc_128           (      U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_TWOFISH_Verify             (const U8 *pTag, unsigned TagLen, const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
int      CRYPTO_POLY1305_TWOFISH_Verify_128         (const U8 *pTag,                  const U8 *pKey, const U8 *pIV, const U8 *pInput, unsigned InputLen);
void     CRYPTO_POLY1305_TWOFISH_Clamp              (U8 *pKey);

/*********************************************************************
*
*       KMAC functions
*/
void     CRYPTO_KMAC_Init                           (CRYPTO_KMAC_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pCust, unsigned CustLen, unsigned Security);
void     CRYPTO_KMAC_128_Init                       (CRYPTO_KMAC_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pCust, unsigned CustLen);
void     CRYPTO_KMAC_256_Init                       (CRYPTO_KMAC_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pCust, unsigned CustLen);
void     CRYPTO_KMAC_Add                            (CRYPTO_KMAC_CONTEXT *pSelf, const U8 *pInput, unsigned InputLen);
void     CRYPTO_KMAC_Get                            (CRYPTO_KMAC_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen);

/*********************************************************************
*
*       Generic AES-CMAC functions
*/
void     CRYPTO_MAC_CMAC_AES_Init                   (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_AES_InitEx                 (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_AES_Add                    (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_AES_Final                  (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_AES_Final_128              (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_AES_Kill                   (void *pSelf);

/*********************************************************************
*
*       Generic TDES-CMAC functions
*/
void     CRYPTO_MAC_CMAC_TDES_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_TDES_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_TDES_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_TDES_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_TDES_Final_64              (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_TDES_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic ARIA-CMAC functions
*/
void     CRYPTO_MAC_CMAC_ARIA_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_ARIA_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_ARIA_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_ARIA_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_ARIA_Final_128             (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_ARIA_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic SEED-CMAC functions
*/
void     CRYPTO_MAC_CMAC_SEED_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_SEED_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_SEED_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_SEED_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_SEED_Final_128             (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_SEED_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic Camellia-CMAC functions
*/
void     CRYPTO_MAC_CMAC_CAMELLIA_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_CAMELLIA_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_CAMELLIA_Add               (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_CAMELLIA_Final             (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_CAMELLIA_Final_128         (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_CAMELLIA_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic Twofish-CMAC functions
*/
void     CRYPTO_MAC_CMAC_TWOFISH_Init               (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_TWOFISH_InitEx             (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_TWOFISH_Add                (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_TWOFISH_Final              (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_TWOFISH_Final_128          (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_TWOFISH_Kill               (void *pSelf);

/*********************************************************************
*
*       Generic Blowfish-CMAC functions
*/
void     CRYPTO_MAC_CMAC_BLOWFISH_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_BLOWFISH_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_BLOWFISH_Add               (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_BLOWFISH_Final             (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_BLOWFISH_Final_64          (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_BLOWFISH_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic CAST-CMAC functions
*/
void     CRYPTO_MAC_CMAC_CAST_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_CMAC_CAST_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_CMAC_CAST_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_CMAC_CAST_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_CMAC_CAST_Final_64              (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_CMAC_CAST_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic AES-GMAC functions
*/
void     CRYPTO_MAC_GMAC_AES_InitEx                 (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_GMAC_AES_Add                    (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_GMAC_AES_Final                  (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_GMAC_AES_Final_128              (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_GMAC_AES_Kill                   (void *pSelf);

/*********************************************************************
*
*       Generic ARIA-GMAC functions
*/
void     CRYPTO_MAC_GMAC_ARIA_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_GMAC_ARIA_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_GMAC_ARIA_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_GMAC_ARIA_Final_128             (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_GMAC_ARIA_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic SEED-GMAC functions
*/
void     CRYPTO_MAC_GMAC_SEED_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_GMAC_SEED_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_GMAC_SEED_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_GMAC_SEED_Final_128             (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_GMAC_SEED_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic Camellia-GMAC functions
*/
void     CRYPTO_MAC_GMAC_CAMELLIA_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_GMAC_CAMELLIA_Add               (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_GMAC_CAMELLIA_Final             (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_GMAC_CAMELLIA_Final_128         (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_GMAC_CAMELLIA_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic Twofish-GMAC functions
*/
void     CRYPTO_MAC_GMAC_TWOFISH_InitEx             (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_GMAC_TWOFISH_Add                (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_GMAC_TWOFISH_Final              (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_GMAC_TWOFISH_Final_128          (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_GMAC_TWOFISH_Kill               (void *pSelf);

/*********************************************************************
*
*       Generic XCBC-AES-MAC functions
*/
void     CRYPTO_MAC_XCBC_AES_Init                   (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_XCBC_AES_InitEx                 (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_XCBC_AES_Add                    (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_XCBC_AES_Final                  (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_XCBC_AES_Final_128              (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_XCBC_AES_Kill                   (void *pSelf);

/*********************************************************************
*
*       Generic XCBC-Camellia-MAC functions
*/
void     CRYPTO_MAC_XCBC_CAMELLIA_Init              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_XCBC_CAMELLIA_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_XCBC_CAMELLIA_Add               (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_XCBC_CAMELLIA_Final             (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_XCBC_CAMELLIA_Final_128         (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_XCBC_CAMELLIA_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic XCBC-ARIA-MAC functions
*/
void     CRYPTO_MAC_XCBC_ARIA_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_XCBC_ARIA_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_XCBC_ARIA_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_XCBC_ARIA_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_XCBC_ARIA_Final_128             (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_XCBC_ARIA_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic XCBC-SEED-MAC functions
*/
void     CRYPTO_MAC_XCBC_SEED_Init                  (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_XCBC_SEED_InitEx                (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_XCBC_SEED_Add                   (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_XCBC_SEED_Final                 (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_XCBC_SEED_Final_128             (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_XCBC_SEED_Kill                  (void *pSelf);

/*********************************************************************
*
*       Generic XCBC-Twofish-MAC functions
*/
void     CRYPTO_MAC_XCBC_TWOFISH_Init               (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_MAC_XCBC_TWOFISH_InitEx             (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_XCBC_TWOFISH_Add                (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_XCBC_TWOFISH_Final              (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_XCBC_TWOFISH_Final_128          (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_XCBC_TWOFISH_Kill               (void *pSelf);

/*********************************************************************
*
*       Generic Poly1305-AES functions
*/
void     CRYPTO_MAC_POLY1305_AES_InitEx             (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_POLY1305_AES_Add                (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_POLY1305_AES_Final              (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_POLY1305_AES_Final_128          (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_POLY1305_AES_Kill               (void *pSelf);

/*********************************************************************
*
*       Generic Poly1305-ARIA functions
*/
void     CRYPTO_MAC_POLY1305_ARIA_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_POLY1305_ARIA_Add               (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_POLY1305_ARIA_Final             (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_POLY1305_ARIA_Final_128         (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_POLY1305_ARIA_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic Poly1305-SEED functions
*/
void     CRYPTO_MAC_POLY1305_SEED_InitEx            (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_POLY1305_SEED_Add               (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_POLY1305_SEED_Final             (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_POLY1305_SEED_Final_128         (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_POLY1305_SEED_Kill              (void *pSelf);

/*********************************************************************
*
*       Generic Poly1305-Camellia functions
*/
void     CRYPTO_MAC_POLY1305_CAMELLIA_InitEx        (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_POLY1305_CAMELLIA_Add           (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_POLY1305_CAMELLIA_Final         (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_POLY1305_CAMELLIA_Final_128     (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_POLY1305_CAMELLIA_Kill          (void *pSelf);

/*********************************************************************
*
*       Generic Poly1305-Twofish functions
*/
void     CRYPTO_MAC_POLY1305_TWOFISH_InitEx         (void *pSelf, const U8 *pKey, unsigned KeyLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_MAC_POLY1305_TWOFISH_Add            (void *pSelf, const U8 *pData, unsigned DataLen);
void     CRYPTO_MAC_POLY1305_TWOFISH_Final          (void *pSelf, U8 *pMAC, unsigned MACLen);
void     CRYPTO_MAC_POLY1305_TWOFISH_Final_128      (void *pSelf, U8 *pMAC);
void     CRYPTO_MAC_POLY1305_TWOFISH_Kill           (void *pSelf);

/*********************************************************************
*
*       Hash_DRBG using SHA-1
*/
void     CRYPTO_DRBG_HASH_SHA1_Init                 (CRYPTO_DRBG_HASH_SHA1_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA1_Reseed               (CRYPTO_DRBG_HASH_SHA1_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA1_Get                  (CRYPTO_DRBG_HASH_SHA1_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       Hash_DRBG using SHA-224
*/
void     CRYPTO_DRBG_HASH_SHA224_Init               (CRYPTO_DRBG_HASH_SHA224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA224_Reseed             (CRYPTO_DRBG_HASH_SHA224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA224_Get                (CRYPTO_DRBG_HASH_SHA224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       Hash_DRBG using SHA-256
*/
void     CRYPTO_DRBG_HASH_SHA256_Init               (CRYPTO_DRBG_HASH_SHA256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA256_Reseed             (CRYPTO_DRBG_HASH_SHA256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA256_Get                (CRYPTO_DRBG_HASH_SHA256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       Hash_DRBG using SHA-384
*/
void     CRYPTO_DRBG_HASH_SHA384_Init               (CRYPTO_DRBG_HASH_SHA384_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA384_Reseed             (CRYPTO_DRBG_HASH_SHA384_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA384_Get                (CRYPTO_DRBG_HASH_SHA384_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       Hash_DRBG using SHA-512
*/
void     CRYPTO_DRBG_HASH_SHA512_Init               (CRYPTO_DRBG_HASH_SHA512_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA512_Reseed             (CRYPTO_DRBG_HASH_SHA512_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA512_Get                (CRYPTO_DRBG_HASH_SHA512_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       Hash_DRBG using SHA-512/224
*/
void     CRYPTO_DRBG_HASH_SHA512_224_Init           (CRYPTO_DRBG_HASH_SHA512_224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA512_224_Reseed         (CRYPTO_DRBG_HASH_SHA512_224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA512_224_Get            (CRYPTO_DRBG_HASH_SHA512_224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       Hash_DRBG using SHA-512/256
*/
void     CRYPTO_DRBG_HASH_SHA512_256_Init           (CRYPTO_DRBG_HASH_SHA512_256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HASH_SHA512_256_Reseed         (CRYPTO_DRBG_HASH_SHA512_256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HASH_SHA512_256_Get            (CRYPTO_DRBG_HASH_SHA512_256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-1
*/
void     CRYPTO_DRBG_HMAC_SHA1_Init                 (CRYPTO_DRBG_HMAC_SHA1_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA1_Reseed               (CRYPTO_DRBG_HMAC_SHA1_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA1_Get                  (CRYPTO_DRBG_HMAC_SHA1_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-224
*/
void     CRYPTO_DRBG_HMAC_SHA224_Init               (CRYPTO_DRBG_HMAC_SHA224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA224_Reseed             (CRYPTO_DRBG_HMAC_SHA224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA224_Get                (CRYPTO_DRBG_HMAC_SHA224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-256
*/
void     CRYPTO_DRBG_HMAC_SHA256_Init               (CRYPTO_DRBG_HMAC_SHA256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA256_Reseed             (CRYPTO_DRBG_HMAC_SHA256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA256_Get                (CRYPTO_DRBG_HMAC_SHA256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-384
*/
void     CRYPTO_DRBG_HMAC_SHA384_Init               (CRYPTO_DRBG_HMAC_SHA384_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA384_Reseed             (CRYPTO_DRBG_HMAC_SHA384_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA384_Get                (CRYPTO_DRBG_HMAC_SHA384_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-512
*/
void     CRYPTO_DRBG_HMAC_SHA512_Init               (CRYPTO_DRBG_HMAC_SHA512_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA512_Reseed             (CRYPTO_DRBG_HMAC_SHA512_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA512_Get                (CRYPTO_DRBG_HMAC_SHA512_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-512/224
*/
void     CRYPTO_DRBG_HMAC_SHA512_224_Init           (CRYPTO_DRBG_HMAC_SHA512_224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA512_224_Reseed         (CRYPTO_DRBG_HMAC_SHA512_224_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA512_224_Get            (CRYPTO_DRBG_HMAC_SHA512_224_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       HMAC_DRBG using SHA-512/256
*/
void     CRYPTO_DRBG_HMAC_SHA512_256_Init           (CRYPTO_DRBG_HMAC_SHA512_256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_HMAC_SHA512_256_Reseed         (CRYPTO_DRBG_HMAC_SHA512_256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_HMAC_SHA512_256_Get            (CRYPTO_DRBG_HMAC_SHA512_256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       CTR_DRBG using AES128
*/
void     CRYPTO_DRBG_CTR_AES128_Init                (CRYPTO_DRBG_CTR_AES128_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_CTR_AES128_Reseed              (CRYPTO_DRBG_CTR_AES128_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_CTR_AES128_Get                 (CRYPTO_DRBG_CTR_AES128_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       CTR_DRBG using AES192
*/
void     CRYPTO_DRBG_CTR_AES192_Init                (CRYPTO_DRBG_CTR_AES192_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_CTR_AES192_Reseed              (CRYPTO_DRBG_CTR_AES192_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_CTR_AES192_Get                 (CRYPTO_DRBG_CTR_AES192_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       CTR_DRBG using AES256
*/
void     CRYPTO_DRBG_CTR_AES256_Init                (CRYPTO_DRBG_CTR_AES256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_CTR_AES256_Reseed              (CRYPTO_DRBG_CTR_AES256_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_CTR_AES256_Get                 (CRYPTO_DRBG_CTR_AES256_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       CTR_DRBG using TDES
*/
void     CRYPTO_DRBG_CTR_TDES_Init                  (CRYPTO_DRBG_CTR_TDES_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pNonce, unsigned NonceLen, const U8 *pPerso, unsigned PersoLen);
void     CRYPTO_DRBG_CTR_TDES_Reseed                (CRYPTO_DRBG_CTR_TDES_CONTEXT *pSelf, const U8 *pEntropy, unsigned EntropyLen, const U8 *pAdd, unsigned AddLen);
void     CRYPTO_DRBG_CTR_TDES_Get                   (CRYPTO_DRBG_CTR_TDES_CONTEXT *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pAdd, unsigned AddLen);

/*********************************************************************
*
*       FORTUNA-AES
*/
void     CRYPTO_FORTUNA_Init                        (CRYPTO_FORTUNA_CONTEXT *pSelf);
void     CRYPTO_FORTUNA_Kill                        (CRYPTO_FORTUNA_CONTEXT *pSelf);
int      CRYPTO_FORTUNA_Status                      (CRYPTO_FORTUNA_CONTEXT *pSelf);
void     CRYPTO_FORTUNA_Add                         (CRYPTO_FORTUNA_CONTEXT *pSelf, unsigned Source, const U8 *pData, unsigned DataLen);
void     CRYPTO_FORTUNA_AddEx                       (CRYPTO_FORTUNA_CONTEXT *pSelf, unsigned Source, unsigned Pool, const U8 *pData, unsigned DataLen);
void     CRYPTO_FORTUNA_Reseed                      (CRYPTO_FORTUNA_CONTEXT *pSelf);
void     CRYPTO_FORTUNA_Get                         (CRYPTO_FORTUNA_CONTEXT *pSelf, U8 *pData, unsigned DataLen);

/*********************************************************************
*
*       KDF1
*/
void     CRYPTO_KDF1_SHA1_Calc                      (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA1_CalcEx                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA224_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA224_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA256_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA256_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA384_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA384_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA512_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA512_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA512_224_Calc                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA512_224_CalcEx              (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA512_256_Calc                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA512_256_CalcEx              (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA3_224_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA3_224_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA3_256_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA3_256_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA3_384_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA3_384_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SHA3_512_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SHA3_512_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF1_SM3_Calc                       (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF1_SM3_CalcEx                     (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);

/*********************************************************************
*
*       KDF2
*/
void     CRYPTO_KDF2_SHA1_Calc                      (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA1_CalcEx                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA224_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA224_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA256_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA256_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA384_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA384_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA512_Calc                    (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA512_CalcEx                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA512_224_Calc                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA512_224_CalcEx              (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA512_256_Calc                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA512_256_CalcEx              (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA3_224_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA3_224_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA3_256_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA3_256_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA3_384_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA3_384_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SHA3_512_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SHA3_512_CalcEx                (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);
void     CRYPTO_KDF2_SM3_Calc                       (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_KDF2_SM3_CalcEx                     (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen, CRYPTO_LOGIC_OP Operation);

/*********************************************************************
*
*       X9.63 KDF
*/
void     CRYPTO_X9v63_KDF_SHA1_Calc                 (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA1_CalcEx               (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA224_Calc               (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA224_CalcEx             (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA256_Calc               (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA256_CalcEx             (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA384_Calc               (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA384_CalcEx             (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA512_Calc               (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA512_CalcEx             (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA512_224_Calc           (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA512_224_CalcEx         (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA512_256_Calc           (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SHA512_256_CalcEx         (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SM3_Calc                  (const U8 *pSeed, unsigned SeedLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_X9v63_KDF_SM3_CalcEx                (const U8 *pSeed, unsigned SeedLen, const U8 *pShared, unsigned SharedLen, U8 *pOutput, unsigned OutputLen);

/*********************************************************************
*
*       PBKDF2 functions
*/
void     CRYPTO_PBKDF2_HMAC_SHA1_Calc               (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SHA224_Calc             (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SHA256_Calc             (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SHA384_Calc             (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SHA512_Calc             (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SHA512_224_Calc         (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SHA512_256_Calc         (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_PBKDF2_HMAC_SM3_Calc                (const U8 *pPassword, unsigned PasswordLen, const U8 *pSalt, unsigned SaltLen, unsigned IterationCount, U8 *pOutput, unsigned OutputLen);

/*********************************************************************
*
*       HKDF functions
*/
void     CRYPTO_HKDF_MD5_Extract                    (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_MD5_Expand                     (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_MD5_Calc                       (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_RIPEMD160_Extract              (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_RIPEMD160_Expand               (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_RIPEMD160_Calc                 (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA1_Extract                   (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA1_Expand                    (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA1_Calc                      (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA224_Extract                 (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA224_Expand                  (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA224_Calc                    (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA256_Extract                 (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA256_Expand                  (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA256_Calc                    (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA384_Extract                 (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA384_Expand                  (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA384_Calc                    (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA512_Extract                 (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA512_Expand                  (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA512_Calc                    (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA512_224_Extract             (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA512_224_Expand              (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA512_224_Calc                (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA512_256_Extract             (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SHA512_256_Expand              (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SHA512_256_Calc                (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SM3_Extract                    (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, U8 *pPRK, unsigned PRKLen);
void     CRYPTO_HKDF_SM3_Expand                     (const U8 *pPRK,   unsigned PRKLen,   const U8 *pInfo, unsigned InfoLen,                                    U8 *pOutput, unsigned OutputLen);
void     CRYPTO_HKDF_SM3_Calc                       (const U8 *pInput, unsigned InputLen, const U8 *pSalt, unsigned SaltLen, const U8 *pInfo, unsigned InfoLen, U8 *pOutput, unsigned OutputLen);


/*********************************************************************
*
*       AES key wrap and unwrap
*/
void     CRYPTO_KW_AESKW_Wrap                       (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_AESKW_Unwrap                     (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_AESKWP_Wrap                      (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_AESKWP_Unwrap                    (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_AES_Wrap               (U8 *pOutput, const U8 *pICV, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_AES_Unwrap             (U8 *pICV, U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);

/*********************************************************************
*
*       ARIA key wrap and unwrap
*/
void     CRYPTO_KW_ARIAKW_Wrap                      (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_ARIAKW_Unwrap                    (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_ARIAKWP_Wrap                     (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_ARIAKWP_Unwrap                   (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_ARIA_Wrap              (U8 *pOutput, const U8 *pICV, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_ARIA_Unwrap            (U8 *pICV, U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);

/*********************************************************************
*
*       SEED key wrap and unwrap
*/
void     CRYPTO_KW_SEEDKW_Wrap                      (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_SEEDKW_Unwrap                    (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SEEDKWP_Wrap                     (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_SEEDKWP_Unwrap                   (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_SEED_Wrap              (U8 *pOutput, const U8 *pICV, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_SEED_Unwrap            (U8 *pICV, U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);

/*********************************************************************
*
*       Camellia key wrap and unwrap
*/
void     CRYPTO_KW_CAMELLIAKW_Wrap                  (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_CAMELLIAKW_Unwrap                (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_CAMELLIAKWP_Wrap                 (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_CAMELLIAKWP_Unwrap               (U8 *pOutput, const U8 *pInput, unsigned InputLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_CAMELLIA_Wrap          (U8 *pOutput, const U8 *pICV, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_CAMELLIA_Unwrap        (U8 *pICV, U8 *pOutput, const U8 *pKey, unsigned KeyLen, const U8 * pKEK, unsigned KEKLen);

/*********************************************************************
*
*       Twofish key wrap and unwrap
*/
void     CRYPTO_KW_TWOFISHKW_Wrap                   (U8 *pOutput, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_TWOFISHKW_Unwrap                 (U8 *pOutput, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_TWOFISHKWP_Wrap                  (U8 *pOutput, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
int      CRYPTO_KW_TWOFISHKWP_Unwrap                (U8 *pOutput, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_TWOFISH_Wrap           (U8 *pOutput, const U8 *pICV, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);
void     CRYPTO_KW_SP800_38F_TWOFISH_Unwrap         (U8 *pICV, U8 *pOutput, const U8 *pKey, unsigned KeyLen, const U8 *pKEK, unsigned KEKLen);

/*********************************************************************
*
*       TDES functions
*/
void     CRYPTO_TDES_InitEncrypt                    (CRYPTO_TDES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TDES_InitEncryptEx                  (CRYPTO_TDES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TDES_InitDecrypt                    (CRYPTO_TDES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TDES_InitDecryptEx                  (CRYPTO_TDES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TDES_Kill                           (CRYPTO_TDES_CONTEXT *pSelf);
void     CRYPTO_TDES_Encrypt                        (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_TDES_Decrypt                        (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_TDES_ECB_Encrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_TDES_ECB_Decrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_TDES_CBC_Encrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TDES_CBC_Decrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TDES_OFB_Encrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TDES_OFB_Decrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TDES_CTR_Encrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_TDES_CTR_Decrypt                    (CRYPTO_TDES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_TDES_Install                        (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_TDES_QueryInstall                   (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_TDES_IsInstalled                    (void);
int      CRYPTO_TDES_CheckParity                    (const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TDES_CorrectParity                  (U8 *pKey, unsigned KeyLen);
unsigned CRYPTO_TDES_InsertParity                   (U8 *pOutput, const U8 *pInput, unsigned InputLen);

/*********************************************************************
*
*       CAST5 functions.
*/
void     CRYPTO_CAST_InitEncrypt                    (CRYPTO_CAST_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CAST_InitDecrypt                    (CRYPTO_CAST_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CAST_Kill                           (CRYPTO_CAST_CONTEXT *pSelf);
void     CRYPTO_CAST_Encrypt                        (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CAST_Decrypt                        (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CAST_ECB_Encrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_CAST_ECB_Decrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_CAST_CBC_Encrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAST_CBC_Decrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAST_OFB_Encrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAST_OFB_Decrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAST_CTR_Encrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CAST_CTR_Decrypt                    (CRYPTO_CAST_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CAST_Install                        (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_CAST_QueryInstall                   (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_CAST_IsInstalled                    (void);

/*********************************************************************
*
*       AES management functions, user-supplied key size.
*/
void     CRYPTO_AES_InitEncrypt                     (CRYPTO_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_AES_InitDecrypt                     (CRYPTO_AES_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_AES_Kill                            (CRYPTO_AES_CONTEXT *pSelf);
void     CRYPTO_AES_Encrypt                         (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_AES_Decrypt                         (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_AES_ECB_Encrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_AES_ECB_Decrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_AES_CBC_Encrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_AES_CBC_Decrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_AES_OFB_Encrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_AES_OFB_Decrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_AES_CTR_Encrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_AES_CTR_Decrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_AES_CCM_Encrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_AES_CCM_Decrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_AES_GCM_Encrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_AES_GCM_Decrypt                     (CRYPTO_AES_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_AES_Install                         (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_AES_QueryInstall                    (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_AES_IsInstalled                     (void);

/*********************************************************************
*
*       ARIA functions.
*/
void     CRYPTO_ARIA_InitEncrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_ARIA_InitDecrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_ARIA_Kill                           (CRYPTO_ARIA_CONTEXT *pSelf);
void     CRYPTO_ARIA_Encrypt                        (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_ARIA_Decrypt                        (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_ARIA_ECB_Encrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_ARIA_ECB_Decrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_ARIA_CBC_Encrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_ARIA_CBC_Decrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_ARIA_OFB_Encrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_ARIA_OFB_Decrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_ARIA_CTR_Encrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_ARIA_CTR_Decrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_ARIA_CCM_Encrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_ARIA_CCM_Decrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_ARIA_GCM_Encrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_ARIA_GCM_Decrypt                    (CRYPTO_ARIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_ARIA_Install                        (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_ARIA_QueryInstall                   (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_ARIA_IsInstalled                    (void);

/*********************************************************************
*
*       SEED functions.
*/
void     CRYPTO_SEED_InitEncrypt                    (CRYPTO_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_SEED_InitDecrypt                    (CRYPTO_SEED_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_SEED_Kill                           (CRYPTO_SEED_CONTEXT *pSelf);
void     CRYPTO_SEED_Encrypt                        (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_SEED_Decrypt                        (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_SEED_ECB_Encrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_SEED_ECB_Decrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_SEED_CBC_Encrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_SEED_CBC_Decrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_SEED_OFB_Encrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_SEED_OFB_Decrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_SEED_CTR_Encrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_SEED_CTR_Decrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_SEED_CCM_Encrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_SEED_CCM_Decrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_SEED_GCM_Encrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_SEED_GCM_Decrypt                    (CRYPTO_SEED_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_SEED_Install                        (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_SEED_QueryInstall                   (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_SEED_IsInstalled                    (void);

/*********************************************************************
*
*       Camellia functions.
*/
void     CRYPTO_CAMELLIA_InitEncrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CAMELLIA_InitDecrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CAMELLIA_Kill                       (CRYPTO_CAMELLIA_CONTEXT *pSelf);
void     CRYPTO_CAMELLIA_Encrypt                    (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CAMELLIA_Decrypt                    (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CAMELLIA_ECB_Encrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_CAMELLIA_ECB_Decrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_CAMELLIA_CBC_Encrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAMELLIA_CBC_Decrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAMELLIA_OFB_Encrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAMELLIA_OFB_Decrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_CAMELLIA_CTR_Encrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CAMELLIA_CTR_Decrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CAMELLIA_CCM_Encrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CAMELLIA_CCM_Decrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CAMELLIA_GCM_Encrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CAMELLIA_GCM_Decrypt                (CRYPTO_CAMELLIA_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CAMELLIA_Install                    (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_CAMELLIA_QueryInstall               (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_CAMELLIA_IsInstalled                (void);

/*********************************************************************
*
*       Blowfish functions.
*/
void     CRYPTO_BLOWFISH_InitEncrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_BLOWFISH_InitDecrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_BLOWFISH_Kill                       (CRYPTO_BLOWFISH_CONTEXT *pSelf);
void     CRYPTO_BLOWFISH_Encrypt                    (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_BLOWFISH_Decrypt                    (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_BLOWFISH_ECB_Encrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_BLOWFISH_ECB_Decrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_BLOWFISH_CBC_Encrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_BLOWFISH_CBC_Decrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_BLOWFISH_OFB_Encrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_BLOWFISH_OFB_Decrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_BLOWFISH_CTR_Encrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_BLOWFISH_CTR_Decrypt                (CRYPTO_BLOWFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_BLOWFISH_Install                    (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_BLOWFISH_QueryInstall               (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_BLOWFISH_IsInstalled                (void);

/*********************************************************************
*
*       Twofish functions.
*/
void     CRYPTO_TWOFISH_InitEncrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TWOFISH_InitDecrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_TWOFISH_Kill                        (CRYPTO_TWOFISH_CONTEXT *pSelf);
void     CRYPTO_TWOFISH_Encrypt                     (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_TWOFISH_Decrypt                     (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_TWOFISH_ECB_Encrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_TWOFISH_ECB_Decrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_TWOFISH_CBC_Encrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TWOFISH_CBC_Decrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TWOFISH_OFB_Encrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TWOFISH_OFB_Decrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV);
void     CRYPTO_TWOFISH_CTR_Encrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_TWOFISH_CTR_Decrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_TWOFISH_CCM_Encrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_TWOFISH_CCM_Decrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_TWOFISH_GCM_Encrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_TWOFISH_GCM_Decrypt                 (CRYPTO_TWOFISH_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_TWOFISH_Install                     (const CRYPTO_CIPHER_API *pHWAPI, const CRYPTO_CIPHER_API *pSWAPI);
void     CRYPTO_TWOFISH_QueryInstall                (const CRYPTO_CIPHER_API **ppHWAPI, const CRYPTO_CIPHER_API **ppSWAPI);
int      CRYPTO_TWOFISH_IsInstalled                 (void);

/*********************************************************************
*
*       Internal ChaCha20 cipher.
*/
void     CRYPTO_CHACHA20_InitEncrypt_32_96          (CRYPTO_CHACHA20_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CHACHA20_InitDecrypt_32_96          (CRYPTO_CHACHA20_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CHACHA20_InitEncrypt_64_64          (CRYPTO_CHACHA20_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CHACHA20_InitDecrypt_64_64          (CRYPTO_CHACHA20_CONTEXT *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CHACHA20_Encrypt                    (CRYPTO_CHACHA20_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_CHACHA20_Decrypt                    (CRYPTO_CHACHA20_CONTEXT *pSelf, U8 *pOutput, const U8 *pInput, unsigned Len);
void     CRYPTO_CHACHA20_SetPos                     (CRYPTO_CHACHA20_CONTEXT *pSelf, U64 Pos);
void     CRYPTO_CHACHA20_SetIV                      (CRYPTO_CHACHA20_CONTEXT *pSelf, const U8 *pIV);
void     CRYPTO_CHACHA20_Kill                       (CRYPTO_CHACHA20_CONTEXT *pSelf);
void     CRYPTO_CHACHA20_POLY1305_GenKey            (U8 *pOutput, const U8 *pKey, const U8 *pNonce);
void     CRYPTO_CHACHA20_POLY1305_Encrypt           (CRYPTO_CHACHA20_CONTEXT *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CHACHA20_POLY1305_Decrypt           (CRYPTO_CHACHA20_CONTEXT *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       XTS-AES
*/
void     CRYPTO_XTS_AES_Encrypt                     (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);
void     CRYPTO_XTS_AES_Decrypt                     (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);

/*********************************************************************
*
*       XTS-ARIA
*/
void     CRYPTO_XTS_ARIA_Encrypt                    (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);
void     CRYPTO_XTS_ARIA_Decrypt                    (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);

/*********************************************************************
*
*       XTS-Camellia
*/
void     CRYPTO_XTS_CAMELLIA_Encrypt                (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);
void     CRYPTO_XTS_CAMELLIA_Decrypt                (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);

/*********************************************************************
*
*       XTS-SEED
*/
void     CRYPTO_XTS_SEED_Encrypt                    (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);
void     CRYPTO_XTS_SEED_Decrypt                    (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);

/*********************************************************************
*
*       XTS-Twofish
*/
void     CRYPTO_XTS_TWOFISH_Encrypt                 (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);
void     CRYPTO_XTS_TWOFISH_Decrypt                 (U8 *pOutput, U64 UnitNumber, const U8 *pInput, unsigned Len, const U8 *pKey1, const U8 *pKey2, unsigned KeyLen);

/*********************************************************************
*
*       RC4 functions
*/
void     CRYPTO_RC4_Prepare                         (CRYPTO_RC4_CONTEXT *pContext, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_RC4_Encrypt                         (CRYPTO_RC4_CONTEXT *pContext, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_RC4_Decrypt                         (CRYPTO_RC4_CONTEXT *pContext, U8 *pOutput, const U8 *pInput, unsigned InputLen);

/*********************************************************************
*
*       Generic AES functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_AES_InitEncrypt              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_AES_InitDecrypt              (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_AES_128_InitEncrypt          (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_AES_128_InitDecrypt          (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_AES_192_InitEncrypt          (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_AES_192_InitDecrypt          (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_AES_256_InitEncrypt          (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_AES_256_InitDecrypt          (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_AES_Encrypt                  (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_AES_Decrypt                  (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_AES_ECB_Encrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_AES_ECB_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_AES_CBC_Encrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_AES_CBC_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_AES_OFB_Encrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_AES_OFB_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_AES_CTR_Encrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_AES_CTR_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_AES_CTR_0_16_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_AES_CTR_0_16_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_AES_CTR_12_4_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_AES_CTR_12_4_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_AES_CCM_Encrypt              (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_AES_CCM_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CIPHER_AES_GCM_Encrypt              (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_AES_GCM_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       Generic ARIA functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_ARIA_InitEncrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_ARIA_InitDecrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_ARIA_128_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_ARIA_128_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_ARIA_192_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_ARIA_192_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_ARIA_256_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_ARIA_256_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_ARIA_Encrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_ARIA_Decrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_ARIA_ECB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_ARIA_ECB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_ARIA_CBC_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_ARIA_CBC_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_ARIA_OFB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_ARIA_OFB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_ARIA_CTR_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_ARIA_CTR_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_ARIA_CTR_0_16_Encrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_ARIA_CTR_0_16_Decrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_ARIA_CTR_12_4_Encrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_ARIA_CTR_12_4_Decrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_ARIA_CCM_Encrypt             (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_ARIA_CCM_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CIPHER_ARIA_GCM_Encrypt             (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_ARIA_GCM_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       Generic SEED functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_SEED_InitEncrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_SEED_InitDecrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_SEED_128_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_SEED_128_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_SEED_Encrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_SEED_Decrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_SEED_ECB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_SEED_ECB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_SEED_CBC_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_SEED_CBC_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_SEED_OFB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_SEED_OFB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_SEED_CTR_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_SEED_CTR_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_SEED_CTR_0_16_Encrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_SEED_CTR_0_16_Decrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_SEED_CTR_12_4_Encrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_SEED_CTR_12_4_Decrypt        (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_SEED_CCM_Encrypt             (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_SEED_CCM_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CIPHER_SEED_GCM_Encrypt             (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_SEED_GCM_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       Generic Camellia functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_CAMELLIA_InitEncrypt         (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_CAMELLIA_InitDecrypt         (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_CAMELLIA_128_InitEncrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAMELLIA_128_InitDecrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAMELLIA_192_InitEncrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAMELLIA_192_InitDecrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAMELLIA_256_InitEncrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAMELLIA_256_InitDecrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAMELLIA_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_CAMELLIA_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_CAMELLIA_ECB_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_CAMELLIA_ECB_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_CAMELLIA_CBC_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAMELLIA_CBC_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAMELLIA_OFB_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAMELLIA_OFB_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAMELLIA_CTR_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_CAMELLIA_CTR_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_CAMELLIA_CTR_0_16_Encrypt    (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAMELLIA_CTR_0_16_Decrypt    (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAMELLIA_CTR_12_4_Encrypt    (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAMELLIA_CTR_12_4_Decrypt    (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAMELLIA_CCM_Encrypt         (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_CAMELLIA_CCM_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CIPHER_CAMELLIA_GCM_Encrypt         (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_CAMELLIA_GCM_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       Generic Twofish functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_TWOFISH_InitEncrypt          (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_TWOFISH_InitDecrypt          (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_TWOFISH_Encrypt              (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_TWOFISH_Decrypt              (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_TWOFISH_128_InitEncrypt      (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_TWOFISH_128_InitDecrypt      (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_TWOFISH_192_InitEncrypt      (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_TWOFISH_192_InitDecrypt      (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_TWOFISH_256_InitEncrypt      (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_TWOFISH_256_InitDecrypt      (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_TWOFISH_ECB_Encrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_TWOFISH_ECB_Decrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_TWOFISH_CBC_Encrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TWOFISH_CBC_Decrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TWOFISH_OFB_Encrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TWOFISH_OFB_Decrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TWOFISH_CTR_Encrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_TWOFISH_CTR_Decrypt          (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_TWOFISH_CTR_0_16_Encrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TWOFISH_CTR_0_16_Decrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TWOFISH_CTR_12_4_Encrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TWOFISH_CTR_12_4_Decrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TWOFISH_CCM_Encrypt          (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_TWOFISH_CCM_Decrypt          (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
void     CRYPTO_CIPHER_TWOFISH_GCM_Encrypt          (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_TWOFISH_GCM_Decrypt          (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       Generic Blowfish functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_BLOWFISH_InitEncrypt         (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_BLOWFISH_InitDecrypt         (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_BLOWFISH_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_BLOWFISH_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_BLOWFISH_128_InitEncrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_BLOWFISH_128_InitDecrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_BLOWFISH_192_InitEncrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_BLOWFISH_192_InitDecrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_BLOWFISH_256_InitEncrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_BLOWFISH_256_InitDecrypt     (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_BLOWFISH_ECB_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_BLOWFISH_ECB_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_BLOWFISH_CBC_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_BLOWFISH_CBC_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_BLOWFISH_OFB_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_BLOWFISH_OFB_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_BLOWFISH_CTR_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_BLOWFISH_CTR_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_BLOWFISH_CTR_0_8_Encrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_BLOWFISH_CTR_0_8_Decrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_BLOWFISH_CTR_4_4_Encrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_BLOWFISH_CTR_4_4_Decrypt     (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);

/*********************************************************************
*
*       Generic TDES functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_TDES_InitEncrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_TDES_InitDecrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_TDES_64_InitEncrypt          (void *pSelf, const U8 *pKey);  // 56 key bits, 8 parity buts, 64 bits total
void     CRYPTO_CIPHER_TDES_64_InitDecrypt          (void *pSelf, const U8 *pKey);  // 56 key bits, 8 parity buts, 164 bits total
void     CRYPTO_CIPHER_TDES_128_InitEncrypt         (void *pSelf, const U8 *pKey);  // 112 key bits, 16 parity buts, 128 bits total
void     CRYPTO_CIPHER_TDES_128_InitDecrypt         (void *pSelf, const U8 *pKey);  // 112 key bits, 16 parity buts, 128 bits total
void     CRYPTO_CIPHER_TDES_192_InitEncrypt         (void *pSelf, const U8 *pKey);  // 168 key bits, 24 parity bits, 192 bits total
void     CRYPTO_CIPHER_TDES_192_InitDecrypt         (void *pSelf, const U8 *pKey);  // 168 key bits, 24 parity bits, 192 bits total
void     CRYPTO_CIPHER_TDES_Encrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_TDES_Decrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_TDES_ECB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_TDES_ECB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_TDES_CBC_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TDES_CBC_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TDES_OFB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TDES_OFB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_TDES_CTR_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_TDES_CTR_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_TDES_CTR_0_8_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TDES_CTR_0_8_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TDES_CTR_4_4_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_TDES_CTR_4_4_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);

/*********************************************************************
*
*       Generic CAST functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_CAST_InitEncrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_CAST_InitDecrypt             (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_CAST_Encrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_CAST_Decrypt                 (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_CAST_128_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAST_128_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAST_192_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAST_192_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAST_256_InitEncrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAST_256_InitDecrypt         (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CAST_ECB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_CAST_ECB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen);
void     CRYPTO_CIPHER_CAST_CBC_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAST_CBC_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAST_OFB_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAST_OFB_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pIV);
void     CRYPTO_CIPHER_CAST_CTR_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_CAST_CTR_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen);
void     CRYPTO_CIPHER_CAST_CTR_0_8_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAST_CTR_0_8_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAST_CTR_4_4_Encrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);
void     CRYPTO_CIPHER_CAST_CTR_4_4_Decrypt         (void *pSelf, U8 *pOutput, const U8 *pInput, unsigned InputLen, U8 *pCTR);

/*********************************************************************
*
*       Generic ChaCha20 functions that conform to the CIPHER API.
*/
void     CRYPTO_CIPHER_CHACHA20_InitEncrypt         (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_CHACHA20_InitDecrypt         (void *pSelf, const U8 *pKey, unsigned KeyLen);
void     CRYPTO_CIPHER_CHACHA20_InitEncrypt_32_96   (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CHACHA20_InitDecrypt_32_96   (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CHACHA20_InitEncrypt_64_64   (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CHACHA20_InitDecrypt_64_64   (void *pSelf, const U8 *pKey);
void     CRYPTO_CIPHER_CHACHA20_Encrypt             (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_CHACHA20_Decrypt             (void *pSelf, U8 *pOutput, const U8 *pInput);
void     CRYPTO_CIPHER_CHACHA20_POLY1305_Encrypt    (void *pSelf, U8 *pOutput,       U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);
int      CRYPTO_CIPHER_CHACHA20_POLY1305_Decrypt    (void *pSelf, U8 *pOutput, const U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen);

/*********************************************************************
*
*       Generic block cipher functions
*/
void     CRYPTO_CIPHER_ECB_Encrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len,          const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_ECB_Decrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len,          const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_CBC_Encrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_CBC_Decrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_OFB_Encrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_OFB_Decrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pIV, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_CTR_Encrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_CTR_Decrypt                  (void *pContext, U8 *pOutput, const U8 *pInput, unsigned Len, U8 *pCTR, unsigned CTRIndex, unsigned CTRLen, const CRYPTO_CIPHER_API *pAPI);

/*********************************************************************
*
*       Generic GCM mode functions
*/
void     CRYPTO_CIPHER_GCM_GF128_Multiply           (U8 *Z, const U8 *X, const U8 *Y);
void     CRYPTO_CIPHER_CCM_Cipher                   (void *pContext, U8 *pOutput, U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen, int Encrypt, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_GCM_Cipher                   (void *pContext, U8 *pOutput, U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen, int Encrypt, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_GCM_Plain_Cipher             (void *pContext, U8 *pOutput, U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen, int Encrypt, const CRYPTO_CIPHER_API *pAPI);
void     CRYPTO_CIPHER_GCM_Shoup_8b_Cipher          (void *pContext, U8 *pOutput, U8 *pTag, unsigned TagLen, const U8 *pInput, unsigned InputLen, const U8 *pAAD, unsigned AADLen, const U8 *pIV, unsigned IVLen, int Encrypt, const CRYPTO_CIPHER_API *pAPI);

/*********************************************************************
*
*       Global management functions
*/
void     CRYPTO_MPI_Init                            (CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_MPI_Kill                            (CRYPTO_MPI *pSelf);
void     CRYPTO_MPI_Evict                           (CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_Reserve                         (CRYPTO_MPI *pSelf, unsigned LimbCnt);
void     CRYPTO_MPI_Clear                           (CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_Shrink                          (CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Low-level access and manipulation functions
*/
unsigned CRYPTO_MPI_RdBit                           (const CRYPTO_MPI *pSelf, unsigned BitIndex);
U32      CRYPTO_MPI_RdBits                          (const CRYPTO_MPI *pSelf, unsigned BitIndex, unsigned Width);
U8       CRYPTO_MPI_RdByte                          (const CRYPTO_MPI *pSelf, unsigned ByteIndex);
int      CRYPTO_MPI_SetBit                          (CRYPTO_MPI *pSelf, unsigned BitIndex);
void     CRYPTO_MPI_ClrBit                          (CRYPTO_MPI *pSelf, unsigned BitIndex);
int      CRYPTO_MPI_WrBit                           (CRYPTO_MPI *pSelf, unsigned BitIndex, int Value);
void     CRYPTO_MPI_TrimBits                        (CRYPTO_MPI *pSelf, unsigned BitWidth);
void     CRYPTO_MPI_TrimLimbs                       (CRYPTO_MPI *pSelf, unsigned LimbCnt);
unsigned CRYPTO_MPI_BitCount                        (const CRYPTO_MPI *pSelf);
unsigned CRYPTO_MPI_ByteCount                       (const CRYPTO_MPI *pSelf);
unsigned CRYPTO_MPI_ByteCount_ASN1                  (const CRYPTO_MPI *pSelf);
unsigned CRYPTO_MPI_LSB                             (const CRYPTO_MPI *pSelf);
unsigned CRYPTO_MPI_MSB                             (const CRYPTO_MPI *pSelf);
unsigned CRYPTO_MPI_Unsigned                        (const CRYPTO_MPI *pSelf);
unsigned CRYPTO_MPI_LimbsRequired                   (unsigned BitLen);
U64      CRYPTO_MPI_AsU64                           (const CRYPTO_MPI *pSelf);
U32      CRYPTO_MPI_AsU32                           (const CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Assignment functions
*/
int      CRYPTO_MPI_Assign                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue);
int      CRYPTO_MPI_AssignUnsigned                  (CRYPTO_MPI *pSelf, unsigned Value);
int      CRYPTO_MPI_AssignU32                       (CRYPTO_MPI *pSelf, U32 Value);
int      CRYPTO_MPI_AssignU64                       (CRYPTO_MPI *pSelf, U64 Value);
int      CRYPTO_MPI_AssignInt                       (CRYPTO_MPI *pSelf, int Value);
int      CRYPTO_MPI_Move                            (CRYPTO_MPI *pSelf, CRYPTO_MPI *pValue);        // Self = Value, clear Value
void     CRYPTO_MPI_Equate                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue);  // Self is equivalent to Value (shares limbs!)
void     CRYPTO_MPI_Exchange                        (CRYPTO_MPI *pX, CRYPTO_MPI *pY);

/*********************************************************************
*
*       Comparison functions
*/
int      CRYPTO_MPI_Compare                         (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_MagCompare                      (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_IsZero                          (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsNonzero                       (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsOne                           (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsPositive                      (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsNegative                      (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsGreaterZero                   (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsEven                          (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsOdd                           (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsEqual                         (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_IsNotEqual                      (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_IsGreater                       (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_IsGreaterEqual                  (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_IsLess                          (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_IsLessEqual                     (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY);
int      CRYPTO_MPI_Sgn                             (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_Min                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pOther);
int      CRYPTO_MPI_Max                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pOther);
int      CRYPTO_MPI_CheckGreaterZero                (const CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Addition functions
*/
int      CRYPTO_MPI_Add                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue);
int      CRYPTO_MPI_AddEx                           (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pAugend, const CRYPTO_MPI *pAdded);
int      CRYPTO_MPI_AddSmall                        (CRYPTO_MPI *pSelf, CRYPTO_MPI_LIMB Value);
int      CRYPTO_MPI_AddUnsigned                     (CRYPTO_MPI *pSelf, unsigned Value);
int      CRYPTO_MPI_ModAdd                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue, const CRYPTO_MPI *pModulus);
int      CRYPTO_MPI_ModAddEx                        (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, const CRYPTO_MPI *pModulus);
int      CRYPTO_MPI_Inc                             (CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_ModInc                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus);

/*********************************************************************
*
*       Subtraction functions
*/
int      CRYPTO_MPI_Sub                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue);
int      CRYPTO_MPI_SubUnsigned                     (CRYPTO_MPI *pSelf, unsigned Value);
int      CRYPTO_MPI_ModSub                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue, const CRYPTO_MPI *pModulus);
int      CRYPTO_MPI_ModSubEx                        (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, const CRYPTO_MPI *pModulus);
void     CRYPTO_MPI_Neg                             (CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_ModNeg                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus);
int      CRYPTO_MPI_RevSub                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue);  // Self = Value - Self
int      CRYPTO_MPI_ModRevSub                       (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue, const CRYPTO_MPI *pModulus);
int      CRYPTO_MPI_Dec                             (CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_ModDec                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus);
void     CRYPTO_MPI_Abs                             (CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Multiplication functions, including modular version
*/
int      CRYPTO_MPI_Mul                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_MulEx                           (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplicand, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Mul_Partial                     (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, unsigned Cutoff, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_MulUnsigned                     (CRYPTO_MPI *pSelf, unsigned Multiplier, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_MulLimb                         (CRYPTO_MPI *pSelf, unsigned Multiplier);
int      CRYPTO_MPI_ModMul                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModMulEx                        (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplicand, const CRYPTO_MPI *pMultiplier, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModMul2                         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus);
int      CRYPTO_MPI_Mul_Schoolbook                  (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Mul_Schoolbook_Partial          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, unsigned Cutoff, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Mul_Comba                       (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Mul_Comba_Partial               (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, unsigned Cutoff, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Square                          (CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_SquareEx                        (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pInput, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModSquare                       (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModSquareEx                     (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pInput, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Mul2                            (CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Division functions, including division with remainder and square root
*/
int      CRYPTO_MPI_Div                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDivisor, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_RevDiv                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDividend, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_DivUnsigned                     (CRYPTO_MPI *pSelf, unsigned Divisor, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Mod                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModUnsigned                     (CRYPTO_MPI *pSelf, unsigned Modulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModEx                           (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDividend, const CRYPTO_MPI *pDivisor, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_DivMod                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDivisor, CRYPTO_MPI *pRemainder, CRYPTO_MEM_CONTEXT *pMem);     // Quotient and remainder
int      CRYPTO_MPI_ModDiv                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDivisor, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem); // Modular division, Self * Divisor^(-1) mod Modulus
int      CRYPTO_MPI_CeilDiv                         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDivisor, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Div2                            (CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_Sqrt                            (CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModSqrt                         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModDiv2                         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pModulus);
unsigned CRYPTO_MPI_MakeOdd                         (CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Shifting functions
*/
int      CRYPTO_MPI_ShiftLeft                       (CRYPTO_MPI *pSelf, unsigned BitCnt);
void     CRYPTO_MPI_ShiftRight                      (CRYPTO_MPI *pSelf, unsigned BitCnt);
void     CRYPTO_MPI_ShiftRightLimbs                 (CRYPTO_MPI *pSelf, unsigned LimbCnt);
int      CRYPTO_MPI_ExtractBits                     (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pSource, unsigned LowBit, unsigned BitCnt);

/*********************************************************************
*
*       Logical functions
*/
int      CRYPTO_MPI_Xor                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue);

/*********************************************************************
*
*       Exponentiation functions, including modular inverse
*/
int      CRYPTO_MPI_Exp                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_2Exp                            (CRYPTO_MPI *pSelf, unsigned Exponent);
int      CRYPTO_MPI_2ExpMinusOne                    (CRYPTO_MPI *pSelf, unsigned Exponent);
int      CRYPTO_MPI_ModExp                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModInv                          (CRYPTO_MPI *pSelf,                              const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModInvEx                        (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pValue,    const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp2Pow                      (CRYPTO_MPI *pSelf, unsigned PowerOfTwo,         const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Basic_Fast               (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_Ladder             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Basic_2b_RM              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_3b_RM              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_4b_RM              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_5b_RM              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_6b_RM              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Basic_2b_FW              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_3b_FW              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_4b_FW              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_5b_FW              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Basic_6b_FW              (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Montgomery_Fast          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_Ladder        (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Montgomery_2b_RM         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_3b_RM         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_4b_RM         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_5b_RM         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_6b_RM         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Montgomery_2b_FW         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_3b_FW         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_4b_FW         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_5b_FW         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Montgomery_6b_FW         (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Barrett_Fast             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_Ladder           (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Barrett_2b_RM            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_3b_RM            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_4b_RM            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_5b_RM            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_6b_RM            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_MPI_ModExp_Barrett_2b_FW            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_3b_FW            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_4b_FW            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_5b_FW            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_ModExp_Barrett_6b_FW            (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pExponent, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Number theoretic functions and algorithms
*/
int      CRYPTO_MPI_GCD                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_LCM                             (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_GCD_Euclid                      (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_GCD_Binary                      (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_GCD_Lehmer                      (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_Jacobi                          (int *pSymbol, const CRYPTO_MPI *pA, const CRYPTO_MPI *pP, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_IsCoprime                       (const CRYPTO_MPI *pX, const CRYPTO_MPI *pY, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Random number generation functions
*/
int      CRYPTO_MPI_RandomBits                      (CRYPTO_MPI *pSelf, unsigned BitCnt);                // [0..2^BitCnt-1]
int      CRYPTO_MPI_Random                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMax);         // [0..Max-1]
int      CRYPTO_MPI_NonzeroRandom                   (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMax);         // [1..Max-1]
int      CRYPTO_MPI_NonzeroRandomEx                 (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMax, int N);  // [1..Max-1+N]

/*********************************************************************
*
*       Access functions
*/
int      CRYPTO_MPI_IsReadOnly                      (const CRYPTO_MPI *pSelf);
int      CRYPTO_MPI_IsReadWrite                     (const CRYPTO_MPI *pSelf);

/*********************************************************************
*
*       Input/output functions
*/
int      CRYPTO_MPI_LoadHex                         (CRYPTO_MPI *pSelf, const char *sText, int *pOK);
int      CRYPTO_MPI_LoadHexTLV                      (CRYPTO_MPI *pSelf, CRYPTO_TLV *pTLV,  int *pOK);
int      CRYPTO_MPI_LoadHexLE                       (CRYPTO_MPI *pSelf, const char *sText);
int      CRYPTO_MPI_LoadDecimal                     (CRYPTO_MPI *pSelf, const char *sText, int *pOK);
int      CRYPTO_MPI_LoadDecimalTLV                  (CRYPTO_MPI *pSelf, CRYPTO_TLV *pTLV,  int *pOK);
int      CRYPTO_MPI_Load                            (CRYPTO_MPI *pSelf, const char *sText, int *pOK);
int      CRYPTO_MPI_LoadTLV                         (CRYPTO_MPI *pSelf, CRYPTO_TLV *pTLV,  int *pOK);
int      CRYPTO_MPI_LoadText                        (CRYPTO_MPI *pSelf, const char *sText);
int      CRYPTO_MPI_LoadBytes                       (CRYPTO_MPI *pSelf, const U8 *pData, unsigned DataLen);
int      CRYPTO_MPI_LoadBytesLE                     (CRYPTO_MPI *pSelf, const U8 *pData, unsigned DataLen);
int      CRYPTO_MPI_LoadBits                        (CRYPTO_MPI *pSelf, const U8 *pData, unsigned DataLen, unsigned LoadBitLen);
void     CRYPTO_MPI_StoreBytes                      (const CRYPTO_MPI *pSelf, U8 *pData, unsigned DataLen);
void     CRYPTO_MPI_StoreBytesLE                    (const CRYPTO_MPI *pSelf, U8 *pData, unsigned DataLen);
int      CRYPTO_MPI_FormatDecimal                   (const CRYPTO_MPI *pSelf, char *sText, unsigned TextLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_FormatHex                       (const CRYPTO_MPI *pSelf, char *sText, unsigned TextLen);

/*********************************************************************
*
*       Prime testing
*/
int      CRYPTO_MPI_IsFermatProbablePrime           (const CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_IsMRProbablePrime               (const CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_IsMRProbablePrimeEx             (const CRYPTO_MPI *pSelf, unsigned Trials, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_IsProbableSafePrime             (const CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_QuerySmallPrimeFactor           (const CRYPTO_MPI *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_MPI_IsProvableSmallPrime            (U32 pSelf);
unsigned CRYPTO_MPI_P1363_CalcMRTrials              (unsigned BitCnt);

/*********************************************************************
*
*       Prime generation
*/
int      CRYPTO_PRIME_FindPrime                     (CRYPTO_MPI *pPrime, unsigned BitCnt, const CRYPTO_MPI *pQ, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_PRIME_FindPrimeFrom                 (CRYPTO_MPI *pPrime, const CRYPTO_MPI *pQ, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_PRIME_FindCoprime                   (CRYPTO_MPI *pPrime, const CRYPTO_MPI *pMin, const CRYPTO_MPI *pMax, const CRYPTO_MPI *pF, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       DH key agreement
*/
void     CRYPTO_DH_KA_Init                          (CRYPTO_DH_KA_CONTEXT *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DH_KA_Start                         (CRYPTO_DH_KA_CONTEXT *pSelf, const CRYPTO_MPI *pGenerator, const CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DH_KA_GenKeys                       (CRYPTO_DH_KA_CONTEXT *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DH_KA_Agree                         (CRYPTO_DH_KA_CONTEXT *pSelf, const CRYPTO_MPI *pPeer, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DH_KA_Kill                          (CRYPTO_DH_KA_CONTEXT *pSelf);

/*********************************************************************
*
*       ECDH key agreement
*/
void     CRYPTO_ECDH_KA_Init                        (CRYPTO_ECDH_KA_CONTEXT *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDH_KA_Start                       (CRYPTO_ECDH_KA_CONTEXT *pSelf, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDH_KA_StartEx                     (CRYPTO_ECDH_KA_CONTEXT *pSelf, const CRYPTO_MPI *pD, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDH_KA_Agree                       (CRYPTO_ECDH_KA_CONTEXT *pSelf, const CRYPTO_EC_POINT *pPeer, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDH_KA_Kill                        (CRYPTO_ECDH_KA_CONTEXT *pSelf);

/*********************************************************************
*
*       RSA key functions
*/
void     CRYPTO_RSA_InitPublicKey                   (CRYPTO_RSA_PUBLIC_KEY  *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_InitPrivateKey                  (CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_KillPublicKey                   (CRYPTO_RSA_PUBLIC_KEY  *pSelf);
void     CRYPTO_RSA_KillPrivateKey                  (CRYPTO_RSA_PRIVATE_KEY *pSelf);

/*********************************************************************
*
*       Cryptographic functions on blocks of data
*/
int      CRYPTO_RSA_Encrypt                         (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_Decrypt                         (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Cryptographic functions on MPI
*/
int      CRYPTO_RSA_EncryptMPI                      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, CRYPTO_MPI *pText, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_DecryptMPI                      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MPI *pText, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_DecryptMPINonCRT                (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MPI *pText, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_EncryptMPIToMPI                 (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, CRYPTO_MPI *pOutput, const CRYPTO_MPI *pInput, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_DecryptMPIToMPI                 (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MPI *pOutput, const CRYPTO_MPI *pInput, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSA utility functions
*/
int      CRYPTO_RSA_RecoverModulus                  (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MPI *pModulus, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_ModulusBits                     (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_ModulusBytes                    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_ModulusBytes_ASN1               (const CRYPTO_RSA_PRIVATE_KEY *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_IsConsistentPair                (const CRYPTO_RSA_PUBLIC_KEY  *pPublicKey, const CRYPTO_RSA_PRIVATE_KEY *pPrivateKey, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSA key setup
*/
int      CRYPTO_RSA_ConstructKeys                   (CRYPTO_RSA_PRIVATE_KEY *pPrivateKey, CRYPTO_RSA_PUBLIC_KEY *pPublicKey, CRYPTO_MPI *pP, CRYPTO_MPI *pQ, const CRYPTO_MPI *pExponent, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_CalcDecryptExponent             (CRYPTO_RSA_PRIVATE_KEY *pPrivateKey, const CRYPTO_RSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       P1363 RSA keypair generation
*/
int      CRYPTO_RSA_P1363_GenKeys                   (CRYPTO_RSA_PRIVATE_KEY *pPrivateKey, CRYPTO_RSA_PUBLIC_KEY *pPublicKey, unsigned ModulusBits, const CRYPTO_MPI *pExponent, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       FIPS186 RSA prime and key-pair generation
*/
int      CRYPTO_RSA_FIPS186_ValidateParaSize        (unsigned L);
int      CRYPTO_RSA_FIPS186_GenPrime                (CRYPTO_MPI *pPrime, unsigned PrimeLen, U8 *pSeed, unsigned SeedLen, const CRYPTO_MPI *pE, const CRYPTO_FIPS186_PRIMEGEN_API *pPrimeAPI, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_FIPS186_GenPrimePair            (CRYPTO_MPI *pP, CRYPTO_MPI *pQ, U8 *pSeed, unsigned SeedLen, unsigned ModulusLen, const CRYPTO_MPI *pE, const CRYPTO_FIPS186_PRIMEGEN_API *pPrimeAPI, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_FIPS186_GenKeys                 (CRYPTO_RSA_PRIVATE_KEY *pPrivateKey, CRYPTO_RSA_PUBLIC_KEY *pPublicKey, U8 *pSeed, unsigned SeedLen, unsigned ModulusBits, const CRYPTO_MPI *pExponent, const CRYPTO_FIPS186_PRIMEGEN_API *pPrimeAPI, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSAES-OAEP encryption
*/
int      CRYPTO_RSAES_OAEP_KDF1_SHA1_Encrypt        (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA224_Encrypt      (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA256_Encrypt      (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA384_Encrypt      (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA512_Encrypt      (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA512_224_Encrypt  (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA512_256_Encrypt  (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_224_Encrypt    (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_256_Encrypt    (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_384_Encrypt    (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_512_Encrypt    (const CRYPTO_RSA_PUBLIC_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSAES-OAEP decryption
*/
int      CRYPTO_RSAES_OAEP_KDF1_SHA1_Decrypt        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA224_Decrypt      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA256_Decrypt      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA384_Decrypt      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA512_Decrypt      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA512_224_Decrypt  (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA512_256_Decrypt  (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_224_Decrypt    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_256_Decrypt    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_384_Decrypt    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_OAEP_KDF1_SHA3_512_Decrypt    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, const U8 *pLabel, unsigned LabelLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSAES-PKCS1-v1_5 encryption scheme
*/
int      CRYPTO_RSAES_PKCS1_Encrypt                 (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSAES_PKCS1_Decrypt                 (const CRYPTO_RSA_PRIVATE_KEY *pSelf, U8 *pOutput, unsigned OutputLen, const U8 *pInput, unsigned InputLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSA_PKCS1_Unwrap                    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pInput, unsigned InputLen, U8 *pOutput, unsigned OutputLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSASSA-PSS signature scheme with appendix
*/
int      CRYPTO_RSASSA_PSS_SHA1_Sign                (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA224_Sign              (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA256_Sign              (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA384_Sign              (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_Sign              (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_224_Sign          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_256_Sign          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_224_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_256_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_384_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_512_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA1_Verify              (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA224_Verify            (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA256_Verify            (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA384_Verify            (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_Verify            (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_224_Verify        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_256_Verify        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_224_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_256_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_384_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_512_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSASSA-PKCS1-v1_5 signature scheme with appendix
*/
int      CRYPTO_RSASSA_PKCS1_SHA1_Sign              (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA224_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA256_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA384_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_Sign            (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_224_Sign        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_256_Sign        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_224_Sign          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_256_Sign          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_384_Sign          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_512_Sign          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessage, unsigned MessageLen, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA1_Verify            (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA224_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA256_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA384_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_Verify          (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_224_Verify      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_256_Verify      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_224_Verify        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_256_Verify        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_384_Verify        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_512_Verify        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessage, unsigned MessageLen, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSASSA-PSS signature scheme with appendix
*/
int      CRYPTO_RSASSA_PSS_SHA1_SignDigest          (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA224_SignDigest        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA256_SignDigest        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA384_SignDigest        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_SignDigest        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_224_SignDigest    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_256_SignDigest    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_224_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_256_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_384_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_512_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA1_VerifyDigest        (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA224_VerifyDigest      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA256_VerifyDigest      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA384_VerifyDigest      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_VerifyDigest      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_224_VerifyDigest  (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA512_256_VerifyDigest  (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_224_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_256_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_384_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PSS_SHA3_512_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       RSASSA-PKCS1-v1_5 signature scheme with appendix
*/
int      CRYPTO_RSASSA_PKCS1_SHA1_SignDigest        (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA224_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA256_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA384_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_SignDigest      (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_224_SignDigest  (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_256_SignDigest  (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_224_SignDigest    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_256_SignDigest    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_384_SignDigest    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_512_SignDigest    (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pMessageHash, const U8 *pSalt, unsigned SaltLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA1_VerifyDigest      (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA224_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA256_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA384_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_VerifyDigest    (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_224_VerifyDigest(const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA512_256_VerifyDigest(const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_224_VerifyDigest  (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_256_VerifyDigest  (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_384_VerifyDigest  (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_RSASSA_PKCS1_SHA3_512_VerifyDigest  (const CRYPTO_RSA_PUBLIC_KEY  *pSelf, const U8 *pMessageHash, U8 *pSalt, unsigned SaltLen, const U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Lower-level support functions.
*/
int      CRYPTO_RSASSA_PKCS1_SignDigest             (const CRYPTO_RSA_PRIVATE_KEY *pSelf, const U8 *pDigest, unsigned DigestLen, U8 *pSignature, unsigned SignatureLen, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Global management functions
*/
void     CRYPTO_DSA_InitDomainParams                (CRYPTO_DSA_DOMAIN_PARAMS *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_InitPublicKey                   (CRYPTO_DSA_PUBLIC_KEY    *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_InitPrivateKey                  (CRYPTO_DSA_PRIVATE_KEY   *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_InitSignature                   (CRYPTO_DSA_SIGNATURE     *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_KillDomainParams                (CRYPTO_DSA_DOMAIN_PARAMS *pSelf);
void     CRYPTO_DSA_KillPublicKey                   (CRYPTO_DSA_PUBLIC_KEY    *pSelf);
void     CRYPTO_DSA_KillPrivateKey                  (CRYPTO_DSA_PRIVATE_KEY   *pSelf);
void     CRYPTO_DSA_KillSignature                   (CRYPTO_DSA_SIGNATURE     *pSelf);

/*********************************************************************
*
*       FIPS 186-1 and 186-4 sign and verify entire messages (hash is preselected)
*/
int      CRYPTO_DSA_SHA1_Sign                       (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA224_Sign                     (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA256_Sign                     (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA384_Sign                     (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA512_Sign                     (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA512_224_Sign                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA512_256_Sign                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_224_Sign                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_256_Sign                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_384_Sign                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_512_Sign                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA1_Verify                     (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA224_Verify                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA256_Verify                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA384_Verify                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA512_Verify                   (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA512_224_Verify               (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA512_256_Verify               (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_224_Verify                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_256_Verify                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_384_Verify                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SHA3_512_Verify                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Sign and verify hashed messages.
*/
int      CRYPTO_DSA_SignDigest                      (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pDigest, unsigned DigestLen,                             CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_SignDigestWithK                 (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pDigest, unsigned DigestLen, const CRYPTO_MPI *pK,       CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_VerifyDigest                    (const CRYPTO_DSA_DOMAIN_PARAMS *pParams, const CRYPTO_DSA_PUBLIC_KEY  *pKey, const U8 *pDigest, unsigned DigestLen,                       const CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Predicates testing signature.
*/
int      CRYPTO_DSA_IsValidSignature                (const CRYPTO_DSA_SIGNATURE *pSelf);

/*********************************************************************
*
*       Key generation
*/
int      CRYPTO_DSA_GenDomainParas                  (CRYPTO_DSA_DOMAIN_PARAMS *pParas, unsigned L, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_GenKeys                         (const CRYPTO_DSA_DOMAIN_PARAMS *pParas, CRYPTO_DSA_PRIVATE_KEY *pPrivateKey, CRYPTO_DSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       FIPS186-4 DSA domain generation
*/
int      CRYPTO_DSA_FIPS186_ValidateParas           (unsigned L, unsigned N);
int      CRYPTO_DSA_FIPS186_GenDomainParas          (CRYPTO_DSA_DOMAIN_PARAMS *pPara, unsigned L, unsigned N, const CRYPTO_FIPS186_PRIMEGEN_API *pPrimeAPI, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Deterministic signature generation according to RFC6979.
*/
int      CRYPTO_DSA_RFC6979_SHA1_Sign               (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA224_Sign             (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA256_Sign             (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA384_Sign             (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA512_Sign             (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA512_224_Sign         (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA512_256_Sign         (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA3_224_Sign           (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA3_256_Sign           (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA3_384_Sign           (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_DSA_RFC6979_SHA3_512_Sign           (const CRYPTO_DSA_DOMAIN_PARAMS *pPara, const CRYPTO_DSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_DSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Elliptic curve points.
*/
void     CRYPTO_EC_CURVE_Add                        (const CRYPTO_EC_CURVE *pCurve);
int      CRYPTO_EC_CURVE_FindByOID                  (const CRYPTO_EC_CURVE **ppCurve, const U8 *pOID, unsigned OIDLen);

/*********************************************************************
*
*       Elliptic curve points.
*/
void     CRYPTO_EC_InitPoint                        (CRYPTO_EC_POINT *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_KillPoint                        (CRYPTO_EC_POINT *pSelf);
void     CRYPTO_EC_EvictPoint                       (CRYPTO_EC_POINT *pSelf);
int      CRYPTO_EC_MovePoint                        (CRYPTO_EC_POINT *pSelf, CRYPTO_EC_POINT *pValue);
int      CRYPTO_EC_AssignPoint                      (CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_POINT *pValue);
int      CRYPTO_EC_AssignInf                        (CRYPTO_EC_POINT *pSelf);
int      CRYPTO_EC_IsInf                            (const CRYPTO_EC_POINT *pSelf);

/*********************************************************************
*
*       Format conversion.
*/
void     CRYPTO_EC_WrPointUncompressed              (CRYPTO_BUFFER *pBuffer, const CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_CURVE *pCurve);
void     CRYPTO_EC_WrPointCompressed                (CRYPTO_BUFFER *pBuffer, const CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_CURVE *pCurve);
void     CRYPTO_EC_WrPointHybrid                    (CRYPTO_BUFFER *pBuffer, const CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_CURVE *pCurve);
int      CRYPTO_CMS_RdECPoint_Uncompressed          (CRYPTO_TLV *pTLV, CRYPTO_EC_POINT *pPoint, const CRYPTO_EC_CURVE *pCurve);
int      CRYPTO_CMS_RdECParameters_PKIX             (CRYPTO_TLV *pSelf, CRYPTO_TLV *pOID);

/*********************************************************************
*
*       Curves.
*/
void     CRYPTO_EC_InitCurve                        (CRYPTO_EC_CURVE *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_KillCurve                        (CRYPTO_EC_CURVE *pSelf);
int      CRYPTO_EC_Affine_QueryOnCurve              (const CRYPTO_EC_POINT *pPoint, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Projective_QueryOnCurve          (const CRYPTO_EC_POINT *pPoint, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_IsEqual_Affine                   (const CRYPTO_EC_POINT *pX, const CRYPTO_EC_POINT *pY);

/*********************************************************************
*
*       Representation conversions.
*/
int      CRYPTO_EC_IsAffine                         (const CRYPTO_EC_POINT *pSelf);
int      CRYPTO_EC_IsProjective                     (const CRYPTO_EC_POINT *pSelf);
int      CRYPTO_EC_MakeAffine                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_MakeProjective                   (CRYPTO_EC_POINT *pSelf);

/*********************************************************************
*
*       Point multiplication (affine or projective coordinates)
*/
int      CRYPTO_EC_Mul                              (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_Basic                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_2b_FW                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_3b_FW                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_4b_FW                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_5b_FW                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_6b_FW                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_2b_RM                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_3b_RM                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_4b_RM                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_5b_RM                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_6b_RM                        (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_2w_NAF                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_3w_NAF                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_4w_NAF                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_5w_NAF                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_6w_NAF                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_EC_TwinMul                          (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pD0, const CRYPTO_EC_POINT *pS, const CRYPTO_MPI *pD1, const CRYPTO_EC_POINT *pT, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Curve25519, X25519.
*/
int      CRYPTO_EC_Curve25519_Clamp                 (CRYPTO_MPI *pX);
int      CRYPTO_EC_X25519_Mul                       (CRYPTO_MPI *pX, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_X25519_BaseMul                   (CRYPTO_MPI *pX, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Curve448, X448.
*/
int      CRYPTO_EC_Curve448_Clamp                   (CRYPTO_MPI *pX);
int      CRYPTO_EC_X448_Mul                         (CRYPTO_MPI *pX, const CRYPTO_MPI *pMultiplier, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Low-level curve arithmetic (affine coordinates).
*/
int      CRYPTO_EC_Add_Affine                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_POINT *pValue, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul2_Affine                      (CRYPTO_EC_POINT *pSelf,                                const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_Affine                       (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK,          const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Low-level curve arithmetic (projective coordinates).
*/
int      CRYPTO_EC_Add_Projective                   (CRYPTO_EC_POINT *pSelf, const CRYPTO_EC_POINT *pValue, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Sub_Projective                   (CRYPTO_EC_POINT *pSelf,       CRYPTO_EC_POINT *pValue, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul2_Projective                  (CRYPTO_EC_POINT *pSelf,                                const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul2Pow_Projective               (CRYPTO_EC_POINT *pSelf, unsigned N,                    const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EC_Mul_Projective                   (CRYPTO_EC_POINT *pSelf, const CRYPTO_MPI *pK,          const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Low-level field arithmetic.
*/
int      CRYPTO_ECC_ModMul                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pMultiplier, const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECC_ModSquare                       (CRYPTO_MPI *pSelf,                                const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECC_ModDiv                          (CRYPTO_MPI *pSelf, const CRYPTO_MPI *pDivisor,    const CRYPTO_EC_CURVE *pCurve, CRYPTO_MEM_CONTEXT *pMem);


/*********************************************************************
*
*       Global management functions
*/
void     CRYPTO_ECDSA_InitPublicKey                 (CRYPTO_ECDSA_PUBLIC_KEY  *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_InitPrivateKey                (CRYPTO_ECDSA_PRIVATE_KEY *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_InitSignature                 (CRYPTO_ECDSA_SIGNATURE   *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_KillPublicKey                 (CRYPTO_ECDSA_PUBLIC_KEY  *pSelf);
void     CRYPTO_ECDSA_KillPrivateKey                (CRYPTO_ECDSA_PRIVATE_KEY *pSelf);
void     CRYPTO_ECDSA_KillSignature                 (CRYPTO_ECDSA_SIGNATURE   *pSelf);

/*********************************************************************
*
*       FIPS 186-1 and 186-4 sign and verify entire messages (hash is preselected)
*/
int      CRYPTO_ECDSA_SHA1_Sign                     (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA224_Sign                   (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA256_Sign                   (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA384_Sign                   (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA512_Sign                   (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA512_224_Sign               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA512_256_Sign               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_224_Sign                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_256_Sign                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_384_Sign                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_512_Sign                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_ECDSA_SHA1_Verify                   (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA224_Verify                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA256_Verify                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA384_Verify                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA512_Verify                 (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA512_224_Verify             (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA512_256_Verify             (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_224_Verify               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_256_Verify               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_384_Verify               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SHA3_512_Verify               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pMessage, unsigned MessageLen, const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Sign and verify hashed messaged.
*/
int      CRYPTO_ECDSA_SignDigest                    (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, unsigned DigestLen,                             CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_SignDigestWithK               (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, unsigned DigestLen, const CRYPTO_MPI *pK,       CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_VerifyDigest                  (const CRYPTO_EC_CURVE *pParams, const CRYPTO_ECDSA_PUBLIC_KEY  *pKey, const U8 *pDigest, unsigned DigestLen,                       const CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Predicates testing signature.
*/
int      CRYPTO_ECDSA_IsValidSignature              (const CRYPTO_ECDSA_SIGNATURE *pSelf);

/*********************************************************************
*
*       Key generation.
*/
int      CRYPTO_ECDSA_GenKeys                       (const CRYPTO_EC_CURVE *pCurve, CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_ECDSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_CalcPublicKey                 (CRYPTO_ECDSA_PUBLIC_KEY *pPublicKey, const CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_QueryValidPublicKey           (CRYPTO_ECDSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       Deterministic signature generation according to RFC6979.
*/
int      CRYPTO_ECDSA_RFC6979_SHA1_Sign             (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA224_Sign           (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA256_Sign           (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA384_Sign           (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA512_Sign           (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA512_224_Sign       (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA512_256_Sign       (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_224_Sign         (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_256_Sign         (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_384_Sign         (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_512_Sign         (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pMessage, unsigned MessageLen, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_ECDSA_RFC6979_SHA1_SignDigest       (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA224_SignDigest     (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA256_SignDigest     (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA384_SignDigest     (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA512_SignDigest     (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA512_224_SignDigest (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA512_256_SignDigest (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_224_SignDigest   (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_256_SignDigest   (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_384_SignDigest   (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_ECDSA_RFC6979_SHA3_512_SignDigest   (const CRYPTO_EC_CURVE *pCurve, const CRYPTO_ECDSA_PRIVATE_KEY *pKey, const U8 *pDigest, CRYPTO_ECDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);

/*********************************************************************
*
*       EdDSA signature scheme.
*/
void     CRYPTO_EdDSA_InitPublicKey                 (CRYPTO_EdDSA_PUBLIC_KEY  *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EdDSA_InitPrivateKey                (CRYPTO_EdDSA_PRIVATE_KEY *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EdDSA_InitSignature                 (CRYPTO_EdDSA_SIGNATURE   *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EdDSA_KillPublicKey                 (CRYPTO_EdDSA_PUBLIC_KEY  *pSelf);
void     CRYPTO_EdDSA_KillPrivateKey                (CRYPTO_EdDSA_PRIVATE_KEY *pSelf);
void     CRYPTO_EdDSA_KillSignature                 (CRYPTO_EdDSA_SIGNATURE   *pSelf);

/*********************************************************************
*
*       Ed25519 signatures.
*/
int      CRYPTO_EdDSA_Ed25519_Sign                  (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pMessage, unsigned MessageLen,                                                CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_SignEx                (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pMessage, unsigned MessageLen, const U8 *pContext, unsigned ContextLen,       CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_SignDigest            (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pDigest,  unsigned DigestLen,                                                 CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_Verify                (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,                                              const U8 *pMessage, unsigned MessageLen,                                          const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_VerifyEx              (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pMessage, unsigned MessageLen, const U8 *pContext, unsigned ContextLen,  const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_VerifyDigest          (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pDigest,  unsigned DigestLen,                                            const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_CalcPublicKey         (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_EdDSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_GenKeys               (      CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_EdDSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_GenKeysEx             (      CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_EdDSA_PUBLIC_KEY *pPublicKey, const U8 *pSeed, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed25519_RdPrivateKey          (      CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pInput);
void     CRYPTO_EdDSA_Ed25519_WrPrivateKey          (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey,       U8 *pOutput);
int      CRYPTO_EdDSA_Ed25519_RdPublicKey           (      CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pInput);
void     CRYPTO_EdDSA_Ed25519_WrPublicKey           (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,        U8 *pOutput);
int      CRYPTO_EdDSA_Ed25519_RdSignature           (      CRYPTO_EdDSA_SIGNATURE   *pSignature,  const U8 *pInput);
void     CRYPTO_EdDSA_Ed25519_WrSignature           (const CRYPTO_EdDSA_SIGNATURE   *pSignature,        U8 *pOutput);

/*********************************************************************
*
*       Ed448 signatures.
*/
int      CRYPTO_EdDSA_Ed448_Sign                    (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pMessage, unsigned MessageLen,                                                 CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_SignEx                  (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pMessage, unsigned MessageLen, const U8 *pContext, unsigned ContextLen,        CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_SignDigest              (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pDigest,  unsigned DigestLen,                                                  CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_SignDigestEx            (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pDigest,  unsigned DigestLen,  const U8 *pContext, unsigned ContextLen,        CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_Verify                  (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pMessage, unsigned MessageLen,                                           const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_VerifyEx                (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pMessage, unsigned MessageLen, const U8 *pContext, unsigned ContextLen,  const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_VerifyDigest            (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pDigest,  unsigned DigestLen,                                            const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_VerifyDigestEx          (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pDigest,  unsigned DigestLen,  const U8 *pContext, unsigned ContextLen,  const CRYPTO_EdDSA_SIGNATURE *pSignature, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_CalcPublicKey           (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_EdDSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_GenKeys                 (CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_EdDSA_PUBLIC_KEY *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_GenKeysEx               (CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_EdDSA_PUBLIC_KEY *pPublicKey, const U8 *pSeed, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_EdDSA_Ed448_RdPrivateKey            (      CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey, const U8 *pInput);
void     CRYPTO_EdDSA_Ed448_WrPrivateKey            (const CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey,       U8 *pOutput);
int      CRYPTO_EdDSA_Ed448_RdPublicKey             (      CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,  const U8 *pInput);
void     CRYPTO_EdDSA_Ed448_WrPublicKey             (const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey,        U8 *pOutput);
int      CRYPTO_EdDSA_Ed448_RdSignature             (      CRYPTO_EdDSA_SIGNATURE   *pSignature,  const U8 *pInput);
void     CRYPTO_EdDSA_Ed448_WrSignature             (const CRYPTO_EdDSA_SIGNATURE   *pSignature,        U8 *pOutput);

/*********************************************************************
*
*       I/O of keys and other items.
*/
CRYPTO_IO_CONTENT_TYPE CRYPTO_IO_Probe              (CRYPTO_TLV *pTLV);
void     CRYPTO_IO_MPI_WrHex                        (CRYPTO_BUFFER *pBuffer, const CRYPTO_MPI *pValue);
void     CRYPTO_IO_RSA_SEGGER_WrPublicKey           (CRYPTO_BUFFER *pBuffer, const CRYPTO_RSA_PUBLIC_KEY  *pPublicKey);
void     CRYPTO_IO_RSA_SEGGER_WrPrivateKey          (CRYPTO_BUFFER *pBuffer, const CRYPTO_RSA_PRIVATE_KEY *pPrivateKey);
void     CRYPTO_IO_RSA_PEM_WrPrivateKey             (CRYPTO_BUFFER *pBuffer, const CRYPTO_RSA_PUBLIC_KEY *pPublicKey, const CRYPTO_RSA_PRIVATE_KEY *pPrivateKey);
void     CRYPTO_IO_RSA_PEM_WrPublicKeyInfo          (CRYPTO_BUFFER *pBuffer, const CRYPTO_RSA_PUBLIC_KEY *pPublicKey);
void     CRYPTO_IO_RSA_SEGGER_WrSignature           (CRYPTO_BUFFER *pBuffer, const CRYPTO_MPI *pSignature);
void     CRYPTO_IO_DSA_SEGGER_WrPublicKey           (CRYPTO_BUFFER *pBuffer, const CRYPTO_DSA_DOMAIN_PARAMS *pDomainParas, const CRYPTO_DSA_PUBLIC_KEY  *pPublicKey);
void     CRYPTO_IO_DSA_SEGGER_WrPrivateKey          (CRYPTO_BUFFER *pBuffer, const CRYPTO_DSA_DOMAIN_PARAMS *pDomainParas, const CRYPTO_DSA_PRIVATE_KEY *pPrivateKey);
void     CRYPTO_IO_EC_SEGGER_WrPublicKey            (CRYPTO_BUFFER *pBuffer, const CRYPTO_ECDSA_PUBLIC_KEY  *pPublicKey,  const CRYPTO_EC_CURVE *pCurve);
void     CRYPTO_IO_EC_SEGGER_WrPrivateKey           (CRYPTO_BUFFER *pBuffer, const CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey, const CRYPTO_EC_CURVE *pCurve);
void     CRYPTO_IO_EC_SEGGER_WrSignature            (CRYPTO_BUFFER *pBuffer, const CRYPTO_ECDSA_SIGNATURE *pSignature);
void     CRYPTO_IO_EC_PEM_WrPrivateKey              (CRYPTO_BUFFER *pBuffer, const CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey);
void     CRYPTO_IO_Ed_SEGGER_WrPublicKey            (CRYPTO_BUFFER *pBuffer, const CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey);
void     CRYPTO_IO_Ed_SEGGER_WrPrivateKey           (CRYPTO_BUFFER *pBuffer, const CRYPTO_EdDSA_PRIVATE_KEY  *pPublicKey);
int      CRYPTO_IO_RSA_SEGGER_RdPublicKey           (CRYPTO_TLV *pTLV, CRYPTO_RSA_PUBLIC_KEY    *pPublicKey);
int      CRYPTO_IO_RSA_SEGGER_RdPrivateKey          (CRYPTO_TLV *pTLV, CRYPTO_RSA_PRIVATE_KEY   *pPrivateKey);
int      CRYPTO_IO_RSA_PEM_RdPublicKey              (CRYPTO_TLV *pTLV, CRYPTO_RSA_PUBLIC_KEY    *pPublicKey);
int      CRYPTO_IO_RSA_PEM_RdPrivateKey             (CRYPTO_TLV *pTLV, CRYPTO_RSA_PRIVATE_KEY   *pPrivateKey);
int      CRYPTO_IO_RSA_SEGGER_RdSignature           (CRYPTO_TLV *pTLV, CRYPTO_MPI               *pSignature);
int      CRYPTO_IO_EC_SEGGER_RdPublicKey            (CRYPTO_TLV *pTLV, CRYPTO_ECDSA_PUBLIC_KEY  *pPublicKey);
int      CRYPTO_IO_EC_SEGGER_RdPrivateKey           (CRYPTO_TLV *pTLV, CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey);
int      CRYPTO_IO_EC_PEM_RdPublicKey               (CRYPTO_TLV *pTLV, CRYPTO_ECDSA_PUBLIC_KEY  *pPublicKey, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_IO_EC_PEM_RdPrivateKey              (CRYPTO_TLV *pTLV, CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey);
int      CRYPTO_IO_EC_SEGGER_RdSignature            (CRYPTO_TLV *pTLV, CRYPTO_ECDSA_SIGNATURE   *pSignature);
int      CRYPTO_IO_Ed_SEGGER_RdPublicKey            (CRYPTO_TLV *pTLV, CRYPTO_EdDSA_PUBLIC_KEY  *pPublicKey);
int      CRYPTO_IO_Ed_SEGGER_RdPrivateKey           (CRYPTO_TLV *pTLV, CRYPTO_EdDSA_PRIVATE_KEY *pPrivateKey);

/*********************************************************************
*
*       Random number interface (with entropy source).
*/
void     CRYPTO_RNG_Install                         (const CRYPTO_RNG_API *pSecureAPI);
void     CRYPTO_RNG_InstallEx                       (const CRYPTO_RNG_API *pSecureAPI,   const CRYPTO_RNG_API *pEntropyAPI);
void     CRYPTO_RNG_QueryInstall                    (const CRYPTO_RNG_API **ppSecureAPI);
void     CRYPTO_RNG_QueryInstallEx                  (const CRYPTO_RNG_API **ppSecureAPI, const CRYPTO_RNG_API **ppEntopyAPI);
void     CRYPTO_RNG_Get                             (U8 *pData, unsigned DataLen);
void     CRYPTO_RNG_GetNonzero                      (U8 *pData, unsigned DataLen);

/*********************************************************************
*
*       Translate OID between dotted-decimal and internal form.
*/
int      CRYPTO_OID_Encode                          (U8 *pBinary, unsigned BinaryLen, const char *sText);
int      CRYPTO_OID_Decode                          (char *sText, unsigned TextLen, const U8 *pOID, unsigned OIDLen);

/*********************************************************************
*
*       BASE64 encode and decode functions
*/
unsigned CRYPTO_BASE64_Encode                       (const U8 *pInput, unsigned InputLen, U8 *pOutput, unsigned OutputLen, unsigned Flags);
unsigned CRYPTO_BASE64_Decode                       (const U8 *pInput, unsigned InputLen, U8 *pOutput, unsigned OutputLen);
unsigned CRYPTO_BASE64_DecodeInPlace                (U8 *pData, unsigned DataLen);

/*********************************************************************
*
*       ASN.1 support
*/
void     CRYPTO_ASN1_WrL                            (CRYPTO_BUFFER *pSelf, U32 L);
void     CRYPTO_ASN1_WrUInt                         (CRYPTO_BUFFER *pSelf, U32 Value);
void     CRYPTO_ASN1_WrMPI                          (CRYPTO_BUFFER *pSelf, const CRYPTO_MPI *pValue);
void     CRYPTO_ASN1_PatchL                         (CRYPTO_BUFFER *pSelf, unsigned Mark);

/*********************************************************************
*
*       CMS
*/
int      CRYPTO_CMS_Rd_GCMParameters                (CRYPTO_TLV *pTLV, CRYPTO_CMS_GCM_CCM_PARAMETERS *pParas);
int      CRYPTO_CMS_Rd_CCMParameters                (CRYPTO_TLV *pTLV, CRYPTO_CMS_GCM_CCM_PARAMETERS *pParas);

/*********************************************************************
*
*       X.509 parsing
*/
int      CRYPTO_X509_ParseName                      (CRYPTO_TLV *pSelf, CRYPTO_X509_NAME_DATA *pName);
void     CRYPTO_X509_InitCertificate                (CRYPTO_X509_CERTIFICATE_DATA *pSelf, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_X509_RdCertificate                  (CRYPTO_TLV *pSelf, CRYPTO_X509_CERTIFICATE_DATA *pCert, CRYPTO_MEM_CONTEXT *pMem);
int      CRYPTO_X509_PEM_RdCertificate              (CRYPTO_TLV *pSelf, CRYPTO_X509_CERTIFICATE_DATA *pCert, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_X509_FreeCertificate                (CRYPTO_X509_CERTIFICATE_DATA *pSelf);
int      CRYPTO_X509_ParseAlgorithmIdentifier       (CRYPTO_TLV *pSelf, CRYPTO_TLV *pAlgorithm, CRYPTO_TLV *pParameters);
int      CRYPTO_X509_ParseRSAPrivateKey             (CRYPTO_TLV *pSelf, CRYPTO_RSA_PRIVATE_KEY *pPrivateKey);
int      CRYPTO_X509_ParseRSAPublicKeyInfo          (CRYPTO_TLV *pSelf, CRYPTO_RSA_PUBLIC_KEY *pPublicKey);
int      CRYPTO_X509_RdECPrivateKey                 (CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey, CRYPTO_TLV *pSelf);
int      CRYPTO_X509_OID_Match                      (const CRYPTO_TLV  *pTLV, const void *pOID, unsigned OIDLen);
int      CRYPTO_X509_MatchDN                        (const CRYPTO_TLV *pDN1, const CRYPTO_TLV *pDN2);
void     CRYPTO_X509_WrRSAPrivateKey                (CRYPTO_BUFFER *pSelf, const CRYPTO_RSA_PUBLIC_KEY *pPublicKey, const CRYPTO_RSA_PRIVATE_KEY *pPrivateKey);
void     CRYPTO_X509_WrRSAPublicKey                 (CRYPTO_BUFFER *pSelf, const CRYPTO_RSA_PUBLIC_KEY *pPublicKey);
void     CRYPTO_X509_WrRSAPublicKeyInfo             (CRYPTO_BUFFER *pSelf, const CRYPTO_RSA_PUBLIC_KEY *pPublicKey);
void     CRYPTO_X509_WrECPrivateKey                 (CRYPTO_BUFFER *pBuffer, const CRYPTO_ECDSA_PUBLIC_KEY *pPublicKey, const CRYPTO_ECDSA_PRIVATE_KEY *pPrivateKey);
U32      CRYPTO_X509_CalcJulianDate                 (unsigned Year, unsigned Mon, unsigned Day);
U32      CRYPTO_X509_CalcUnixTime                   (const CRYPTO_CALENDAR_TIME *pTime);
U64      CRYPTO_X509_CalcUnixTimeEx                 (const CRYPTO_CALENDAR_TIME *pTime);
void     CRYPTO_X509_CalcGregorianDate              (CRYPTO_CALENDAR_TIME *pTime, U32 JD);
void     CRYPTO_X509_CalcDateTime                   (CRYPTO_CALENDAR_TIME *pTime, U32 UnixTime);
void     CRYPTO_X509_CalcDateTimeEx                 (CRYPTO_CALENDAR_TIME *pTime, U64 UnixTime);
int      CRYPTO_X509_IsSelfSigned                   (CRYPTO_X509_CERTIFICATE_DATA *pSelf);
//
void     CRYPTO_X509_InitPublicKeyInfo              (CRYPTO_X509_PUBLIC_KEY_INFO *pSelf, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_X509_KillPublicKeyInfo              (CRYPTO_X509_PUBLIC_KEY_INFO *pSelf);
int      CRYPTO_X509_RdPublicKeyInfo                (CRYPTO_X509_PUBLIC_KEY_INFO *pInfo, CRYPTO_TLV *pSelf);
int      CRYPTO_X509_ExpandPublicKeyInfo            (CRYPTO_X509_PUBLIC_KEY_INFO *pInfo, CRYPTO_MEM_CONTEXT *pMem);
//
int      CRYPTO_X509_FindExtension                  (CRYPTO_X509_CERTIFICATE_DATA *pCert, const U8 *pOID, unsigned OIDLen, CRYPTO_X509_EXTENSION_DATA *pOutput);
int      CRYPTO_X509_IterateExtensions              (CRYPTO_X509_CERTIFICATE_DATA *pCert, CRYPTO_X509_EXTENSION_CALLBACK_FUNC *pfCallback, void *pCallbackContext);
int      CRYPTO_X509_DecodeSignatureAlgorithmOID    (const CRYPTO_TLV *pOID, CRYPTO_SIGNATURE_SCHEME_ID *pID);

/*********************************************************************
*
*       X.509 certificate chain validation
*/
void     CRYPTO_X509_InitValidator                  (CRYPTO_X509_VALIDATION_CONTEXT *pContext, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_X509_SetDate                        (CRYPTO_X509_VALIDATION_CONTEXT *pContext, U64 UnixDate);
int      CRYPTO_X509_AddCertificate                 (CRYPTO_X509_VALIDATION_CONTEXT *pContext, CRYPTO_X509_CERTIFICATE_DATA *pNewCert);
void     CRYPTO_X509_KillValidator                  (CRYPTO_X509_VALIDATION_CONTEXT *pContext);

/*********************************************************************
*
*       TLV parsing
*/
void     CRYPTO_TLV_Init                            (CRYPTO_TLV *pSelf);
void     CRYPTO_TLV_Copy                            (CRYPTO_TLV *pSelf, const CRYPTO_TLV *pItem);
void     CRYPTO_TLV_Prepare                         (CRYPTO_TLV *pSelf, const void *pData, unsigned DataLen);
unsigned CRYPTO_TLV_PeekTag                         (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_Read                            (CRYPTO_TLV *pSelf, void *pTo, unsigned Len);
int      CRYPTO_TLV_PeekU8                          (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_ReadU8                          (CRYPTO_TLV *pSelf);
I32      CRYPTO_TLV_ReadU16                         (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_ReadU24                         (CRYPTO_TLV *pSelf, U32 *pData);
int      CRYPTO_TLV_ReadU32                         (CRYPTO_TLV *pSelf, U32 *pData);
int      CRYPTO_TLV_Accept                          (CRYPTO_TLV *pSelf, const void *pData, unsigned DataLen);
int      CRYPTO_TLV_AcceptStr                       (CRYPTO_TLV *pSelf, const char *sText);
int      CRYPTO_TLV_Capture                         (CRYPTO_TLV *pSelf, CRYPTO_TLV *pValue, unsigned Tag);
int      CRYPTO_TLV_CaptureValue                    (CRYPTO_TLV *pSelf, CRYPTO_TLV *pValue, U32 Len);
void     CRYPTO_TLV_CaptureTo                       (CRYPTO_TLV *pSelf, CRYPTO_TLV *pString, U8 Delim);
void     CRYPTO_TLV_CaptureToNL                     (CRYPTO_TLV *pSelf, CRYPTO_TLV *pString);
int      CRYPTO_TLV_EnsureBytes                     (CRYPTO_TLV *pSelf, unsigned Len);
int      CRYPTO_TLV_SkipBytes                       (CRYPTO_TLV *pSelf, unsigned Len);
void     CRYPTO_TLV_SkipNL                          (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_Trim                            (CRYPTO_TLV *pSelf, unsigned Len);
int      CRYPTO_TLV_Close                           (CRYPTO_TLV *pSelf);
void     CRYPTO_TLV_ForceClose                      (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_ParseTagAndLength               (CRYPTO_TLV *pSelf, unsigned Tag, unsigned *pLen);
int      CRYPTO_TLV_ParseINTEGER                    (CRYPTO_TLV *pSelf, CRYPTO_MPI *pMPI);
int      CRYPTO_TLV_ParseBoolean                    (CRYPTO_TLV *pSelf, U8 *pBool);
int      CRYPTO_TLV_SkipINTEGER                     (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_CheckNull                       (CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_IsCompletelyRead                (const CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_IsValueEqual                    (CRYPTO_TLV *pSelf, const U8 *pValue, unsigned ValueLen);
unsigned CRYPTO_TLV_GetNumUnread                    (const CRYPTO_TLV *pSelf);
int      CRYPTO_TLV_MatchValues                     (const CRYPTO_TLV *pTLV0, const CRYPTO_TLV *pTLV1);
int      CRYPTO_TLV_MPI_LoadBytes                   (CRYPTO_TLV *pSelf, CRYPTO_MPI *pMPI, unsigned Len);
int      CRYPTO_TLV_MPI_LoadBytesLE                 (CRYPTO_TLV *pSelf, CRYPTO_MPI *pMPI, unsigned Len);

/*********************************************************************
*
*       Self-test functions
*
*/
void     CRYPTO_BASE64_RFC4684_SelfTest             (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_MD5_RFC1321_SelfTest                (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_RIPEMD160_Bosselaers_SelfTest       (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA1_FIPS180_SelfTest               (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA1_CAVS_SelfTest                  (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA224_CAVS_SelfTest                (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA256_FIPS180_SelfTest             (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA256_CAVS_SelfTest                (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA384_CAVS_SelfTest                (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA512_FIPS180_SelfTest             (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA512_CAVS_SelfTest                (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_224_FIPS202_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_224_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_256_FIPS202_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_256_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_384_FIPS202_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_384_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_512_FIPS202_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHA3_512_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHAKE128_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SHAKE256_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SM3_GBT_SelfTest                    (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_XCBC_AES_RFC3566_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA1_RFC2202_SelfTest          (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA1_CAVS_SelfTest             (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA224_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA256_RFC4231_SelfTest        (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA256_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA384_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA512_RFC4231_SelfTest        (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HMAC_SHA512_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_TDES_ECB_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_TDES_CBC_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_128_CBC_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_128_ECB_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_128_CCM_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_128_GCM_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_192_CBC_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_192_ECB_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_192_CCM_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_192_GCM_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_256_CBC_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_256_ECB_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_256_CCM_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_256_GCM_CAVS_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_RFC3602_SelfTest                (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AES_CCM_SP800x38C_SelfTest          (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_SEED_RFC4269_SelfTest               (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_ARIA_RFC5794_SelfTest               (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CAMELLIA_NTT_SelfTest               (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CAMELLIA_RFC5528_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_BLOWFISH_Schneier_SelfTest          (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_TWOFISH_Schneier_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CAST_RFC2144_SelfTest               (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CHACHA20_RFC7539_SelfTest           (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_PBKDF2_SelfTest                     (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_HKDF_SelfTest                       (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_FORTUNA_Voss_SelfTest               (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA1_CAVS_SelfTest        (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA224_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA256_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA384_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA512_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA512_224_CAVS_SelfTest  (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HASH_SHA512_256_CAVS_SelfTest  (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA1_CAVS_SelfTest        (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA224_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA256_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA384_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA512_CAVS_SelfTest      (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA512_224_CAVS_SelfTest  (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_HMAC_SHA512_256_CAVS_SelfTest  (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_CTR_TDES_CAVS_SelfTest         (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_CTR_AES128_CAVS_SelfTest       (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_CTR_AES192_CAVS_SelfTest       (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_DRBG_CTR_AES256_CAVS_SelfTest       (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CMAC_TDES_CAVS_SelfTest             (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CMAC_AES_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_CMAC_AES_PRF_RFC4615_SelfTest       (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_KMAC_CSRC_SelfTest                  (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_POLY1305_Bernstein_SelfTest         (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_POLY1305_AES_Bernstein_SelfTest     (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_AESKW_RFC3394_SelfTest              (const CRYPTO_SELFTEST_API *pAPI);
void     CRYPTO_MPI_SEGGER_SelfTest                 (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DH_KA_SEGGER_SelfTest               (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_SEGGER_SelfTest                  (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_NSA_SelfTest                     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_RFC7027_SelfTest                 (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_Curve25519_RFC7748_SelfTest      (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EC_Curve448_RFC7748_SelfTest        (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDH_KA_SEGGER_SelfTest             (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_PKV_CAVS_SelfTest             (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_Sign_CAVS_SelfTest            (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_Verify_CAVS_SelfTest          (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_ECDSA_RFC6979_SelfTest              (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SEGGER_SelfTest                 (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA1_KeyGen_CAVS_SelfTest       (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA224_KeyGen_CAVS_SelfTest     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA256_KeyGen_CAVS_SelfTest     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA384_KeyGen_CAVS_SelfTest     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA512_KeyGen_CAVS_SelfTest     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA512_224_KeyGen_CAVS_SelfTest (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSA_SHA512_256_KeyGen_CAVS_SelfTest (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_SEGGER_SelfTest                 (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_SHA1_CAVS_SelfTest              (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_SHA224_CAVS_SelfTest            (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_SHA256_CAVS_SelfTest            (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_SHA384_CAVS_SelfTest            (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_DSA_SHA512_CAVS_SelfTest            (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EdDSA_Ed25519_Bernstein_SelfTest    (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EdDSA_Ed25519_RFC8032_SelfTest      (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_EdDSA_Ed448_RFC8032_SelfTest        (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSAES_OAEP_EMC_SelfTest             (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSASSA_PSS_Sign_EMC_SelfTest        (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSASSA_PSS_Sign_CAVS_SelfTest       (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSASSA_PSS_Verify_CAVS_SelfTest     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSASSA_PKCS1_Sign_EMC_SelfTest      (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSASSA_PKCS1_Sign_CAVS_SelfTest     (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);
void     CRYPTO_RSASSA_PKCS1_Verify_CAVS_SelfTest   (const CRYPTO_SELFTEST_API *pAPI, CRYPTO_MEM_CONTEXT *pMem);


/*********************************************************************
*
*       Supporting functions
*/
void     CRYPTO_memzap                              (void *pMem, unsigned Len);
int      CRYPTO_memdif                              (const void *pMem0, const void *pMem1, unsigned Len);

/*********************************************************************
*
*       OS integration (for hardware-assisted crypto)
*/
void     CRYPTO_OS_Claim                            (unsigned Unit);
int      CRYPTO_OS_Request                          (unsigned Unit);
void     CRYPTO_OS_Unclaim                          (unsigned Unit);
void     CRYPTO_OS_Init                             (void);

/*********************************************************************
*
*       CRYPTO configuration, supplied by user.
*/
void     CRYPTO_X_Config                            (void);
void     CRYPTO_X_Panic                             (void);

/*********************************************************************
*
*       CRYPTO component initialization.
*/
void     CRYPTO_Init                                (void);
void     CRYPTO_MPI_SetChunkSize                    (unsigned Bytes);
void     CRYPTO_MPI_SetPublicModExp                 (CRYPTO_MPI_MODEXP_FUNC pfModExp);
void     CRYPTO_MPI_SetPrivateModExp                (CRYPTO_MPI_MODEXP_FUNC pfModExp);

/*********************************************************************
*
*       Miscellaneous
*/
unsigned CRYPTO_IncCTRBE                            (U8 *aCTR, unsigned CTRLen, unsigned N);
int      CRYPTO_IncCTRBE_TrapOverflow               (U8 *aCTR, unsigned CTRLen, unsigned N);
unsigned CRYPTO_IncCTRLE                            (U8 *aCTR, unsigned CTRLen, unsigned N);
int      CRYPTO_IncCTRLE_TrapOverflow               (U8 *aCTR, unsigned CTRLen, unsigned N);

/*********************************************************************
*
*       Version and copyright information
*/
const char * CRYPTO_GetVersionText                  (void);
const char * CRYPTO_GetCopyrightText                (void);

#ifdef __cplusplus
}
#endif

/*********************************************************************
*
*       Version compatibility
*
**********************************************************************
*/

#define CRYPTO_TLV_ParseMPI CRYPTO_TLV_ParseINTEGER

#endif

/*************************** End of file ****************************/
